if (typeof process === "undefined") {
    window.process = {
        env: {
            NODE_ENV: "production",
        },
    };
}

var commonjsGlobal =
    typeof globalThis !== "undefined"
        ? globalThis
        : typeof window !== "undefined"
        ? window
        : typeof global !== "undefined"
        ? global
        : typeof self !== "undefined"
        ? self
        : {};

function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}

function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
    if (typeof f == "function") {
        var a = function a() {
            if (this instanceof a) {
                return Reflect.construct(f, arguments, this.constructor);
            }
            return f.apply(this, arguments);
        };
        a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function (k) {
        var d = Object.getOwnPropertyDescriptor(n, k);
        Object.defineProperty(
            a,
            k,
            d.get
                ? d
                : {
                      enumerable: true,
                      get: function () {
                          return n[k];
                      },
                  }
        );
    });
    return a;
}

var events = { exports: {} };

var R$4 = typeof Reflect === "object" ? Reflect : null;
var ReflectApply =
    R$4 && typeof R$4.apply === "function"
        ? R$4.apply
        : function ReflectApply(target, receiver, args) {
              return Function.prototype.apply.call(target, receiver, args);
          };

var ReflectOwnKeys;
if (R$4 && typeof R$4.ownKeys === "function") {
    ReflectOwnKeys = R$4.ownKeys;
} else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
} else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
    };
}

function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}

var NumberIsNaN =
    Number.isNaN ||
    function NumberIsNaN(value) {
        return value !== value;
    };

function EventEmitter() {
    EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
    if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
}

Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function () {
        return defaultMaxListeners;
    },
    set: function (arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
    },
});

EventEmitter.init = function () {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    }
    this._maxListeners = n;
    return this;
};

function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = type === "error";

    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) {
            // Note: The comments on the `throw` lines are intentional, they show
            // up in Node's output if this results in an unhandled exception.
            throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }

    var handler = events[type];

    if (handler === undefined) return false;

    if (typeof handler === "function") {
        ReflectApply(handler, this, args);
    } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
    }

    return true;
};

function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    checkListener(listener);

    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);

            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }

    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") {
            // Adding the second element, need to change to array.
            existing = events[type] = prepend ? [listener, existing] : [existing, listener];
            // If we've already got an array, just append.
        } else if (prepend) {
            existing.unshift(listener);
        } else {
            existing.push(listener);
        }

        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error(
                "Possible EventEmitter memory leak detected. " +
                    existing.length +
                    " " +
                    String(type) +
                    " listeners " +
                    "added. Use emitter.setMaxListeners() to " +
                    "increase limit"
            );
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }

    return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};

function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}

function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;

    checkListener(listener);

    events = this._events;
    if (events === undefined) return this;

    list = events[type];
    if (list === undefined) return this;

    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
            }
        }

        if (position < 0) return this;

        if (position === 0) list.shift();
        else {
            spliceOne(list, position);
        }

        if (list.length === 1) events[type] = list[0];

        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }

    return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;

    events = this._events;
    if (events === undefined) return this;

    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }

    listeners = events[type];

    if (typeof listeners === "function") {
        this.removeListener(type, listeners);
    } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
        }
    }

    return this;
};

function _listeners(target, type, unwrap) {
    var events = target._events;

    if (events === undefined) return [];

    var evlistener = events[type];
    if (evlistener === undefined) return [];

    if (typeof evlistener === "function") return unwrap ? [evlistener.listener || evlistener] : [evlistener];

    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
    if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
    } else {
        return listenerCount.call(emitter, type);
    }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;

    if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === "function") {
            return 1;
        } else if (evlistener !== undefined) {
            return evlistener.length;
        }
    }

    return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i) copy[i] = arr[i];
    return copy;
}

function spliceOne(list, index) {
    for (; index + 1 < list.length; index++) list[index] = list[index + 1];
    list.pop();
}

function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
    }
    return ret;
}

function once(emitter, name) {
    return new Promise(function (resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }

        function resolver() {
            if (typeof emitter.removeListener === "function") {
                emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
    });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
    }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) {
            emitter.once(name, listener);
        } else {
            emitter.on(name, listener);
        }
    } else if (typeof emitter.addEventListener === "function") {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
            // IE does not have builtin `{ once: true }` support so we
            // have to do it manually.
            if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
        });
    } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
}

var eventsExports = events.exports;
var Gg = /*@__PURE__*/ getDefaultExportFromCjs(eventsExports);

var __spreadArray =
    (window && window.__spreadArray) ||
    function (to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
var BrowserInfo = /** @class */ (function () {
    function BrowserInfo(name, version, os) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.type = "browser";
    }
    return BrowserInfo;
})();
var NodeInfo = /** @class */ (function () {
    function NodeInfo(version) {
        this.version = version;
        this.type = "node";
        this.name = "node";
        this.os = process.platform;
    }
    return NodeInfo;
})();
var SearchBotDeviceInfo = /** @class */ (function () {
    function SearchBotDeviceInfo(name, version, os, bot) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.bot = bot;
        this.type = "bot-device";
    }
    return SearchBotDeviceInfo;
})();
var BotInfo = /** @class */ (function () {
    function BotInfo() {
        this.type = "bot";
        this.bot = true; // NOTE: deprecated test name instead
        this.name = "bot";
        this.version = null;
        this.os = null;
    }
    return BotInfo;
})();
var ReactNativeInfo = /** @class */ (function () {
    function ReactNativeInfo() {
        this.type = "react-native";
        this.name = "react-native";
        this.version = null;
        this.os = null;
    }
    return ReactNativeInfo;
})();
// tslint:disable-next-line:max-line-length
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
    ["aol", /AOLShield\/([0-9\._]+)/],
    ["edge", /Edge\/([0-9\._]+)/],
    ["edge-ios", /EdgiOS\/([0-9\._]+)/],
    ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
    ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
    ["samsung", /SamsungBrowser\/([0-9\.]+)/],
    ["silk", /\bSilk\/([0-9._-]+)\b/],
    ["miui", /MiuiBrowser\/([0-9\.]+)$/],
    ["beaker", /BeakerBrowser\/([0-9\.]+)/],
    ["edge-chromium", /EdgA?\/([0-9\.]+)/],
    ["chromium-webview", /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
    ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
    ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
    ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
    ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
    ["fxios", /FxiOS\/([0-9\.]+)/],
    ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
    ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
    ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
    ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
    ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
    ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
    ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
    ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
    ["ie", /MSIE\s(7\.0)/],
    ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
    ["android", /Android\s([0-9\.]+)/],
    ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
    ["safari", /Version\/([0-9\._]+).*Safari/],
    ["facebook", /FB[AS]V\/([0-9\.]+)/],
    ["instagram", /Instagram\s([0-9\.]+)/],
    ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
    ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
    ["curl", /^curl\/([0-9\.]+)$/],
    ["searchbot", SEARCHBOX_UA_REGEX],
];
var operatingSystemRules = [
    ["iOS", /iP(hone|od|ad)/],
    ["Android OS", /Android/],
    ["BlackBerry OS", /BlackBerry|BB10/],
    ["Windows Mobile", /IEMobile/],
    ["Amazon OS", /Kindle/],
    ["Windows 3.11", /Win16/],
    ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
    ["Windows 98", /(Windows 98)|(Win98)/],
    ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
    ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
    ["Windows Server 2003", /(Windows NT 5.2)/],
    ["Windows Vista", /(Windows NT 6.0)/],
    ["Windows 7", /(Windows NT 6.1)/],
    ["Windows 8", /(Windows NT 6.2)/],
    ["Windows 8.1", /(Windows NT 6.3)/],
    ["Windows 10", /(Windows NT 10.0)/],
    ["Windows ME", /Windows ME/],
    ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
    ["Open BSD", /OpenBSD/],
    ["Sun OS", /SunOS/],
    ["Chrome OS", /CrOS/],
    ["Linux", /(Linux)|(X11)/],
    ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
    ["QNX", /QNX/],
    ["BeOS", /BeOS/],
    ["OS/2", /OS\/2/],
];
function detect(userAgent) {
    if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
        return new ReactNativeInfo();
    }
    if (typeof navigator !== "undefined") {
        return parseUserAgent(navigator.userAgent);
    }
    return getNodeVersion();
}
function matchUserAgent(ua) {
    // opted for using reduce here rather than Array#first with a regex.test call
    // this is primarily because using the reduce we only perform the regex
    // execution once rather than once for the test and for the exec again below
    // probably something that needs to be benchmarked though
    return (
        ua !== "" &&
        userAgentRules.reduce(function (matched, _a) {
            var browser = _a[0],
                regex = _a[1];
            if (matched) {
                return matched;
            }
            var uaMatch = regex.exec(ua);
            return !!uaMatch && [browser, uaMatch];
        }, false)
    );
}
function parseUserAgent(ua) {
    var matchedRule = matchUserAgent(ua);
    if (!matchedRule) {
        return null;
    }
    var name = matchedRule[0],
        match = matchedRule[1];
    if (name === "searchbot") {
        return new BotInfo();
    }
    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)
    var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
    if (versionParts) {
        if (versionParts.length < REQUIRED_VERSION_PARTS) {
            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
        }
    } else {
        versionParts = [];
    }
    var version = versionParts.join(".");
    var os = detectOS(ua);
    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
    if (searchBotMatch && searchBotMatch[1]) {
        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
    }
    return new BrowserInfo(name, version, os);
}
function detectOS(ua) {
    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
        var _a = operatingSystemRules[ii],
            os = _a[0],
            regex = _a[1];
        var match = regex.exec(ua);
        if (match) {
            return os;
        }
    }
    return null;
}
function getNodeVersion() {
    var isNode = typeof process !== "undefined" && process.version;
    return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
    var output = [];
    for (var ii = 0; ii < count; ii++) {
        output.push("0");
    }
    return output;
}

var cjs$3 = {};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function (d, b) {
    extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
            function (d, b) {
                d.__proto__ = b;
            }) ||
        function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
}

var __assign = function () {
    __assign =
        Object.assign ||
        function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P
            ? value
            : new P(function (resolve) {
                  resolve(value);
              });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = {
            label: 0,
            sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: [],
        },
        f,
        y,
        t,
        g;
    return (
        (g = { next: verb(0), throw: verb(1), return: verb(2) }),
        typeof Symbol === "function" &&
            (g[Symbol.iterator] = function () {
                return this;
            }),
        g
    );
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_)
            try {
                if (
                    ((f = 1),
                    y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                )
                    return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return { value: op[1], done: false };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [0];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];
                y = 0;
            } finally {
                f = t = 0;
            }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number")
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            },
        };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? ((this.v = v), this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []),
        i,
        q = [];
    return (
        (i = {}),
        verb("next"),
        verb("throw"),
        verb("return"),
        (i[Symbol.asyncIterator] = function () {
            return this;
        }),
        i
    );
    function verb(n) {
        if (g[n])
            i[n] = function (v) {
                return new Promise(function (a, b) {
                    q.push([n, v, a, b]) > 1 || resume(n, v);
                });
            };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
}

function __asyncDelegator(o) {
    var i, p;
    return (
        (i = {}),
        verb("next"),
        verb("throw", function (e) {
            throw e;
        }),
        verb("return"),
        (i[Symbol.iterator] = function () {
            return this;
        }),
        i
    );
    function verb(n, f) {
        i[n] = o[n]
            ? function (v) {
                  return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
              }
            : f;
    }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator],
        i;
    return m
        ? m.call(o)
        : ((o = typeof __values === "function" ? __values(o) : o[Symbol.iterator]()),
          (i = {}),
          verb("next"),
          verb("throw"),
          verb("return"),
          (i[Symbol.asyncIterator] = function () {
              return this;
          }),
          i);
    function verb(n) {
        i[n] =
            o[n] &&
            function (v) {
                return new Promise(function (resolve, reject) {
                    (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                });
            };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
            resolve({ value: v, done: d });
        }, reject);
    }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
    } else {
        cooked.raw = raw;
    }
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}

var tslib_es6 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    get __assign() {
        return __assign;
    },
    __asyncDelegator: __asyncDelegator,
    __asyncGenerator: __asyncGenerator,
    __asyncValues: __asyncValues,
    __await: __await,
    __awaiter: __awaiter,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __createBinding: __createBinding,
    __decorate: __decorate,
    __exportStar: __exportStar,
    __extends: __extends,
    __generator: __generator,
    __importDefault: __importDefault,
    __importStar: __importStar,
    __makeTemplateObject: __makeTemplateObject,
    __metadata: __metadata,
    __param: __param,
    __read: __read,
    __rest: __rest,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __values: __values,
});

var require$$0$2 = /*@__PURE__*/ getAugmentedNamespace(tslib_es6);

var utils$p = {};

var delay = {};

var hasRequiredDelay;

function requireDelay() {
    if (hasRequiredDelay) return delay;
    hasRequiredDelay = 1;
    Object.defineProperty(delay, "__esModule", { value: true });
    delay.delay = void 0;
    function delay$1(timeout) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(true);
            }, timeout);
        });
    }
    delay.delay = delay$1;

    return delay;
}

var convert = {};

var constants = {};

var misc = {};

var hasRequiredMisc;

function requireMisc() {
    if (hasRequiredMisc) return misc;
    hasRequiredMisc = 1;
    Object.defineProperty(misc, "__esModule", { value: true });
    misc.ONE_THOUSAND = misc.ONE_HUNDRED = void 0;
    misc.ONE_HUNDRED = 100;
    misc.ONE_THOUSAND = 1000;

    return misc;
}

var time$1 = {};

var hasRequiredTime;

function requireTime() {
    if (hasRequiredTime) return time$1;
    hasRequiredTime = 1;
    (function (exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ONE_YEAR =
            exports.FOUR_WEEKS =
            exports.THREE_WEEKS =
            exports.TWO_WEEKS =
            exports.ONE_WEEK =
            exports.THIRTY_DAYS =
            exports.SEVEN_DAYS =
            exports.FIVE_DAYS =
            exports.THREE_DAYS =
            exports.ONE_DAY =
            exports.TWENTY_FOUR_HOURS =
            exports.TWELVE_HOURS =
            exports.SIX_HOURS =
            exports.THREE_HOURS =
            exports.ONE_HOUR =
            exports.SIXTY_MINUTES =
            exports.THIRTY_MINUTES =
            exports.TEN_MINUTES =
            exports.FIVE_MINUTES =
            exports.ONE_MINUTE =
            exports.SIXTY_SECONDS =
            exports.THIRTY_SECONDS =
            exports.TEN_SECONDS =
            exports.FIVE_SECONDS =
            exports.ONE_SECOND =
                void 0;
        exports.ONE_SECOND = 1;
        exports.FIVE_SECONDS = 5;
        exports.TEN_SECONDS = 10;
        exports.THIRTY_SECONDS = 30;
        exports.SIXTY_SECONDS = 60;
        exports.ONE_MINUTE = exports.SIXTY_SECONDS;
        exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
        exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
        exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
        exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
        exports.ONE_HOUR = exports.SIXTY_MINUTES;
        exports.THREE_HOURS = exports.ONE_HOUR * 3;
        exports.SIX_HOURS = exports.ONE_HOUR * 6;
        exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
        exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
        exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
        exports.THREE_DAYS = exports.ONE_DAY * 3;
        exports.FIVE_DAYS = exports.ONE_DAY * 5;
        exports.SEVEN_DAYS = exports.ONE_DAY * 7;
        exports.THIRTY_DAYS = exports.ONE_DAY * 30;
        exports.ONE_WEEK = exports.SEVEN_DAYS;
        exports.TWO_WEEKS = exports.ONE_WEEK * 2;
        exports.THREE_WEEKS = exports.ONE_WEEK * 3;
        exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
        exports.ONE_YEAR = exports.ONE_DAY * 365;
    })(time$1);
    return time$1;
}

var hasRequiredConstants;

function requireConstants() {
    if (hasRequiredConstants) return constants;
    hasRequiredConstants = 1;
    (function (exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        const tslib_1 = require$$0$2;
        tslib_1.__exportStar(requireMisc(), exports);
        tslib_1.__exportStar(requireTime(), exports);
    })(constants);
    return constants;
}

var hasRequiredConvert;

function requireConvert() {
    if (hasRequiredConvert) return convert;
    hasRequiredConvert = 1;
    Object.defineProperty(convert, "__esModule", { value: true });
    convert.fromMiliseconds = convert.toMiliseconds = void 0;
    const constants_1 = requireConstants();
    function toMiliseconds(seconds) {
        return seconds * constants_1.ONE_THOUSAND;
    }
    convert.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
        return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    convert.fromMiliseconds = fromMiliseconds;

    return convert;
}

var hasRequiredUtils;

function requireUtils() {
    if (hasRequiredUtils) return utils$p;
    hasRequiredUtils = 1;
    (function (exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        const tslib_1 = require$$0$2;
        tslib_1.__exportStar(requireDelay(), exports);
        tslib_1.__exportStar(requireConvert(), exports);
    })(utils$p);
    return utils$p;
}

var watch$2 = {};

var hasRequiredWatch$1;

function requireWatch$1() {
    if (hasRequiredWatch$1) return watch$2;
    hasRequiredWatch$1 = 1;
    Object.defineProperty(watch$2, "__esModule", { value: true });
    watch$2.Watch = void 0;
    class Watch {
        constructor() {
            this.timestamps = new Map();
        }
        start(label) {
            if (this.timestamps.has(label)) {
                throw new Error(`Watch already started for label: ${label}`);
            }
            this.timestamps.set(label, { started: Date.now() });
        }
        stop(label) {
            const timestamp = this.get(label);
            if (typeof timestamp.elapsed !== "undefined") {
                throw new Error(`Watch already stopped for label: ${label}`);
            }
            const elapsed = Date.now() - timestamp.started;
            this.timestamps.set(label, { started: timestamp.started, elapsed });
        }
        get(label) {
            const timestamp = this.timestamps.get(label);
            if (typeof timestamp === "undefined") {
                throw new Error(`No timestamp found for label: ${label}`);
            }
            return timestamp;
        }
        elapsed(label) {
            const timestamp = this.get(label);
            const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
            return elapsed;
        }
    }
    watch$2.Watch = Watch;
    watch$2.default = Watch;

    return watch$2;
}

var types = {};

var watch$1 = {};

var hasRequiredWatch;

function requireWatch() {
    if (hasRequiredWatch) return watch$1;
    hasRequiredWatch = 1;
    Object.defineProperty(watch$1, "__esModule", { value: true });
    watch$1.IWatch = void 0;
    class IWatch {}
    watch$1.IWatch = IWatch;

    return watch$1;
}

var hasRequiredTypes;

function requireTypes() {
    if (hasRequiredTypes) return types;
    hasRequiredTypes = 1;
    (function (exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        const tslib_1 = require$$0$2;
        tslib_1.__exportStar(requireWatch(), exports);
    })(types);
    return types;
}

(function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require$$0$2;
    tslib_1.__exportStar(requireUtils(), exports);
    tslib_1.__exportStar(requireWatch$1(), exports);
    tslib_1.__exportStar(requireTypes(), exports);
    tslib_1.__exportStar(requireConstants(), exports);
})(cjs$3);

var cjs$2 = {};

Object.defineProperty(cjs$2, "__esModule", { value: true });
cjs$2.getLocalStorage =
    cjs$2.getLocalStorageOrThrow =
    cjs$2.getCrypto =
    cjs$2.getCryptoOrThrow =
    getLocation_1 =
    cjs$2.getLocation =
    cjs$2.getLocationOrThrow =
    getNavigator_1 =
    cjs$2.getNavigator =
    cjs$2.getNavigatorOrThrow =
    getDocument_1 =
    cjs$2.getDocument =
    cjs$2.getDocumentOrThrow =
    cjs$2.getFromWindowOrThrow =
    cjs$2.getFromWindow =
        void 0;
function getFromWindow(name) {
    let res = undefined;
    if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
        res = window[name];
    }
    return res;
}
cjs$2.getFromWindow = getFromWindow;
function getFromWindowOrThrow(name) {
    const res = getFromWindow(name);
    if (!res) {
        throw new Error(`${name} is not defined in Window`);
    }
    return res;
}
cjs$2.getFromWindowOrThrow = getFromWindowOrThrow;
function getDocumentOrThrow() {
    return getFromWindowOrThrow("document");
}
cjs$2.getDocumentOrThrow = getDocumentOrThrow;
function getDocument() {
    return getFromWindow("document");
}
var getDocument_1 = (cjs$2.getDocument = getDocument);
function getNavigatorOrThrow() {
    return getFromWindowOrThrow("navigator");
}
cjs$2.getNavigatorOrThrow = getNavigatorOrThrow;
function getNavigator() {
    return getFromWindow("navigator");
}
var getNavigator_1 = (cjs$2.getNavigator = getNavigator);
function getLocationOrThrow() {
    return getFromWindowOrThrow("location");
}
cjs$2.getLocationOrThrow = getLocationOrThrow;
function getLocation() {
    return getFromWindow("location");
}
var getLocation_1 = (cjs$2.getLocation = getLocation);
function getCryptoOrThrow() {
    return getFromWindowOrThrow("crypto");
}
cjs$2.getCryptoOrThrow = getCryptoOrThrow;
function getCrypto() {
    return getFromWindow("crypto");
}
cjs$2.getCrypto = getCrypto;
function getLocalStorageOrThrow() {
    return getFromWindowOrThrow("localStorage");
}
cjs$2.getLocalStorageOrThrow = getLocalStorageOrThrow;
function getLocalStorage() {
    return getFromWindow("localStorage");
}
cjs$2.getLocalStorage = getLocalStorage;

var cjs$1 = {};

Object.defineProperty(cjs$1, "__esModule", { value: true });
var getWindowMetadata_1 = (cjs$1.getWindowMetadata = void 0);
const window_getters_1 = cjs$2;
function getWindowMetadata() {
    let doc;
    let loc;
    try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
    } catch (e) {
        return null;
    }
    function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons = [];
        for (let i = 0; i < links.length; i++) {
            const link = links[i];
            const rel = link.getAttribute("rel");
            if (rel) {
                if (rel.toLowerCase().indexOf("icon") > -1) {
                    const href = link.getAttribute("href");
                    if (href) {
                        if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                            let absoluteHref = loc.protocol + "//" + loc.host;
                            if (href.indexOf("/") === 0) {
                                absoluteHref += href;
                            } else {
                                const path = loc.pathname.split("/");
                                path.pop();
                                const finalPath = path.join("/");
                                absoluteHref += finalPath + "/" + href;
                            }
                            icons.push(absoluteHref);
                        } else if (href.indexOf("//") === 0) {
                            const absoluteUrl = loc.protocol + href;
                            icons.push(absoluteUrl);
                        } else {
                            icons.push(href);
                        }
                    }
                }
            }
        }
        return icons;
    }
    function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i = 0; i < metaTags.length; i++) {
            const tag = metaTags[i];
            const attributes = ["itemprop", "property", "name"]
                .map((target) => tag.getAttribute(target))
                .filter((attr) => {
                    if (attr) {
                        return args.includes(attr);
                    }
                    return false;
                });
            if (attributes.length && attributes) {
                const content = tag.getAttribute("content");
                if (content) {
                    return content;
                }
            }
        }
        return "";
    }
    function getName() {
        let name = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name) {
            name = doc.title;
        }
        return name;
    }
    function getDescription() {
        const description = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description;
    }
    const name = getName();
    const description = getDescription();
    const url = loc.origin;
    const icons = getIcons();
    const meta = {
        description,
        url,
        icons,
        name,
    };
    return meta;
}
getWindowMetadata_1 = cjs$1.getWindowMetadata = getWindowMetadata;

var queryString = {};

var strictUriEncode = (str) => encodeURIComponent(str).replace(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

var token = "%[a-f0-9]{2}";
var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
var multiMatcher = new RegExp("(" + token + ")+", "gi");

function decodeComponents(components, split) {
    try {
        // Try to decode the entire string first
        return [decodeURIComponent(components.join(""))];
    } catch (err) {
        // Do nothing
    }

    if (components.length === 1) {
        return components;
    }

    split = split || 1;

    // Split the array in 2 parts
    var left = components.slice(0, split);
    var right = components.slice(split);

    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode$2(input) {
    try {
        return decodeURIComponent(input);
    } catch (err) {
        var tokens = input.match(singleMatcher) || [];

        for (var i = 1; i < tokens.length; i++) {
            input = decodeComponents(tokens, i).join("");

            tokens = input.match(singleMatcher) || [];
        }

        return input;
    }
}

function customDecodeURIComponent(input) {
    // Keep track of all the replacements and prefill the map with the `BOM`
    var replaceMap = {
        "%FE%FF": "\uFFFD\uFFFD",
        "%FF%FE": "\uFFFD\uFFFD",
    };

    var match = multiMatcher.exec(input);
    while (match) {
        try {
            // Decode as big chunks as possible
            replaceMap[match[0]] = decodeURIComponent(match[0]);
        } catch (err) {
            var result = decode$2(match[0]);

            if (result !== match[0]) {
                replaceMap[match[0]] = result;
            }
        }

        match = multiMatcher.exec(input);
    }

    // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    replaceMap["%C2"] = "\uFFFD";

    var entries = Object.keys(replaceMap);

    for (var i = 0; i < entries.length; i++) {
        // Replace all decoded components
        var key = entries[i];
        input = input.replace(new RegExp(key, "g"), replaceMap[key]);
    }

    return input;
}

var decodeUriComponent = function (encodedURI) {
    if (typeof encodedURI !== "string") {
        throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
    }

    try {
        encodedURI = encodedURI.replace(/\+/g, " ");

        // Try the built in decoder first
        return decodeURIComponent(encodedURI);
    } catch (err) {
        // Fallback to a more advanced decoder
        return customDecodeURIComponent(encodedURI);
    }
};

var splitOnFirst = (string, separator) => {
    if (!(typeof string === "string" && typeof separator === "string")) {
        throw new TypeError("Expected the arguments to be of type `string`");
    }

    if (separator === "") {
        return [string];
    }

    const separatorIndex = string.indexOf(separator);

    if (separatorIndex === -1) {
        return [string];
    }

    return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
};

var filterObj = function (obj, predicate) {
    var ret = {};
    var keys = Object.keys(obj);
    var isArr = Array.isArray(predicate);

    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var val = obj[key];

        if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
            ret[key] = val;
        }
    }

    return ret;
};

(function (exports) {
    const strictUriEncode$1 = strictUriEncode;
    const decodeComponent = decodeUriComponent;
    const splitOnFirst$1 = splitOnFirst;
    const filterObject = filterObj;

    const isNullOrUndefined = (value) => value === null || value === undefined;

    const encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");

    function encoderForArrayFormat(options) {
        switch (options.arrayFormat) {
            case "index":
                return (key) => (result, value) => {
                    const index = result.length;

                    if (value === undefined || (options.skipNull && value === null) || (options.skipEmptyString && value === "")) {
                        return result;
                    }

                    if (value === null) {
                        return [...result, [encode(key, options), "[", index, "]"].join("")];
                    }

                    return [...result, [encode(key, options), "[", encode(index, options), "]=", encode(value, options)].join("")];
                };

            case "bracket":
                return (key) => (result, value) => {
                    if (value === undefined || (options.skipNull && value === null) || (options.skipEmptyString && value === "")) {
                        return result;
                    }

                    if (value === null) {
                        return [...result, [encode(key, options), "[]"].join("")];
                    }

                    return [...result, [encode(key, options), "[]=", encode(value, options)].join("")];
                };

            case "colon-list-separator":
                return (key) => (result, value) => {
                    if (value === undefined || (options.skipNull && value === null) || (options.skipEmptyString && value === "")) {
                        return result;
                    }

                    if (value === null) {
                        return [...result, [encode(key, options), ":list="].join("")];
                    }

                    return [...result, [encode(key, options), ":list=", encode(value, options)].join("")];
                };

            case "comma":
            case "separator":
            case "bracket-separator": {
                const keyValueSep = options.arrayFormat === "bracket-separator" ? "[]=" : "=";

                return (key) => (result, value) => {
                    if (value === undefined || (options.skipNull && value === null) || (options.skipEmptyString && value === "")) {
                        return result;
                    }

                    // Translate null to an empty string so that it doesn't serialize as 'null'
                    value = value === null ? "" : value;

                    if (result.length === 0) {
                        return [[encode(key, options), keyValueSep, encode(value, options)].join("")];
                    }

                    return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
                };
            }

            default:
                return (key) => (result, value) => {
                    if (value === undefined || (options.skipNull && value === null) || (options.skipEmptyString && value === "")) {
                        return result;
                    }

                    if (value === null) {
                        return [...result, encode(key, options)];
                    }

                    return [...result, [encode(key, options), "=", encode(value, options)].join("")];
                };
        }
    }

    function parserForArrayFormat(options) {
        let result;

        switch (options.arrayFormat) {
            case "index":
                return (key, value, accumulator) => {
                    result = /\[(\d*)\]$/.exec(key);

                    key = key.replace(/\[\d*\]$/, "");

                    if (!result) {
                        accumulator[key] = value;
                        return;
                    }

                    if (accumulator[key] === undefined) {
                        accumulator[key] = {};
                    }

                    accumulator[key][result[1]] = value;
                };

            case "bracket":
                return (key, value, accumulator) => {
                    result = /(\[\])$/.exec(key);
                    key = key.replace(/\[\]$/, "");

                    if (!result) {
                        accumulator[key] = value;
                        return;
                    }

                    if (accumulator[key] === undefined) {
                        accumulator[key] = [value];
                        return;
                    }

                    accumulator[key] = [].concat(accumulator[key], value);
                };

            case "colon-list-separator":
                return (key, value, accumulator) => {
                    result = /(:list)$/.exec(key);
                    key = key.replace(/:list$/, "");

                    if (!result) {
                        accumulator[key] = value;
                        return;
                    }

                    if (accumulator[key] === undefined) {
                        accumulator[key] = [value];
                        return;
                    }

                    accumulator[key] = [].concat(accumulator[key], value);
                };

            case "comma":
            case "separator":
                return (key, value, accumulator) => {
                    const isArray = typeof value === "string" && value.includes(options.arrayFormatSeparator);
                    const isEncodedArray = typeof value === "string" && !isArray && decode(value, options).includes(options.arrayFormatSeparator);
                    value = isEncodedArray ? decode(value, options) : value;
                    const newValue =
                        isArray || isEncodedArray
                            ? value.split(options.arrayFormatSeparator).map((item) => decode(item, options))
                            : value === null
                            ? value
                            : decode(value, options);
                    accumulator[key] = newValue;
                };

            case "bracket-separator":
                return (key, value, accumulator) => {
                    const isArray = /(\[\])$/.test(key);
                    key = key.replace(/\[\]$/, "");

                    if (!isArray) {
                        accumulator[key] = value ? decode(value, options) : value;
                        return;
                    }

                    const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map((item) => decode(item, options));

                    if (accumulator[key] === undefined) {
                        accumulator[key] = arrayValue;
                        return;
                    }

                    accumulator[key] = [].concat(accumulator[key], arrayValue);
                };

            default:
                return (key, value, accumulator) => {
                    if (accumulator[key] === undefined) {
                        accumulator[key] = value;
                        return;
                    }

                    accumulator[key] = [].concat(accumulator[key], value);
                };
        }
    }

    function validateArrayFormatSeparator(value) {
        if (typeof value !== "string" || value.length !== 1) {
            throw new TypeError("arrayFormatSeparator must be single character string");
        }
    }

    function encode(value, options) {
        if (options.encode) {
            return options.strict ? strictUriEncode$1(value) : encodeURIComponent(value);
        }

        return value;
    }

    function decode(value, options) {
        if (options.decode) {
            return decodeComponent(value);
        }

        return value;
    }

    function keysSorter(input) {
        if (Array.isArray(input)) {
            return input.sort();
        }

        if (typeof input === "object") {
            return keysSorter(Object.keys(input))
                .sort((a, b) => Number(a) - Number(b))
                .map((key) => input[key]);
        }

        return input;
    }

    function removeHash(input) {
        const hashStart = input.indexOf("#");
        if (hashStart !== -1) {
            input = input.slice(0, hashStart);
        }

        return input;
    }

    function getHash(url) {
        let hash = "";
        const hashStart = url.indexOf("#");
        if (hashStart !== -1) {
            hash = url.slice(hashStart);
        }

        return hash;
    }

    function extract(input) {
        input = removeHash(input);
        const queryStart = input.indexOf("?");
        if (queryStart === -1) {
            return "";
        }

        return input.slice(queryStart + 1);
    }

    function parseValue(value, options) {
        if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === "string" && value.trim() !== "") {
            value = Number(value);
        } else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
            value = value.toLowerCase() === "true";
        }

        return value;
    }

    function parse(query, options) {
        options = Object.assign(
            {
                decode: true,
                sort: true,
                arrayFormat: "none",
                arrayFormatSeparator: ",",
                parseNumbers: false,
                parseBooleans: false,
            },
            options
        );

        validateArrayFormatSeparator(options.arrayFormatSeparator);

        const formatter = parserForArrayFormat(options);

        // Create an object with no prototype
        const ret = Object.create(null);

        if (typeof query !== "string") {
            return ret;
        }

        query = query.trim().replace(/^[?#&]/, "");

        if (!query) {
            return ret;
        }

        for (const param of query.split("&")) {
            if (param === "") {
                continue;
            }

            let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, " ") : param, "=");

            // Missing `=` should be `null`:
            // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
            value = value === undefined ? null : ["comma", "separator", "bracket-separator"].includes(options.arrayFormat) ? value : decode(value, options);
            formatter(decode(key, options), value, ret);
        }

        for (const key of Object.keys(ret)) {
            const value = ret[key];
            if (typeof value === "object" && value !== null) {
                for (const k of Object.keys(value)) {
                    value[k] = parseValue(value[k], options);
                }
            } else {
                ret[key] = parseValue(value, options);
            }
        }

        if (options.sort === false) {
            return ret;
        }

        return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
            const value = ret[key];
            if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
                // Sort object keys, not values
                result[key] = keysSorter(value);
            } else {
                result[key] = value;
            }

            return result;
        }, Object.create(null));
    }

    exports.extract = extract;
    exports.parse = parse;

    exports.stringify = (object, options) => {
        if (!object) {
            return "";
        }

        options = Object.assign(
            {
                encode: true,
                strict: true,
                arrayFormat: "none",
                arrayFormatSeparator: ",",
            },
            options
        );

        validateArrayFormatSeparator(options.arrayFormatSeparator);

        const shouldFilter = (key) => (options.skipNull && isNullOrUndefined(object[key])) || (options.skipEmptyString && object[key] === "");

        const formatter = encoderForArrayFormat(options);

        const objectCopy = {};

        for (const key of Object.keys(object)) {
            if (!shouldFilter(key)) {
                objectCopy[key] = object[key];
            }
        }

        const keys = Object.keys(objectCopy);

        if (options.sort !== false) {
            keys.sort(options.sort);
        }

        return keys
            .map((key) => {
                const value = object[key];

                if (value === undefined) {
                    return "";
                }

                if (value === null) {
                    return encode(key, options);
                }

                if (Array.isArray(value)) {
                    if (value.length === 0 && options.arrayFormat === "bracket-separator") {
                        return encode(key, options) + "[]";
                    }

                    return value.reduce(formatter(key), []).join("&");
                }

                return encode(key, options) + "=" + encode(value, options);
            })
            .filter((x) => x.length > 0)
            .join("&");
    };

    exports.parseUrl = (url, options) => {
        options = Object.assign(
            {
                decode: true,
            },
            options
        );

        const [url_, hash] = splitOnFirst$1(url, "#");

        return Object.assign(
            {
                url: url_.split("?")[0] || "",
                query: parse(extract(url), options),
            },
            options && options.parseFragmentIdentifier && hash ? { fragmentIdentifier: decode(hash, options) } : {}
        );
    };

    exports.stringifyUrl = (object, options) => {
        options = Object.assign(
            {
                encode: true,
                strict: true,
                [encodeFragmentIdentifier]: true,
            },
            options
        );

        const url = removeHash(object.url).split("?")[0] || "";
        const queryFromUrl = exports.extract(object.url);
        const parsedQueryFromUrl = exports.parse(queryFromUrl, { sort: false });

        const query = Object.assign(parsedQueryFromUrl, object.query);
        let queryString = exports.stringify(query, options);
        if (queryString) {
            queryString = `?${queryString}`;
        }

        let hash = getHash(object.url);
        if (object.fragmentIdentifier) {
            hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
        }

        return `${url}${queryString}${hash}`;
    };

    exports.pick = (input, filter, options) => {
        options = Object.assign(
            {
                parseFragmentIdentifier: true,
                [encodeFragmentIdentifier]: false,
            },
            options
        );

        const { url, query, fragmentIdentifier } = exports.parseUrl(input, options);
        return exports.stringifyUrl(
            {
                url,
                query: filterObject(query, filter),
                fragmentIdentifier,
            },
            options
        );
    };

    exports.exclude = (input, filter, options) => {
        const exclusionFilter = Array.isArray(filter) ? (key) => !filter.includes(key) : (key, value) => !filter(key, value);

        return exports.pick(input, exclusionFilter, options);
    };
})(queryString);

var chacha20poly1305 = {};

var chacha = {};

var binary = {};

var int = {};

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Package int provides helper functions for integerss.
     */
    // Shim using 16-bit pieces.
    function imulShim(a, b) {
        var ah = (a >>> 16) & 0xffff,
            al = a & 0xffff;
        var bh = (b >>> 16) & 0xffff,
            bl = b & 0xffff;
        return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;
    }
    /** 32-bit integer multiplication.  */
    // Use system Math.imul if available, otherwise use our shim.
    exports.mul = Math.imul || imulShim;
    /** 32-bit integer addition.  */
    function add(a, b) {
        return (a + b) | 0;
    }
    exports.add = add;
    /**  32-bit integer subtraction.  */
    function sub(a, b) {
        return (a - b) | 0;
    }
    exports.sub = sub;
    /** 32-bit integer left rotation */
    function rotl(x, n) {
        return (x << n) | (x >>> (32 - n));
    }
    exports.rotl = rotl;
    /** 32-bit integer left rotation */
    function rotr(x, n) {
        return (x << (32 - n)) | (x >>> n);
    }
    exports.rotr = rotr;
    function isIntegerShim(n) {
        return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
    }
    /**
     * Returns true if the argument is an integer number.
     *
     * In ES2015, Number.isInteger.
     */
    exports.isInteger = Number.isInteger || isIntegerShim;
    /**
     *  Math.pow(2, 53) - 1
     *
     *  In ES2015 Number.MAX_SAFE_INTEGER.
     */
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    /**
     * Returns true if the argument is a safe integer number
     * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
     *
     * In ES2015, Number.isSafeInteger.
     */
    exports.isSafeInteger = function (n) {
        return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;
    };
})(int);

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(binary, "__esModule", { value: true });
/**
 * Package binary provides functions for encoding and decoding numbers in byte arrays.
 */
var int_1 = int;
// TODO(dchest): add asserts for correct value ranges and array offsets.
/**
 * Reads 2 bytes from array starting at offset as big-endian
 * signed 16-bit integer and returns it.
 */
function readInt16BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;
}
binary.readInt16BE = readInt16BE;
/**
 * Reads 2 bytes from array starting at offset as big-endian
 * unsigned 16-bit integer and returns it.
 */
function readUint16BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;
}
binary.readUint16BE = readUint16BE;
/**
 * Reads 2 bytes from array starting at offset as little-endian
 * signed 16-bit integer and returns it.
 */
function readInt16LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;
}
binary.readInt16LE = readInt16LE;
/**
 * Reads 2 bytes from array starting at offset as little-endian
 * unsigned 16-bit integer and returns it.
 */
function readUint16LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return ((array[offset + 1] << 8) | array[offset]) >>> 0;
}
binary.readUint16LE = readUint16LE;
/**
 * Writes 2-byte big-endian representation of 16-bit unsigned
 * value to byte array starting at offset.
 *
 * If byte array is not given, creates a new 2-byte one.
 *
 * Returns the output byte array.
 */
function writeUint16BE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(2);
    }
    if (offset === void 0) {
        offset = 0;
    }
    out[offset + 0] = value >>> 8;
    out[offset + 1] = value >>> 0;
    return out;
}
binary.writeUint16BE = writeUint16BE;
binary.writeInt16BE = writeUint16BE;
/**
 * Writes 2-byte little-endian representation of 16-bit unsigned
 * value to array starting at offset.
 *
 * If byte array is not given, creates a new 2-byte one.
 *
 * Returns the output byte array.
 */
function writeUint16LE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(2);
    }
    if (offset === void 0) {
        offset = 0;
    }
    out[offset + 0] = value >>> 0;
    out[offset + 1] = value >>> 8;
    return out;
}
binary.writeUint16LE = writeUint16LE;
binary.writeInt16LE = writeUint16LE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * signed 32-bit integer and returns it.
 */
function readInt32BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return (array[offset] << 24) | (array[offset + 1] << 16) | (array[offset + 2] << 8) | array[offset + 3];
}
binary.readInt32BE = readInt32BE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * unsigned 32-bit integer and returns it.
 */
function readUint32BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return ((array[offset] << 24) | (array[offset + 1] << 16) | (array[offset + 2] << 8) | array[offset + 3]) >>> 0;
}
binary.readUint32BE = readUint32BE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * signed 32-bit integer and returns it.
 */
function readInt32LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return (array[offset + 3] << 24) | (array[offset + 2] << 16) | (array[offset + 1] << 8) | array[offset];
}
binary.readInt32LE = readInt32LE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * unsigned 32-bit integer and returns it.
 */
function readUint32LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    return ((array[offset + 3] << 24) | (array[offset + 2] << 16) | (array[offset + 1] << 8) | array[offset]) >>> 0;
}
binary.readUint32LE = readUint32LE;
/**
 * Writes 4-byte big-endian representation of 32-bit unsigned
 * value to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */
function writeUint32BE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(4);
    }
    if (offset === void 0) {
        offset = 0;
    }
    out[offset + 0] = value >>> 24;
    out[offset + 1] = value >>> 16;
    out[offset + 2] = value >>> 8;
    out[offset + 3] = value >>> 0;
    return out;
}
binary.writeUint32BE = writeUint32BE;
binary.writeInt32BE = writeUint32BE;
/**
 * Writes 4-byte little-endian representation of 32-bit unsigned
 * value to array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */
function writeUint32LE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(4);
    }
    if (offset === void 0) {
        offset = 0;
    }
    out[offset + 0] = value >>> 0;
    out[offset + 1] = value >>> 8;
    out[offset + 2] = value >>> 16;
    out[offset + 3] = value >>> 24;
    return out;
}
binary.writeUint32LE = writeUint32LE;
binary.writeInt32LE = writeUint32LE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * signed 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports exact
 * numbers in range -9007199254740991 to 9007199254740991.
 * If the number stored in the byte array is outside this range,
 * the result is not exact.
 */
function readInt64BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var hi = readInt32BE(array, offset);
    var lo = readInt32BE(array, offset + 4);
    return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;
}
binary.readInt64BE = readInt64BE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * unsigned 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
 */
function readUint64BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var hi = readUint32BE(array, offset);
    var lo = readUint32BE(array, offset + 4);
    return hi * 0x100000000 + lo;
}
binary.readUint64BE = readUint64BE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * signed 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports exact
 * numbers in range -9007199254740991 to 9007199254740991.
 * If the number stored in the byte array is outside this range,
 * the result is not exact.
 */
function readInt64LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var lo = readInt32LE(array, offset);
    var hi = readInt32LE(array, offset + 4);
    return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;
}
binary.readInt64LE = readInt64LE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * unsigned 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
 */
function readUint64LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var lo = readUint32LE(array, offset);
    var hi = readUint32LE(array, offset + 4);
    return hi * 0x100000000 + lo;
}
binary.readUint64LE = readUint64LE;
/**
 * Writes 8-byte big-endian representation of 64-bit unsigned
 * value to byte array starting at offset.
 *
 * Due to JavaScript limitation, supports values up to 2^53-1.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */
function writeUint64BE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(8);
    }
    if (offset === void 0) {
        offset = 0;
    }
    writeUint32BE((value / 0x100000000) >>> 0, out, offset);
    writeUint32BE(value >>> 0, out, offset + 4);
    return out;
}
binary.writeUint64BE = writeUint64BE;
binary.writeInt64BE = writeUint64BE;
/**
 * Writes 8-byte little-endian representation of 64-bit unsigned
 * value to byte array starting at offset.
 *
 * Due to JavaScript limitation, supports values up to 2^53-1.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */
function writeUint64LE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(8);
    }
    if (offset === void 0) {
        offset = 0;
    }
    writeUint32LE(value >>> 0, out, offset);
    writeUint32LE((value / 0x100000000) >>> 0, out, offset + 4);
    return out;
}
binary.writeUint64LE = writeUint64LE;
binary.writeInt64LE = writeUint64LE;
/**
 * Reads bytes from array starting at offset as big-endian
 * unsigned bitLen-bit integer and returns it.
 *
 * Supports bit lengths divisible by 8, up to 48.
 */
function readUintBE(bitLength, array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) {
        throw new Error("readUintBE supports only bitLengths divisible by 8");
    }
    if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintBE: array is too short for the given bitLength");
    }
    var result = 0;
    var mul = 1;
    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
        result += array[i] * mul;
        mul *= 256;
    }
    return result;
}
binary.readUintBE = readUintBE;
/**
 * Reads bytes from array starting at offset as little-endian
 * unsigned bitLen-bit integer and returns it.
 *
 * Supports bit lengths divisible by 8, up to 48.
 */
function readUintLE(bitLength, array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) {
        throw new Error("readUintLE supports only bitLengths divisible by 8");
    }
    if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintLE: array is too short for the given bitLength");
    }
    var result = 0;
    var mul = 1;
    for (var i = offset; i < offset + bitLength / 8; i++) {
        result += array[i] * mul;
        mul *= 256;
    }
    return result;
}
binary.readUintLE = readUintLE;
/**
 * Writes a big-endian representation of bitLen-bit unsigned
 * value to array starting at offset.
 *
 * Supports bit lengths divisible by 8, up to 48.
 *
 * If byte array is not given, creates a new one.
 *
 * Returns the output byte array.
 */
function writeUintBE(bitLength, value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
    }
    if (offset === void 0) {
        offset = 0;
    }
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) {
        throw new Error("writeUintBE supports only bitLengths divisible by 8");
    }
    if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintBE value must be an integer");
    }
    var div = 1;
    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
        out[i] = (value / div) & 0xff;
        div *= 256;
    }
    return out;
}
binary.writeUintBE = writeUintBE;
/**
 * Writes a little-endian representation of bitLen-bit unsigned
 * value to array starting at offset.
 *
 * Supports bit lengths divisible by 8, up to 48.
 *
 * If byte array is not given, creates a new one.
 *
 * Returns the output byte array.
 */
function writeUintLE(bitLength, value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
    }
    if (offset === void 0) {
        offset = 0;
    }
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) {
        throw new Error("writeUintLE supports only bitLengths divisible by 8");
    }
    if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintLE value must be an integer");
    }
    var div = 1;
    for (var i = offset; i < offset + bitLength / 8; i++) {
        out[i] = (value / div) & 0xff;
        div *= 256;
    }
    return out;
}
binary.writeUintLE = writeUintLE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * 32-bit floating-point number and returns it.
 */
function readFloat32BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat32(offset);
}
binary.readFloat32BE = readFloat32BE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * 32-bit floating-point number and returns it.
 */
function readFloat32LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat32(offset, true);
}
binary.readFloat32LE = readFloat32LE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * 64-bit floating-point number ("double") and returns it.
 */
function readFloat64BE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat64(offset);
}
binary.readFloat64BE = readFloat64BE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * 64-bit floating-point number ("double") and returns it.
 */
function readFloat64LE(array, offset) {
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat64(offset, true);
}
binary.readFloat64LE = readFloat64LE;
/**
 * Writes 4-byte big-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */
function writeFloat32BE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(4);
    }
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat32(offset, value);
    return out;
}
binary.writeFloat32BE = writeFloat32BE;
/**
 * Writes 4-byte little-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */
function writeFloat32LE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(4);
    }
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat32(offset, value, true);
    return out;
}
binary.writeFloat32LE = writeFloat32LE;
/**
 * Writes 8-byte big-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */
function writeFloat64BE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(8);
    }
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat64(offset, value);
    return out;
}
binary.writeFloat64BE = writeFloat64BE;
/**
 * Writes 8-byte little-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */
function writeFloat64LE(value, out, offset) {
    if (out === void 0) {
        out = new Uint8Array(8);
    }
    if (offset === void 0) {
        offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat64(offset, value, true);
    return out;
}
binary.writeFloat64LE = writeFloat64LE;

var wipe$1 = {};

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(wipe$1, "__esModule", { value: true });
/**
 * Sets all values in the given array to zero and returns it.
 *
 * The fact that it sets bytes to zero can be relied on.
 *
 * There is no guarantee that this function makes data disappear from memory,
 * as runtime implementation can, for example, have copying garbage collector
 * that will make copies of sensitive data before we wipe it. Or that an
 * operating system will write our data to swap or sleep image. Another thing
 * is that an optimizing compiler can remove calls to this function or make it
 * no-op. There's nothing we can do with it, so we just do our best and hope
 * that everything will be okay and good will triumph over evil.
 */
function wipe(array) {
    // Right now it's similar to array.fill(0). If it turns
    // out that runtimes optimize this call away, maybe
    // we can try something else.
    for (var i = 0; i < array.length; i++) {
        array[i] = 0;
    }
    return array;
}
wipe$1.wipe = wipe;

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(chacha, "__esModule", { value: true });
/**
 * Package chacha implements ChaCha stream cipher.
 */
var binary_1 = binary;
var wipe_1$3 = wipe$1;
// Number of ChaCha rounds (ChaCha20).
var ROUNDS = 20;
// Applies the ChaCha core function to 16-byte input,
// 32-byte key key, and puts the result into 64-byte array out.
function core(out, input, key) {
    var j0 = 0x61707865; // "expa"  -- ChaCha's "sigma" constant
    var j1 = 0x3320646e; // "nd 3"     for 32-byte keys
    var j2 = 0x79622d32; // "2-by"
    var j3 = 0x6b206574; // "te k"
    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];
    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];
    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];
    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];
    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];
    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];
    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];
    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];
    var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];
    var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];
    var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];
    var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];
    var x0 = j0;
    var x1 = j1;
    var x2 = j2;
    var x3 = j3;
    var x4 = j4;
    var x5 = j5;
    var x6 = j6;
    var x7 = j7;
    var x8 = j8;
    var x9 = j9;
    var x10 = j10;
    var x11 = j11;
    var x12 = j12;
    var x13 = j13;
    var x14 = j14;
    var x15 = j15;
    for (var i = 0; i < ROUNDS; i += 2) {
        x0 = (x0 + x4) | 0;
        x12 ^= x0;
        x12 = (x12 >>> (32 - 16)) | (x12 << 16);
        x8 = (x8 + x12) | 0;
        x4 ^= x8;
        x4 = (x4 >>> (32 - 12)) | (x4 << 12);
        x1 = (x1 + x5) | 0;
        x13 ^= x1;
        x13 = (x13 >>> (32 - 16)) | (x13 << 16);
        x9 = (x9 + x13) | 0;
        x5 ^= x9;
        x5 = (x5 >>> (32 - 12)) | (x5 << 12);
        x2 = (x2 + x6) | 0;
        x14 ^= x2;
        x14 = (x14 >>> (32 - 16)) | (x14 << 16);
        x10 = (x10 + x14) | 0;
        x6 ^= x10;
        x6 = (x6 >>> (32 - 12)) | (x6 << 12);
        x3 = (x3 + x7) | 0;
        x15 ^= x3;
        x15 = (x15 >>> (32 - 16)) | (x15 << 16);
        x11 = (x11 + x15) | 0;
        x7 ^= x11;
        x7 = (x7 >>> (32 - 12)) | (x7 << 12);
        x2 = (x2 + x6) | 0;
        x14 ^= x2;
        x14 = (x14 >>> (32 - 8)) | (x14 << 8);
        x10 = (x10 + x14) | 0;
        x6 ^= x10;
        x6 = (x6 >>> (32 - 7)) | (x6 << 7);
        x3 = (x3 + x7) | 0;
        x15 ^= x3;
        x15 = (x15 >>> (32 - 8)) | (x15 << 8);
        x11 = (x11 + x15) | 0;
        x7 ^= x11;
        x7 = (x7 >>> (32 - 7)) | (x7 << 7);
        x1 = (x1 + x5) | 0;
        x13 ^= x1;
        x13 = (x13 >>> (32 - 8)) | (x13 << 8);
        x9 = (x9 + x13) | 0;
        x5 ^= x9;
        x5 = (x5 >>> (32 - 7)) | (x5 << 7);
        x0 = (x0 + x4) | 0;
        x12 ^= x0;
        x12 = (x12 >>> (32 - 8)) | (x12 << 8);
        x8 = (x8 + x12) | 0;
        x4 ^= x8;
        x4 = (x4 >>> (32 - 7)) | (x4 << 7);
        x0 = (x0 + x5) | 0;
        x15 ^= x0;
        x15 = (x15 >>> (32 - 16)) | (x15 << 16);
        x10 = (x10 + x15) | 0;
        x5 ^= x10;
        x5 = (x5 >>> (32 - 12)) | (x5 << 12);
        x1 = (x1 + x6) | 0;
        x12 ^= x1;
        x12 = (x12 >>> (32 - 16)) | (x12 << 16);
        x11 = (x11 + x12) | 0;
        x6 ^= x11;
        x6 = (x6 >>> (32 - 12)) | (x6 << 12);
        x2 = (x2 + x7) | 0;
        x13 ^= x2;
        x13 = (x13 >>> (32 - 16)) | (x13 << 16);
        x8 = (x8 + x13) | 0;
        x7 ^= x8;
        x7 = (x7 >>> (32 - 12)) | (x7 << 12);
        x3 = (x3 + x4) | 0;
        x14 ^= x3;
        x14 = (x14 >>> (32 - 16)) | (x14 << 16);
        x9 = (x9 + x14) | 0;
        x4 ^= x9;
        x4 = (x4 >>> (32 - 12)) | (x4 << 12);
        x2 = (x2 + x7) | 0;
        x13 ^= x2;
        x13 = (x13 >>> (32 - 8)) | (x13 << 8);
        x8 = (x8 + x13) | 0;
        x7 ^= x8;
        x7 = (x7 >>> (32 - 7)) | (x7 << 7);
        x3 = (x3 + x4) | 0;
        x14 ^= x3;
        x14 = (x14 >>> (32 - 8)) | (x14 << 8);
        x9 = (x9 + x14) | 0;
        x4 ^= x9;
        x4 = (x4 >>> (32 - 7)) | (x4 << 7);
        x1 = (x1 + x6) | 0;
        x12 ^= x1;
        x12 = (x12 >>> (32 - 8)) | (x12 << 8);
        x11 = (x11 + x12) | 0;
        x6 ^= x11;
        x6 = (x6 >>> (32 - 7)) | (x6 << 7);
        x0 = (x0 + x5) | 0;
        x15 ^= x0;
        x15 = (x15 >>> (32 - 8)) | (x15 << 8);
        x10 = (x10 + x15) | 0;
        x5 ^= x10;
        x5 = (x5 >>> (32 - 7)) | (x5 << 7);
    }
    binary_1.writeUint32LE((x0 + j0) | 0, out, 0);
    binary_1.writeUint32LE((x1 + j1) | 0, out, 4);
    binary_1.writeUint32LE((x2 + j2) | 0, out, 8);
    binary_1.writeUint32LE((x3 + j3) | 0, out, 12);
    binary_1.writeUint32LE((x4 + j4) | 0, out, 16);
    binary_1.writeUint32LE((x5 + j5) | 0, out, 20);
    binary_1.writeUint32LE((x6 + j6) | 0, out, 24);
    binary_1.writeUint32LE((x7 + j7) | 0, out, 28);
    binary_1.writeUint32LE((x8 + j8) | 0, out, 32);
    binary_1.writeUint32LE((x9 + j9) | 0, out, 36);
    binary_1.writeUint32LE((x10 + j10) | 0, out, 40);
    binary_1.writeUint32LE((x11 + j11) | 0, out, 44);
    binary_1.writeUint32LE((x12 + j12) | 0, out, 48);
    binary_1.writeUint32LE((x13 + j13) | 0, out, 52);
    binary_1.writeUint32LE((x14 + j14) | 0, out, 56);
    binary_1.writeUint32LE((x15 + j15) | 0, out, 60);
}
/**
 * Encrypt src with ChaCha20 stream generated for the given 32-byte key and
 * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and
 * write the result into dst and return it.
 *
 * dst and src may be the same, but otherwise must not overlap.
 *
 * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the
 * same key and nonce, otherwise the stream will repeat. The function will
 * throw error if counter overflows to prevent this.
 *
 * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which
 * is more than a million petabytes). However, it is not recommended to
 * generate 8-byte nonces randomly, as the chance of collision is high.
 *
 * Never use the same key and nonce to encrypt more than one message.
 *
 * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte
 * array with stream counter in first nonceInplaceCounterLength bytes and nonce
 * in the last remaining bytes. The counter will be incremented inplace for
 * each ChaCha block. This is useful if you need to encrypt one stream of data
 * in chunks.
 */
function streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
    if (nonceInplaceCounterLength === void 0) {
        nonceInplaceCounterLength = 0;
    }
    // We only support 256-bit keys.
    if (key.length !== 32) {
        throw new Error("ChaCha: key size must be 32 bytes");
    }
    if (dst.length < src.length) {
        throw new Error("ChaCha: destination is shorter than source");
    }
    var nc;
    var counterLength;
    if (nonceInplaceCounterLength === 0) {
        if (nonce.length !== 8 && nonce.length !== 12) {
            throw new Error("ChaCha nonce must be 8 or 12 bytes");
        }
        nc = new Uint8Array(16);
        // First counterLength bytes of nc are counter, starting with zero.
        counterLength = nc.length - nonce.length;
        // Last bytes of nc after counterLength are nonce, set them.
        nc.set(nonce, counterLength);
    } else {
        if (nonce.length !== 16) {
            throw new Error("ChaCha nonce with counter must be 16 bytes");
        }
        // This will update passed nonce with counter inplace.
        nc = nonce;
        counterLength = nonceInplaceCounterLength;
    }
    // Allocate temporary space for ChaCha block.
    var block = new Uint8Array(64);
    for (var i = 0; i < src.length; i += 64) {
        // Generate a block.
        core(block, nc, key);
        // XOR block bytes with src into dst.
        for (var j = i; j < i + 64 && j < src.length; j++) {
            dst[j] = src[j] ^ block[j - i];
        }
        // Increment counter.
        incrementCounter(nc, 0, counterLength);
    }
    // Cleanup temporary space.
    wipe_1$3.wipe(block);
    if (nonceInplaceCounterLength === 0) {
        // Cleanup counter.
        wipe_1$3.wipe(nc);
    }
    return dst;
}
chacha.streamXOR = streamXOR;
/**
 * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte
 * nonce and write it into dst and return it.
 *
 * Never use the same key and nonce to generate more than one stream.
 *
 * If nonceInplaceCounterLength is not 0, it behaves the same with respect to
 * the nonce as described in the streamXOR documentation.
 *
 * stream is like streamXOR with all-zero src.
 */
function stream(key, nonce, dst, nonceInplaceCounterLength) {
    if (nonceInplaceCounterLength === void 0) {
        nonceInplaceCounterLength = 0;
    }
    wipe_1$3.wipe(dst);
    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);
}
chacha.stream = stream;
function incrementCounter(counter, pos, len) {
    var carry = 1;
    while (len--) {
        carry = (carry + (counter[pos] & 0xff)) | 0;
        counter[pos] = carry & 0xff;
        carry >>>= 8;
        pos++;
    }
    if (carry > 0) {
        throw new Error("ChaCha: counter overflow");
    }
}

var poly1305 = {};

var constantTime = {};

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(constantTime, "__esModule", { value: true });
/**
 * Package constant-time provides functions for performing algorithmically constant-time operations.
 */
/**
 * NOTE! Due to the inability to guarantee real constant time evaluation of
 * anything in JavaScript VM, this is module is the best effort.
 */
/**
 * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.
 *
 * Supports only 32-bit integers, so resultIfOne or resultIfZero are not
 * integers, they'll be converted to them with bitwise operations.
 */
function select(subject, resultIfOne, resultIfZero) {
    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);
}
constantTime.select = select;
/**
 * Returns 1 if a <= b, or 0 if not.
 * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.
 */
function lessOrEqual(a, b) {
    return (((a | 0) - (b | 0) - 1) >>> 31) & 1;
}
constantTime.lessOrEqual = lessOrEqual;
/**
 * Returns 1 if a and b are of equal length and their contents
 * are equal, or 0 otherwise.
 *
 * Note that unlike in equal(), zero-length inputs are considered
 * the same, so this function will return 1.
 */
function compare(a, b) {
    if (a.length !== b.length) {
        return 0;
    }
    var result = 0;
    for (var i = 0; i < a.length; i++) {
        result |= a[i] ^ b[i];
    }
    return 1 & ((result - 1) >>> 8);
}
constantTime.compare = compare;
/**
 * Returns true if a and b are of equal non-zero length,
 * and their contents are equal, or false otherwise.
 *
 * Note that unlike in compare() zero-length inputs are considered
 * _not_ equal, so this function will return false.
 */
function equal(a, b) {
    if (a.length === 0 || b.length === 0) {
        return false;
    }
    return compare(a, b) !== 0;
}
constantTime.equal = equal;

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Package poly1305 implements Poly1305 one-time message authentication algorithm.
     */
    var constant_time_1 = constantTime;
    var wipe_1 = wipe$1;
    exports.DIGEST_LENGTH = 16;
    // Port of Andrew Moon's Poly1305-donna-16. Public domain.
    // https://github.com/floodyberry/poly1305-donna
    /**
     * Poly1305 computes 16-byte authenticator of message using
     * a one-time 32-byte key.
     *
     * Important: key should be used for only one message,
     * it should never repeat.
     */
    var Poly1305 = /** @class */ (function () {
        function Poly1305(key) {
            this.digestLength = exports.DIGEST_LENGTH;
            this._buffer = new Uint8Array(16);
            this._r = new Uint16Array(10);
            this._h = new Uint16Array(10);
            this._pad = new Uint16Array(8);
            this._leftover = 0;
            this._fin = 0;
            this._finished = false;
            var t0 = key[0] | (key[1] << 8);
            this._r[0] = t0 & 0x1fff;
            var t1 = key[2] | (key[3] << 8);
            this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
            var t2 = key[4] | (key[5] << 8);
            this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
            var t3 = key[6] | (key[7] << 8);
            this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
            var t4 = key[8] | (key[9] << 8);
            this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
            this._r[5] = (t4 >>> 1) & 0x1ffe;
            var t5 = key[10] | (key[11] << 8);
            this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
            var t6 = key[12] | (key[13] << 8);
            this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
            var t7 = key[14] | (key[15] << 8);
            this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
            this._r[9] = (t7 >>> 5) & 0x007f;
            this._pad[0] = key[16] | (key[17] << 8);
            this._pad[1] = key[18] | (key[19] << 8);
            this._pad[2] = key[20] | (key[21] << 8);
            this._pad[3] = key[22] | (key[23] << 8);
            this._pad[4] = key[24] | (key[25] << 8);
            this._pad[5] = key[26] | (key[27] << 8);
            this._pad[6] = key[28] | (key[29] << 8);
            this._pad[7] = key[30] | (key[31] << 8);
        }
        Poly1305.prototype._blocks = function (m, mpos, bytes) {
            var hibit = this._fin ? 0 : 1 << 11;
            var h0 = this._h[0],
                h1 = this._h[1],
                h2 = this._h[2],
                h3 = this._h[3],
                h4 = this._h[4],
                h5 = this._h[5],
                h6 = this._h[6],
                h7 = this._h[7],
                h8 = this._h[8],
                h9 = this._h[9];
            var r0 = this._r[0],
                r1 = this._r[1],
                r2 = this._r[2],
                r3 = this._r[3],
                r4 = this._r[4],
                r5 = this._r[5],
                r6 = this._r[6],
                r7 = this._r[7],
                r8 = this._r[8],
                r9 = this._r[9];
            while (bytes >= 16) {
                var t0 = m[mpos + 0] | (m[mpos + 1] << 8);
                h0 += t0 & 0x1fff;
                var t1 = m[mpos + 2] | (m[mpos + 3] << 8);
                h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
                var t2 = m[mpos + 4] | (m[mpos + 5] << 8);
                h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
                var t3 = m[mpos + 6] | (m[mpos + 7] << 8);
                h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
                var t4 = m[mpos + 8] | (m[mpos + 9] << 8);
                h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
                h5 += (t4 >>> 1) & 0x1fff;
                var t5 = m[mpos + 10] | (m[mpos + 11] << 8);
                h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
                var t6 = m[mpos + 12] | (m[mpos + 13] << 8);
                h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
                var t7 = m[mpos + 14] | (m[mpos + 15] << 8);
                h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
                h9 += (t7 >>> 5) | hibit;
                var c = 0;
                var d0 = c;
                d0 += h0 * r0;
                d0 += h1 * (5 * r9);
                d0 += h2 * (5 * r8);
                d0 += h3 * (5 * r7);
                d0 += h4 * (5 * r6);
                c = d0 >>> 13;
                d0 &= 0x1fff;
                d0 += h5 * (5 * r5);
                d0 += h6 * (5 * r4);
                d0 += h7 * (5 * r3);
                d0 += h8 * (5 * r2);
                d0 += h9 * (5 * r1);
                c += d0 >>> 13;
                d0 &= 0x1fff;
                var d1 = c;
                d1 += h0 * r1;
                d1 += h1 * r0;
                d1 += h2 * (5 * r9);
                d1 += h3 * (5 * r8);
                d1 += h4 * (5 * r7);
                c = d1 >>> 13;
                d1 &= 0x1fff;
                d1 += h5 * (5 * r6);
                d1 += h6 * (5 * r5);
                d1 += h7 * (5 * r4);
                d1 += h8 * (5 * r3);
                d1 += h9 * (5 * r2);
                c += d1 >>> 13;
                d1 &= 0x1fff;
                var d2 = c;
                d2 += h0 * r2;
                d2 += h1 * r1;
                d2 += h2 * r0;
                d2 += h3 * (5 * r9);
                d2 += h4 * (5 * r8);
                c = d2 >>> 13;
                d2 &= 0x1fff;
                d2 += h5 * (5 * r7);
                d2 += h6 * (5 * r6);
                d2 += h7 * (5 * r5);
                d2 += h8 * (5 * r4);
                d2 += h9 * (5 * r3);
                c += d2 >>> 13;
                d2 &= 0x1fff;
                var d3 = c;
                d3 += h0 * r3;
                d3 += h1 * r2;
                d3 += h2 * r1;
                d3 += h3 * r0;
                d3 += h4 * (5 * r9);
                c = d3 >>> 13;
                d3 &= 0x1fff;
                d3 += h5 * (5 * r8);
                d3 += h6 * (5 * r7);
                d3 += h7 * (5 * r6);
                d3 += h8 * (5 * r5);
                d3 += h9 * (5 * r4);
                c += d3 >>> 13;
                d3 &= 0x1fff;
                var d4 = c;
                d4 += h0 * r4;
                d4 += h1 * r3;
                d4 += h2 * r2;
                d4 += h3 * r1;
                d4 += h4 * r0;
                c = d4 >>> 13;
                d4 &= 0x1fff;
                d4 += h5 * (5 * r9);
                d4 += h6 * (5 * r8);
                d4 += h7 * (5 * r7);
                d4 += h8 * (5 * r6);
                d4 += h9 * (5 * r5);
                c += d4 >>> 13;
                d4 &= 0x1fff;
                var d5 = c;
                d5 += h0 * r5;
                d5 += h1 * r4;
                d5 += h2 * r3;
                d5 += h3 * r2;
                d5 += h4 * r1;
                c = d5 >>> 13;
                d5 &= 0x1fff;
                d5 += h5 * r0;
                d5 += h6 * (5 * r9);
                d5 += h7 * (5 * r8);
                d5 += h8 * (5 * r7);
                d5 += h9 * (5 * r6);
                c += d5 >>> 13;
                d5 &= 0x1fff;
                var d6 = c;
                d6 += h0 * r6;
                d6 += h1 * r5;
                d6 += h2 * r4;
                d6 += h3 * r3;
                d6 += h4 * r2;
                c = d6 >>> 13;
                d6 &= 0x1fff;
                d6 += h5 * r1;
                d6 += h6 * r0;
                d6 += h7 * (5 * r9);
                d6 += h8 * (5 * r8);
                d6 += h9 * (5 * r7);
                c += d6 >>> 13;
                d6 &= 0x1fff;
                var d7 = c;
                d7 += h0 * r7;
                d7 += h1 * r6;
                d7 += h2 * r5;
                d7 += h3 * r4;
                d7 += h4 * r3;
                c = d7 >>> 13;
                d7 &= 0x1fff;
                d7 += h5 * r2;
                d7 += h6 * r1;
                d7 += h7 * r0;
                d7 += h8 * (5 * r9);
                d7 += h9 * (5 * r8);
                c += d7 >>> 13;
                d7 &= 0x1fff;
                var d8 = c;
                d8 += h0 * r8;
                d8 += h1 * r7;
                d8 += h2 * r6;
                d8 += h3 * r5;
                d8 += h4 * r4;
                c = d8 >>> 13;
                d8 &= 0x1fff;
                d8 += h5 * r3;
                d8 += h6 * r2;
                d8 += h7 * r1;
                d8 += h8 * r0;
                d8 += h9 * (5 * r9);
                c += d8 >>> 13;
                d8 &= 0x1fff;
                var d9 = c;
                d9 += h0 * r9;
                d9 += h1 * r8;
                d9 += h2 * r7;
                d9 += h3 * r6;
                d9 += h4 * r5;
                c = d9 >>> 13;
                d9 &= 0x1fff;
                d9 += h5 * r4;
                d9 += h6 * r3;
                d9 += h7 * r2;
                d9 += h8 * r1;
                d9 += h9 * r0;
                c += d9 >>> 13;
                d9 &= 0x1fff;
                c = ((c << 2) + c) | 0;
                c = (c + d0) | 0;
                d0 = c & 0x1fff;
                c = c >>> 13;
                d1 += c;
                h0 = d0;
                h1 = d1;
                h2 = d2;
                h3 = d3;
                h4 = d4;
                h5 = d5;
                h6 = d6;
                h7 = d7;
                h8 = d8;
                h9 = d9;
                mpos += 16;
                bytes -= 16;
            }
            this._h[0] = h0;
            this._h[1] = h1;
            this._h[2] = h2;
            this._h[3] = h3;
            this._h[4] = h4;
            this._h[5] = h5;
            this._h[6] = h6;
            this._h[7] = h7;
            this._h[8] = h8;
            this._h[9] = h9;
        };
        Poly1305.prototype.finish = function (mac, macpos) {
            if (macpos === void 0) {
                macpos = 0;
            }
            var g = new Uint16Array(10);
            var c;
            var mask;
            var f;
            var i;
            if (this._leftover) {
                i = this._leftover;
                this._buffer[i++] = 1;
                for (; i < 16; i++) {
                    this._buffer[i] = 0;
                }
                this._fin = 1;
                this._blocks(this._buffer, 0, 16);
            }
            c = this._h[1] >>> 13;
            this._h[1] &= 0x1fff;
            for (i = 2; i < 10; i++) {
                this._h[i] += c;
                c = this._h[i] >>> 13;
                this._h[i] &= 0x1fff;
            }
            this._h[0] += c * 5;
            c = this._h[0] >>> 13;
            this._h[0] &= 0x1fff;
            this._h[1] += c;
            c = this._h[1] >>> 13;
            this._h[1] &= 0x1fff;
            this._h[2] += c;
            g[0] = this._h[0] + 5;
            c = g[0] >>> 13;
            g[0] &= 0x1fff;
            for (i = 1; i < 10; i++) {
                g[i] = this._h[i] + c;
                c = g[i] >>> 13;
                g[i] &= 0x1fff;
            }
            g[9] -= 1 << 13;
            mask = (c ^ 1) - 1;
            for (i = 0; i < 10; i++) {
                g[i] &= mask;
            }
            mask = ~mask;
            for (i = 0; i < 10; i++) {
                this._h[i] = (this._h[i] & mask) | g[i];
            }
            this._h[0] = (this._h[0] | (this._h[1] << 13)) & 0xffff;
            this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;
            this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;
            this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;
            this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;
            this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;
            this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;
            this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;
            f = this._h[0] + this._pad[0];
            this._h[0] = f & 0xffff;
            for (i = 1; i < 8; i++) {
                f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;
                this._h[i] = f & 0xffff;
            }
            mac[macpos + 0] = this._h[0] >>> 0;
            mac[macpos + 1] = this._h[0] >>> 8;
            mac[macpos + 2] = this._h[1] >>> 0;
            mac[macpos + 3] = this._h[1] >>> 8;
            mac[macpos + 4] = this._h[2] >>> 0;
            mac[macpos + 5] = this._h[2] >>> 8;
            mac[macpos + 6] = this._h[3] >>> 0;
            mac[macpos + 7] = this._h[3] >>> 8;
            mac[macpos + 8] = this._h[4] >>> 0;
            mac[macpos + 9] = this._h[4] >>> 8;
            mac[macpos + 10] = this._h[5] >>> 0;
            mac[macpos + 11] = this._h[5] >>> 8;
            mac[macpos + 12] = this._h[6] >>> 0;
            mac[macpos + 13] = this._h[6] >>> 8;
            mac[macpos + 14] = this._h[7] >>> 0;
            mac[macpos + 15] = this._h[7] >>> 8;
            this._finished = true;
            return this;
        };
        Poly1305.prototype.update = function (m) {
            var mpos = 0;
            var bytes = m.length;
            var want;
            if (this._leftover) {
                want = 16 - this._leftover;
                if (want > bytes) {
                    want = bytes;
                }
                for (var i = 0; i < want; i++) {
                    this._buffer[this._leftover + i] = m[mpos + i];
                }
                bytes -= want;
                mpos += want;
                this._leftover += want;
                if (this._leftover < 16) {
                    return this;
                }
                this._blocks(this._buffer, 0, 16);
                this._leftover = 0;
            }
            if (bytes >= 16) {
                want = bytes - (bytes % 16);
                this._blocks(m, mpos, want);
                mpos += want;
                bytes -= want;
            }
            if (bytes) {
                for (var i = 0; i < bytes; i++) {
                    this._buffer[this._leftover + i] = m[mpos + i];
                }
                this._leftover += bytes;
            }
            return this;
        };
        Poly1305.prototype.digest = function () {
            // TODO(dchest): it behaves differently than other hashes/HMAC,
            // because it throws when finished — others just return saved result.
            if (this._finished) {
                throw new Error("Poly1305 was finished");
            }
            var mac = new Uint8Array(16);
            this.finish(mac);
            return mac;
        };
        Poly1305.prototype.clean = function () {
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._r);
            wipe_1.wipe(this._h);
            wipe_1.wipe(this._pad);
            this._leftover = 0;
            this._fin = 0;
            this._finished = true; // mark as finished even if not
            return this;
        };
        return Poly1305;
    })();
    exports.Poly1305 = Poly1305;
    /**
     * Returns 16-byte authenticator of data using a one-time 32-byte key.
     *
     * Important: key should be used for only one message, it should never repeat.
     */
    function oneTimeAuth(key, data) {
        var h = new Poly1305(key);
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    exports.oneTimeAuth = oneTimeAuth;
    /**
     * Returns true if two authenticators are 16-byte long and equal.
     * Uses contant-time comparison to avoid leaking timing information.
     */
    function equal(a, b) {
        if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {
            return false;
        }
        return constant_time_1.equal(a, b);
    }
    exports.equal = equal;
})(poly1305);

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    var chacha_1 = chacha;
    var poly1305_1 = poly1305;
    var wipe_1 = wipe$1;
    var binary_1 = binary;
    var constant_time_1 = constantTime;
    exports.KEY_LENGTH = 32;
    exports.NONCE_LENGTH = 12;
    exports.TAG_LENGTH = 16;
    var ZEROS = new Uint8Array(16);
    /**
     * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.
     *
     * Defined in RFC7539.
     */
    var ChaCha20Poly1305 = /** @class */ (function () {
        /**
         * Creates a new instance with the given 32-byte key.
         */
        function ChaCha20Poly1305(key) {
            this.nonceLength = exports.NONCE_LENGTH;
            this.tagLength = exports.TAG_LENGTH;
            if (key.length !== exports.KEY_LENGTH) {
                throw new Error("ChaCha20Poly1305 needs 32-byte key");
            }
            // Copy key.
            this._key = new Uint8Array(key);
        }
        /**
         * Encrypts and authenticates plaintext, authenticates associated data,
         * and returns sealed ciphertext, which includes authentication tag.
         *
         * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
         * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
         * and nonce.
         *
         * If dst is given (it must be the size of plaintext + the size of tag
         * length) the result will be put into it. Dst and plaintext must not
         * overlap.
         */
        ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {
            if (nonce.length > 16) {
                throw new Error("ChaCha20Poly1305: incorrect nonce length");
            }
            // Allocate space for counter, and set nonce as last bytes of it.
            var counter = new Uint8Array(16);
            counter.set(nonce, counter.length - nonce.length);
            // Generate authentication key by taking first 32-bytes of stream.
            // We pass full counter, which has 12-byte nonce and 4-byte block counter,
            // and it will get incremented after generating the block, which is
            // exactly what we need: we only use the first 32 bytes of 64-byte
            // ChaCha block and discard the next 32 bytes.
            var authKey = new Uint8Array(32);
            chacha_1.stream(this._key, counter, authKey, 4);
            // Allocate space for sealed ciphertext.
            var resultLength = plaintext.length + this.tagLength;
            var result;
            if (dst) {
                if (dst.length !== resultLength) {
                    throw new Error("ChaCha20Poly1305: incorrect destination length");
                }
                result = dst;
            } else {
                result = new Uint8Array(resultLength);
            }
            // Encrypt plaintext.
            chacha_1.streamXOR(this._key, counter, plaintext, result, 4);
            // Authenticate.
            // XXX: can "simplify" here: pass full result (which is already padded
            // due to zeroes prepared for tag), and ciphertext length instead of
            // subarray of result.
            this._authenticate(
                result.subarray(result.length - this.tagLength, result.length),
                authKey,
                result.subarray(0, result.length - this.tagLength),
                associatedData
            );
            // Cleanup.
            wipe_1.wipe(counter);
            return result;
        };
        /**
         * Authenticates sealed ciphertext (which includes authentication tag) and
         * associated data, decrypts ciphertext and returns decrypted plaintext.
         *
         * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
         * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
         * and nonce.
         *
         * If authentication fails, it returns null.
         *
         * If dst is given (it must be of ciphertext length minus tag length),
         * the result will be put into it. Dst and plaintext must not overlap.
         */
        ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {
            if (nonce.length > 16) {
                throw new Error("ChaCha20Poly1305: incorrect nonce length");
            }
            // Sealed ciphertext should at least contain tag.
            if (sealed.length < this.tagLength) {
                // TODO(dchest): should we throw here instead?
                return null;
            }
            // Allocate space for counter, and set nonce as last bytes of it.
            var counter = new Uint8Array(16);
            counter.set(nonce, counter.length - nonce.length);
            // Generate authentication key by taking first 32-bytes of stream.
            var authKey = new Uint8Array(32);
            chacha_1.stream(this._key, counter, authKey, 4);
            // Authenticate.
            // XXX: can simplify and avoid allocation: since authenticate()
            // already allocates tag (from Poly1305.digest(), it can return)
            // it instead of copying to calculatedTag. But then in seal()
            // we'll need to copy it.
            var calculatedTag = new Uint8Array(this.tagLength);
            this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
            // Constant-time compare tags and return null if they differ.
            if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {
                return null;
            }
            // Allocate space for decrypted plaintext.
            var resultLength = sealed.length - this.tagLength;
            var result;
            if (dst) {
                if (dst.length !== resultLength) {
                    throw new Error("ChaCha20Poly1305: incorrect destination length");
                }
                result = dst;
            } else {
                result = new Uint8Array(resultLength);
            }
            // Decrypt.
            chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
            // Cleanup.
            wipe_1.wipe(counter);
            return result;
        };
        ChaCha20Poly1305.prototype.clean = function () {
            wipe_1.wipe(this._key);
            return this;
        };
        ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {
            // Initialize Poly1305 with authKey.
            var h = new poly1305_1.Poly1305(authKey);
            // Authenticate padded associated data.
            if (associatedData) {
                h.update(associatedData);
                if (associatedData.length % 16 > 0) {
                    h.update(ZEROS.subarray(associatedData.length % 16));
                }
            }
            // Authenticate padded ciphertext.
            h.update(ciphertext);
            if (ciphertext.length % 16 > 0) {
                h.update(ZEROS.subarray(ciphertext.length % 16));
            }
            // Authenticate length of associated data.
            // XXX: can avoid allocation here?
            var length = new Uint8Array(8);
            if (associatedData) {
                binary_1.writeUint64LE(associatedData.length, length);
            }
            h.update(length);
            // Authenticate length of ciphertext.
            binary_1.writeUint64LE(ciphertext.length, length);
            h.update(length);
            // Get tag and copy it into tagOut.
            var tag = h.digest();
            for (var i = 0; i < tag.length; i++) {
                tagOut[i] = tag[i];
            }
            // Cleanup.
            h.clean();
            wipe_1.wipe(tag);
            wipe_1.wipe(length);
        };
        return ChaCha20Poly1305;
    })();
    exports.ChaCha20Poly1305 = ChaCha20Poly1305;
})(chacha20poly1305);

var hkdf = {};

var hmac$2 = {};

var hash$3 = {};

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(hash$3, "__esModule", { value: true });
function isSerializableHash(h) {
    return typeof h.saveState !== "undefined" && typeof h.restoreState !== "undefined" && typeof h.cleanSavedState !== "undefined";
}
hash$3.isSerializableHash = isSerializableHash;

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(hmac$2, "__esModule", { value: true });
/**
 * Package hmac implements HMAC algorithm.
 */
var hash_1 = hash$3;
var constant_time_1 = constantTime;
var wipe_1$2 = wipe$1;
/**
 *  HMAC implements hash-based message authentication algorithm.
 */
var HMAC = /** @class */ (function () {
    /**
     * Constructs a new HMAC with the given Hash and secret key.
     */
    function HMAC(hash, key) {
        this._finished = false; // true if HMAC was finalized
        // Initialize inner and outer hashes.
        this._inner = new hash();
        this._outer = new hash();
        // Set block and digest sizes for this HMAC
        // instance to values from the hash.
        this.blockSize = this._outer.blockSize;
        this.digestLength = this._outer.digestLength;
        // Pad temporary stores a key (or its hash) padded with zeroes.
        var pad = new Uint8Array(this.blockSize);
        if (key.length > this.blockSize) {
            // If key is bigger than hash block size, it must be
            // hashed and this hash is used as a key instead.
            this._inner.update(key).finish(pad).clean();
        } else {
            // Otherwise, copy the key into pad.
            pad.set(key);
        }
        // Now two different keys are derived from padded key
        // by xoring a different byte value to each.
        // To make inner hash key, xor byte 0x36 into pad.
        for (var i = 0; i < pad.length; i++) {
            pad[i] ^= 0x36;
        }
        // Update inner hash with the result.
        this._inner.update(pad);
        // To make outer hash key, xor byte 0x5c into pad.
        // But since we already xored 0x36 there, we must
        // first undo this by xoring it again.
        for (var i = 0; i < pad.length; i++) {
            pad[i] ^= 0x36 ^ 0x5c;
        }
        // Update outer hash with the result.
        this._outer.update(pad);
        // Save states of both hashes, so that we can quickly restore
        // them later in reset() without the need to remember the actual
        // key and perform this initialization again.
        if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {
            this._innerKeyedState = this._inner.saveState();
            this._outerKeyedState = this._outer.saveState();
        }
        // Clean pad.
        wipe_1$2.wipe(pad);
    }
    /**
     * Returns HMAC state to the state initialized with key
     * to make it possible to run HMAC over the other data with the same
     * key without creating a new instance.
     */
    HMAC.prototype.reset = function () {
        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
            throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
        }
        // Restore keyed states of inner and outer hashes.
        this._inner.restoreState(this._innerKeyedState);
        this._outer.restoreState(this._outerKeyedState);
        this._finished = false;
        return this;
    };
    /**
     * Cleans HMAC state.
     */
    HMAC.prototype.clean = function () {
        if (hash_1.isSerializableHash(this._inner)) {
            this._inner.cleanSavedState(this._innerKeyedState);
        }
        if (hash_1.isSerializableHash(this._outer)) {
            this._outer.cleanSavedState(this._outerKeyedState);
        }
        this._inner.clean();
        this._outer.clean();
    };
    /**
     * Updates state with provided data.
     */
    HMAC.prototype.update = function (data) {
        this._inner.update(data);
        return this;
    };
    /**
     * Finalizes HMAC and puts the result in out.
     */
    HMAC.prototype.finish = function (out) {
        if (this._finished) {
            // If HMAC was finalized, outer hash is also finalized,
            // so it produces the same digest it produced when it
            // was finalized.
            this._outer.finish(out);
            return this;
        }
        // Finalize inner hash and store the result temporarily.
        this._inner.finish(out);
        // Update outer hash with digest of inner hash and and finalize it.
        this._outer.update(out.subarray(0, this.digestLength)).finish(out);
        this._finished = true;
        return this;
    };
    /**
     * Returns the computed message authentication code.
     */
    HMAC.prototype.digest = function () {
        var out = new Uint8Array(this.digestLength);
        this.finish(out);
        return out;
    };
    /**
     * Saves HMAC state.
     * This function is needed for PBKDF2 optimization.
     */
    HMAC.prototype.saveState = function () {
        if (!hash_1.isSerializableHash(this._inner)) {
            throw new Error("hmac: can't saveState() because hash doesn't implement it");
        }
        return this._inner.saveState();
    };
    HMAC.prototype.restoreState = function (savedState) {
        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
            throw new Error("hmac: can't restoreState() because hash doesn't implement it");
        }
        this._inner.restoreState(savedState);
        this._outer.restoreState(this._outerKeyedState);
        this._finished = false;
        return this;
    };
    HMAC.prototype.cleanSavedState = function (savedState) {
        if (!hash_1.isSerializableHash(this._inner)) {
            throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
        }
        this._inner.cleanSavedState(savedState);
    };
    return HMAC;
})();
hmac$2.HMAC = HMAC;
/**
 * Returns HMAC using the given hash constructor for the key over data.
 */
function hmac$1(hash, key, data) {
    var h = new HMAC(hash, key);
    h.update(data);
    var digest = h.digest();
    h.clean();
    return digest;
}
hmac$2.hmac = hmac$1;
/**
 * Returns true if two HMAC digests are equal.
 * Uses constant-time comparison to avoid leaking timing information.
 *
 * Example:
 *
 *    const receivedDigest = ...
 *    const realDigest = hmac(SHA256, key, data);
 *    if (!equal(receivedDigest, realDigest)) {
 *        throw new Error("Authentication error");
 *    }
 */
hmac$2.equal = constant_time_1.equal;

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(hkdf, "__esModule", { value: true });
var hmac_1 = hmac$2;
var wipe_1$1 = wipe$1;
/**
 * HMAC-based Extract-and-Expand Key Derivation Function.
 *
 * Implements HKDF from RFC5869.
 *
 * Expands the given master key with salt and info into
 * a limited stream of key material.
 */
var HKDF = /** @class */ (function () {
    /**
     * Create a new HKDF instance for the given hash function
     * with the master key, optional salt, and info.
     *
     * - Master key is a high-entropy secret key (not a password).
     * - Salt is a non-secret random value.
     * - Info is application- and/or context-specific information.
     */
    function HKDF(hash, key, salt, info) {
        if (salt === void 0) {
            salt = new Uint8Array(0);
        }
        this._counter = new Uint8Array(1); // starts with zero
        this._hash = hash;
        this._info = info;
        // HKDF-Extract uses salt as HMAC key, and key as data.
        var okm = hmac_1.hmac(this._hash, salt, key);
        // Initialize HMAC for expanding with extracted key.
        this._hmac = new hmac_1.HMAC(hash, okm);
        // Allocate buffer.
        this._buffer = new Uint8Array(this._hmac.digestLength);
        this._bufpos = this._buffer.length;
    }
    // Fill buffer with new block of HKDF-Extract output.
    HKDF.prototype._fillBuffer = function () {
        // Increment counter.
        this._counter[0]++;
        var ctr = this._counter[0];
        // Check if counter overflowed.
        if (ctr === 0) {
            throw new Error("hkdf: cannot expand more");
        }
        // Prepare HMAC instance for new data with old key.
        this._hmac.reset();
        // Hash in previous output if it was generated
        // (i.e. counter is greater than 1).
        if (ctr > 1) {
            this._hmac.update(this._buffer);
        }
        // Hash in info if it exists.
        if (this._info) {
            this._hmac.update(this._info);
        }
        // Hash in the counter.
        this._hmac.update(this._counter);
        // Output result to buffer and clean HMAC instance.
        this._hmac.finish(this._buffer);
        // Reset buffer position.
        this._bufpos = 0;
    };
    /**
     * Expand returns next key material of the given length.
     *
     * It throws if expansion limit is reached (which is
     * 254 digests of the underlying HMAC function).
     */
    HKDF.prototype.expand = function (length) {
        var out = new Uint8Array(length);
        for (var i = 0; i < out.length; i++) {
            if (this._bufpos === this._buffer.length) {
                this._fillBuffer();
            }
            out[i] = this._buffer[this._bufpos++];
        }
        return out;
    };
    HKDF.prototype.clean = function () {
        this._hmac.clean();
        wipe_1$1.wipe(this._buffer);
        wipe_1$1.wipe(this._counter);
        this._bufpos = 0;
    };
    return HKDF;
})();
var HKDF_1 = (hkdf.HKDF = HKDF);

var random = {};

var system = {};

var browser$2 = {};

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(browser$2, "__esModule", { value: true });
browser$2.BrowserRandomSource = void 0;
const QUOTA = 65536;
class BrowserRandomSource {
    constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        const browserCrypto =
            typeof self !== "undefined"
                ? self.crypto || self.msCrypto // IE11 has msCrypto
                : null;
        if (browserCrypto && browserCrypto.getRandomValues !== undefined) {
            this._crypto = browserCrypto;
            this.isAvailable = true;
            this.isInstantiated = true;
        }
    }
    randomBytes(length) {
        if (!this.isAvailable || !this._crypto) {
            throw new Error("Browser random byte generator is not available.");
        }
        const out = new Uint8Array(length);
        for (let i = 0; i < out.length; i += QUOTA) {
            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
        }
        return out;
    }
}
browser$2.BrowserRandomSource = BrowserRandomSource;

function commonjsRequire(path) {
    throw new Error(
        'Could not dynamically require "' +
            path +
            '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.'
    );
}

var node = {};

var _nodeResolve_empty = {};

var _nodeResolve_empty$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty,
});

var require$$0$1 = /*@__PURE__*/ getAugmentedNamespace(_nodeResolve_empty$1);

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(node, "__esModule", { value: true });
node.NodeRandomSource = void 0;
const wipe_1 = wipe$1;
class NodeRandomSource {
    constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        if (typeof commonjsRequire !== "undefined") {
            const nodeCrypto = require$$0$1;
            if (nodeCrypto && nodeCrypto.randomBytes) {
                this._crypto = nodeCrypto;
                this.isAvailable = true;
                this.isInstantiated = true;
            }
        }
    }
    randomBytes(length) {
        if (!this.isAvailable || !this._crypto) {
            throw new Error("Node.js random byte generator is not available.");
        }
        // Get random bytes (result is Buffer).
        let buffer = this._crypto.randomBytes(length);
        // Make sure we got the length that we requested.
        if (buffer.length !== length) {
            throw new Error("NodeRandomSource: got fewer bytes than requested");
        }
        // Allocate output array.
        const out = new Uint8Array(length);
        // Copy bytes from buffer to output.
        for (let i = 0; i < out.length; i++) {
            out[i] = buffer[i];
        }
        // Cleanup.
        (0, wipe_1.wipe)(buffer);
        return out;
    }
}
node.NodeRandomSource = NodeRandomSource;

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(system, "__esModule", { value: true });
system.SystemRandomSource = void 0;
const browser_1 = browser$2;
const node_1 = node;
class SystemRandomSource {
    constructor() {
        this.isAvailable = false;
        this.name = "";
        // Try browser.
        this._source = new browser_1.BrowserRandomSource();
        if (this._source.isAvailable) {
            this.isAvailable = true;
            this.name = "Browser";
            return;
        }
        // If no browser source, try Node.
        this._source = new node_1.NodeRandomSource();
        if (this._source.isAvailable) {
            this.isAvailable = true;
            this.name = "Node";
            return;
        }
        // No sources, we're out of options.
    }
    randomBytes(length) {
        if (!this.isAvailable) {
            throw new Error("System random byte generator is not available.");
        }
        return this._source.randomBytes(length);
    }
}
system.SystemRandomSource = SystemRandomSource;

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;
    const system_1 = system;
    const binary_1 = binary;
    const wipe_1 = wipe$1;
    exports.defaultRandomSource = new system_1.SystemRandomSource();
    function randomBytes(length, prng = exports.defaultRandomSource) {
        return prng.randomBytes(length);
    }
    exports.randomBytes = randomBytes;
    /**
     * Returns a uniformly random unsigned 32-bit integer.
     */
    function randomUint32(prng = exports.defaultRandomSource) {
        // Generate 4-byte random buffer.
        const buf = randomBytes(4, prng);
        // Convert bytes from buffer into a 32-bit integer.
        // It's not important which byte order to use, since
        // the result is random.
        const result = (0, binary_1.readUint32LE)(buf);
        // Clean the buffer.
        (0, wipe_1.wipe)(buf);
        return result;
    }
    exports.randomUint32 = randomUint32;
    /** 62 alphanumeric characters for default charset of randomString() */
    const ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    /**
     * Returns a uniform random string of the given length
     * with characters from the given charset.
     *
     * Charset must not have more than 256 characters.
     *
     * Default charset generates case-sensitive alphanumeric
     * strings (0-9, A-Z, a-z).
     */
    function randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
        if (charset.length < 2) {
            throw new Error("randomString charset is too short");
        }
        if (charset.length > 256) {
            throw new Error("randomString charset is too long");
        }
        let out = "";
        const charsLen = charset.length;
        const maxByte = 256 - (256 % charsLen);
        while (length > 0) {
            const buf = randomBytes(Math.ceil((length * 256) / maxByte), prng);
            for (let i = 0; i < buf.length && length > 0; i++) {
                const randomByte = buf[i];
                if (randomByte < maxByte) {
                    out += charset.charAt(randomByte % charsLen);
                    length--;
                }
            }
            (0, wipe_1.wipe)(buf);
        }
        return out;
    }
    exports.randomString = randomString;
    /**
     * Returns uniform random string containing at least the given
     * number of bits of entropy.
     *
     * For example, randomStringForEntropy(128) will return a 22-character
     * alphanumeric string, while randomStringForEntropy(128, "0123456789")
     * will return a 39-character numeric string, both will contain at
     * least 128 bits of entropy.
     *
     * Default charset generates case-sensitive alphanumeric
     * strings (0-9, A-Z, a-z).
     */
    function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
        const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
        return randomString(length, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;
})(random);

var sha256 = {};

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = binary;
    var wipe_1 = wipe$1;
    exports.DIGEST_LENGTH = 32;
    exports.BLOCK_SIZE = 64;
    /**
     * SHA2-256 cryptographic hash algorithm.
     */
    var SHA256 = /** @class */ (function () {
        function SHA256() {
            /** Length of hash output */
            this.digestLength = exports.DIGEST_LENGTH;
            /** Block size */
            this.blockSize = exports.BLOCK_SIZE;
            // Note: Int32Array is used instead of Uint32Array for performance reasons.
            this._state = new Int32Array(8); // hash state
            this._temp = new Int32Array(64); // temporary state
            this._buffer = new Uint8Array(128); // buffer for data to hash
            this._bufferLength = 0; // number of bytes in buffer
            this._bytesHashed = 0; // number of total bytes hashed
            this._finished = false; // indicates whether the hash was finalized
            this.reset();
        }
        SHA256.prototype._initState = function () {
            this._state[0] = 0x6a09e667;
            this._state[1] = 0xbb67ae85;
            this._state[2] = 0x3c6ef372;
            this._state[3] = 0xa54ff53a;
            this._state[4] = 0x510e527f;
            this._state[5] = 0x9b05688c;
            this._state[6] = 0x1f83d9ab;
            this._state[7] = 0x5be0cd19;
        };
        /**
         * Resets hash state making it possible
         * to re-use this instance to hash other data.
         */
        SHA256.prototype.reset = function () {
            this._initState();
            this._bufferLength = 0;
            this._bytesHashed = 0;
            this._finished = false;
            return this;
        };
        /**
         * Cleans internal buffers and resets hash state.
         */
        SHA256.prototype.clean = function () {
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._temp);
            this.reset();
        };
        /**
         * Updates hash state with the given data.
         *
         * Throws error when trying to update already finalized hash:
         * instance must be reset to update it again.
         */
        SHA256.prototype.update = function (data, dataLength) {
            if (dataLength === void 0) {
                dataLength = data.length;
            }
            if (this._finished) {
                throw new Error("SHA256: can't update because hash was finished.");
            }
            var dataPos = 0;
            this._bytesHashed += dataLength;
            if (this._bufferLength > 0) {
                while (this._bufferLength < this.blockSize && dataLength > 0) {
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                if (this._bufferLength === this.blockSize) {
                    hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
                    this._bufferLength = 0;
                }
            }
            if (dataLength >= this.blockSize) {
                dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
                dataLength %= this.blockSize;
            }
            while (dataLength > 0) {
                this._buffer[this._bufferLength++] = data[dataPos++];
                dataLength--;
            }
            return this;
        };
        /**
         * Finalizes hash state and puts hash into out.
         * If hash was already finalized, puts the same value.
         */
        SHA256.prototype.finish = function (out) {
            if (!this._finished) {
                var bytesHashed = this._bytesHashed;
                var left = this._bufferLength;
                var bitLenHi = (bytesHashed / 0x20000000) | 0;
                var bitLenLo = bytesHashed << 3;
                var padLength = bytesHashed % 64 < 56 ? 64 : 128;
                this._buffer[left] = 0x80;
                for (var i = left + 1; i < padLength - 8; i++) {
                    this._buffer[i] = 0;
                }
                binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
                this._finished = true;
            }
            for (var i = 0; i < this.digestLength / 4; i++) {
                binary_1.writeUint32BE(this._state[i], out, i * 4);
            }
            return this;
        };
        /**
         * Returns the final hash digest.
         */
        SHA256.prototype.digest = function () {
            var out = new Uint8Array(this.digestLength);
            this.finish(out);
            return out;
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization.
         * Returns hash state to be used with restoreState().
         * Only chain value is saved, not buffers or other
         * state variables.
         */
        SHA256.prototype.saveState = function () {
            if (this._finished) {
                throw new Error("SHA256: cannot save finished state");
            }
            return {
                state: new Int32Array(this._state),
                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
                bufferLength: this._bufferLength,
                bytesHashed: this._bytesHashed,
            };
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization.
         * Restores state saved by saveState() and sets bytesHashed
         * to the given value.
         */
        SHA256.prototype.restoreState = function (savedState) {
            this._state.set(savedState.state);
            this._bufferLength = savedState.bufferLength;
            if (savedState.buffer) {
                this._buffer.set(savedState.buffer);
            }
            this._bytesHashed = savedState.bytesHashed;
            this._finished = false;
            return this;
        };
        /**
         * Cleans state returned by saveState().
         */
        SHA256.prototype.cleanSavedState = function (savedState) {
            wipe_1.wipe(savedState.state);
            if (savedState.buffer) {
                wipe_1.wipe(savedState.buffer);
            }
            savedState.bufferLength = 0;
            savedState.bytesHashed = 0;
        };
        return SHA256;
    })();
    exports.SHA256 = SHA256;
    // Constants
    var K = new Int32Array([
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
    ]);
    function hashBlocks(w, v, p, pos, len) {
        while (len >= 64) {
            var a = v[0];
            var b = v[1];
            var c = v[2];
            var d = v[3];
            var e = v[4];
            var f = v[5];
            var g = v[6];
            var h = v[7];
            for (var i = 0; i < 16; i++) {
                var j = pos + i * 4;
                w[i] = binary_1.readUint32BE(p, j);
            }
            for (var i = 16; i < 64; i++) {
                var u = w[i - 2];
                var t1 = ((u >>> 17) | (u << (32 - 17))) ^ ((u >>> 19) | (u << (32 - 19))) ^ (u >>> 10);
                u = w[i - 15];
                var t2 = ((u >>> 7) | (u << (32 - 7))) ^ ((u >>> 18) | (u << (32 - 18))) ^ (u >>> 3);
                w[i] = ((t1 + w[i - 7]) | 0) + ((t2 + w[i - 16]) | 0);
            }
            for (var i = 0; i < 64; i++) {
                var t1 =
                    ((((((e >>> 6) | (e << (32 - 6))) ^ ((e >>> 11) | (e << (32 - 11))) ^ ((e >>> 25) | (e << (32 - 25)))) + ((e & f) ^ (~e & g))) | 0) +
                        ((h + ((K[i] + w[i]) | 0)) | 0)) |
                    0;
                var t2 =
                    ((((a >>> 2) | (a << (32 - 2))) ^ ((a >>> 13) | (a << (32 - 13))) ^ ((a >>> 22) | (a << (32 - 22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
                h = g;
                g = f;
                f = e;
                e = (d + t1) | 0;
                d = c;
                c = b;
                b = a;
                a = (t1 + t2) | 0;
            }
            v[0] += a;
            v[1] += b;
            v[2] += c;
            v[3] += d;
            v[4] += e;
            v[5] += f;
            v[6] += g;
            v[7] += h;
            pos += 64;
            len -= 64;
        }
        return pos;
    }
    function hash(data) {
        var h = new SHA256();
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    exports.hash = hash;
})(sha256);

var x25519 = {};

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sharedKey =
        exports.generateKeyPair =
        exports.generateKeyPairFromSeed =
        exports.scalarMultBase =
        exports.scalarMult =
        exports.SHARED_KEY_LENGTH =
        exports.SECRET_KEY_LENGTH =
        exports.PUBLIC_KEY_LENGTH =
            void 0;
    /**
     * Package x25519 implements X25519 key agreement.
     */
    const random_1 = random;
    const wipe_1 = wipe$1;
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 32;
    exports.SHARED_KEY_LENGTH = 32;
    // Returns new zero-filled 16-element GF (Float64Array).
    // If passed an array of numbers, prefills the returned
    // array with them.
    //
    // We use Float64Array, because we need 48-bit numbers
    // for this implementation.
    function gf(init) {
        const r = new Float64Array(16);
        if (init) {
            for (let i = 0; i < init.length; i++) {
                r[i] = init[i];
            }
        }
        return r;
    }
    // Base point.
    const _9 = new Uint8Array(32);
    _9[0] = 9;
    const _121665 = gf([0xdb41, 1]);
    function car25519(o) {
        let c = 1;
        for (let i = 0; i < 16; i++) {
            let v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        const c = ~(b - 1);
        for (let i = 0; i < 16; i++) {
            const t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        const m = gf();
        const t = gf();
        for (let i = 0; i < 16; i++) {
            t[i] = n[i];
        }
        car25519(t);
        car25519(t);
        car25519(t);
        for (let j = 0; j < 2; j++) {
            m[0] = t[0] - 0xffed;
            for (let i = 1; i < 15; i++) {
                m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                m[i - 1] &= 0xffff;
            }
            m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
            const b = (m[15] >> 16) & 1;
            m[14] &= 0xffff;
            sel25519(t, m, 1 - b);
        }
        for (let i = 0; i < 16; i++) {
            o[2 * i] = t[i] & 0xff;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function unpack25519(o, n) {
        for (let i = 0; i < 16; i++) {
            o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        }
        o[15] &= 0x7fff;
    }
    function add(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] + b[i];
        }
    }
    function sub(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] - b[i];
        }
    }
    function mul(o, a, b) {
        let v,
            c,
            t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0,
            t5 = 0,
            t6 = 0,
            t7 = 0,
            t8 = 0,
            t9 = 0,
            t10 = 0,
            t11 = 0,
            t12 = 0,
            t13 = 0,
            t14 = 0,
            t15 = 0,
            t16 = 0,
            t17 = 0,
            t18 = 0,
            t19 = 0,
            t20 = 0,
            t21 = 0,
            t22 = 0,
            t23 = 0,
            t24 = 0,
            t25 = 0,
            t26 = 0,
            t27 = 0,
            t28 = 0,
            t29 = 0,
            t30 = 0,
            b0 = b[0],
            b1 = b[1],
            b2 = b[2],
            b3 = b[3],
            b4 = b[4],
            b5 = b[5],
            b6 = b[6],
            b7 = b[7],
            b8 = b[8],
            b9 = b[9],
            b10 = b[10],
            b11 = b[11],
            b12 = b[12],
            b13 = b[13],
            b14 = b[14],
            b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function square(o, a) {
        mul(o, a, a);
    }
    function inv25519(o, inp) {
        const c = gf();
        for (let i = 0; i < 16; i++) {
            c[i] = inp[i];
        }
        for (let i = 253; i >= 0; i--) {
            square(c, c);
            if (i !== 2 && i !== 4) {
                mul(c, c, inp);
            }
        }
        for (let i = 0; i < 16; i++) {
            o[i] = c[i];
        }
    }
    function scalarMult(n, p) {
        const z = new Uint8Array(32);
        const x = new Float64Array(80);
        const a = gf(),
            b = gf(),
            c = gf(),
            d = gf(),
            e = gf(),
            f = gf();
        for (let i = 0; i < 31; i++) {
            z[i] = n[i];
        }
        z[31] = (n[31] & 127) | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for (let i = 0; i < 16; i++) {
            b[i] = x[i];
        }
        a[0] = d[0] = 1;
        for (let i = 254; i >= 0; --i) {
            const r = (z[i >>> 3] >>> (i & 7)) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            add(e, a, c);
            sub(a, a, c);
            add(c, b, d);
            sub(b, b, d);
            square(d, e);
            square(f, a);
            mul(a, c, a);
            mul(c, b, e);
            add(e, a, c);
            sub(a, a, c);
            square(b, a);
            sub(c, d, f);
            mul(a, c, _121665);
            add(a, a, d);
            mul(c, c, a);
            mul(a, d, f);
            mul(d, b, x);
            square(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
        }
        for (let i = 0; i < 16; i++) {
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
        }
        const x32 = x.subarray(32);
        const x16 = x.subarray(16);
        inv25519(x32, x32);
        mul(x16, x16, x32);
        const q = new Uint8Array(32);
        pack25519(q, x16);
        return q;
    }
    exports.scalarMult = scalarMult;
    function scalarMultBase(n) {
        return scalarMult(n, _9);
    }
    exports.scalarMultBase = scalarMultBase;
    function generateKeyPairFromSeed(seed) {
        if (seed.length !== exports.SECRET_KEY_LENGTH) {
            throw new Error(`x25519: seed must be ${exports.SECRET_KEY_LENGTH} bytes`);
        }
        const secretKey = new Uint8Array(seed);
        const publicKey = scalarMultBase(secretKey);
        return {
            publicKey,
            secretKey,
        };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
    function generateKeyPair(prng) {
        const seed = (0, random_1.randomBytes)(32, prng);
        const result = generateKeyPairFromSeed(seed);
        (0, wipe_1.wipe)(seed);
        return result;
    }
    exports.generateKeyPair = generateKeyPair;
    /**
     * Returns a shared key between our secret key and a peer's public key.
     *
     * Throws an error if the given keys are of wrong length.
     *
     * If rejectZero is true throws if the calculated shared key is all-zero.
     * From RFC 7748:
     *
     * > Protocol designers using Diffie-Hellman over the curves defined in
     * > this document must not assume "contributory behavior".  Specially,
     * > contributory behavior means that both parties' private keys
     * > contribute to the resulting shared key.  Since curve25519 and
     * > curve448 have cofactors of 8 and 4 (respectively), an input point of
     * > small order will eliminate any contribution from the other party's
     * > private key.  This situation can be detected by checking for the all-
     * > zero output, which implementations MAY do, as specified in Section 6.
     * > However, a large number of existing implementations do not do this.
     *
     * IMPORTANT: the returned key is a raw result of scalar multiplication.
     * To use it as a key material, hash it with a cryptographic hash function.
     */
    function sharedKey(mySecretKey, theirPublicKey, rejectZero = false) {
        if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {
            throw new Error("X25519: incorrect secret key length");
        }
        if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {
            throw new Error("X25519: incorrect public key length");
        }
        const result = scalarMult(mySecretKey, theirPublicKey);
        if (rejectZero) {
            let zeros = 0;
            for (let i = 0; i < result.length; i++) {
                zeros |= result[i];
            }
            if (zeros === 0) {
                throw new Error("X25519: invalid shared key");
            }
        }
        return result;
    }
    exports.sharedKey = sharedKey;
})(x25519);

function allocUnsafe(size = 0) {
    if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
        return globalThis.Buffer.allocUnsafe(size);
    }
    return new Uint8Array(size);
}

function concat(arrays, length) {
    if (!length) {
        length = arrays.reduce((acc, curr) => acc + curr.length, 0);
    }
    const output = allocUnsafe(length);
    let offset = 0;
    for (const arr of arrays) {
        output.set(arr, offset);
        offset += arr.length;
    }
    return output;
}

function base$1(ALPHABET, name) {
    if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode(source) {
        if (source instanceof Uint8Array);
        else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
            return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
        }
        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
            var carry = source[pbegin];
            var i = 0;
            for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
                carry += (256 * b58[it1]) >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = (carry / BASE) >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i;
            pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
            it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
        }
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") {
            throw new TypeError("Expected String");
        }
        if (source.length === 0) {
            return new Uint8Array();
        }
        var psz = 0;
        if (source[psz] === " ") {
            return;
        }
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
            zeroes++;
            psz++;
        }
        var size = ((source.length - psz) * FACTOR + 1) >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
                return;
            }
            var i = 0;
            for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
                carry += (BASE * b256[it3]) >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = (carry / 256) >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i;
            psz++;
        }
        if (source[psz] === " ") {
            return;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
            it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j = zeroes;
        while (it4 !== size) {
            vch[j++] = b256[it4++];
        }
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
            return buffer;
        }
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode,
    };
}
var src = base$1;
var _brrp__multiformats_scope_baseX = src;

const coerce = (o) => {
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) {
        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    }
    throw new Error("Unknown type, must be binary type");
};
const fromString$1 = (str) => new TextEncoder().encode(str);
const toString$1 = (b) => new TextDecoder().decode(b);

class Encoder {
    constructor(name, prefix, baseEncode) {
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes) {
        if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
        } else {
            throw Error("Unknown type, must be binary type");
        }
    }
}
class Decoder {
    constructor(name, prefix, baseDecode) {
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === undefined) {
            throw new Error("Invalid prefix character");
        }
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
                throw Error(
                    `Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`
                );
            }
            return this.baseDecode(text.slice(this.prefix.length));
        } else {
            throw Error("Can only multibase decode strings");
        }
    }
    or(decoder) {
        return or$2(this, decoder);
    }
}
class ComposedDecoder {
    constructor(decoders) {
        this.decoders = decoders;
    }
    or(decoder) {
        return or$2(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) {
            return decoder.decode(input);
        } else {
            throw RangeError(
                `Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`
            );
        }
    }
}
const or$2 = (left, right) =>
    new ComposedDecoder({
        ...(left.decoders || { [left.prefix]: left }),
        ...(right.decoders || { [right.prefix]: right }),
    });
class Codec {
    constructor(name, prefix, baseEncode, baseDecode) {
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name, prefix, baseEncode);
        this.decoder = new Decoder(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const from = ({ name, prefix, encode, decode }) => new Codec(name, prefix, encode, decode);
const baseX = ({ prefix, name, alphabet }) => {
    const { encode, decode } = _brrp__multiformats_scope_baseX(alphabet, name);
    return from({
        prefix,
        name,
        encode,
        decode: (text) => coerce(decode(text)),
    });
};
const decode$1 = (string, alphabet, bitsPerChar, name) => {
    const codes = {};
    for (let i = 0; i < alphabet.length; ++i) {
        codes[alphabet[i]] = i;
    }
    let end = string.length;
    while (string[end - 1] === "=") {
        --end;
    }
    const out = new Uint8Array(((end * bitsPerChar) / 8) | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for (let i = 0; i < end; ++i) {
        const value = codes[string[i]];
        if (value === undefined) {
            throw new SyntaxError(`Non-${name} character`);
        }
        buffer = (buffer << bitsPerChar) | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & (buffer >> bits);
        }
    }
    if (bits >= bitsPerChar || 255 & (buffer << (8 - bits))) {
        throw new SyntaxError("Unexpected end of data");
    }
    return out;
};
const encode$1 = (data, alphabet, bitsPerChar) => {
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for (let i = 0; i < data.length; ++i) {
        buffer = (buffer << 8) | data[i];
        bits += 8;
        while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet[mask & (buffer >> bits)];
        }
    }
    if (bits) {
        out += alphabet[mask & (buffer << (bitsPerChar - bits))];
    }
    if (pad) {
        while ((out.length * bitsPerChar) & 7) {
            out += "=";
        }
    }
    return out;
};
const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {
    return from({
        prefix,
        name,
        encode(input) {
            return encode$1(input, alphabet, bitsPerChar);
        },
        decode(input) {
            return decode$1(input, alphabet, bitsPerChar, name);
        },
    });
};

const identity = from({
    prefix: "\0",
    name: "identity",
    encode: (buf) => toString$1(buf),
    decode: (str) => fromString$1(str),
});

var identityBase = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    identity: identity,
});

const base2 = rfc4648({
    prefix: "0",
    name: "base2",
    alphabet: "01",
    bitsPerChar: 1,
});

var base2$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base2: base2,
});

const base8 = rfc4648({
    prefix: "7",
    name: "base8",
    alphabet: "01234567",
    bitsPerChar: 3,
});

var base8$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base8: base8,
});

const base10 = baseX({
    prefix: "9",
    name: "base10",
    alphabet: "0123456789",
});

var base10$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base10: base10,
});

const base16 = rfc4648({
    prefix: "f",
    name: "base16",
    alphabet: "0123456789abcdef",
    bitsPerChar: 4,
});
const base16upper = rfc4648({
    prefix: "F",
    name: "base16upper",
    alphabet: "0123456789ABCDEF",
    bitsPerChar: 4,
});

var base16$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base16: base16,
    base16upper: base16upper,
});

const base32 = rfc4648({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5,
});
const base32upper = rfc4648({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5,
});
const base32pad = rfc4648({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5,
});
const base32padupper = rfc4648({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5,
});
const base32hex = rfc4648({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5,
});
const base32hexupper = rfc4648({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5,
});
const base32hexpad = rfc4648({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5,
});
const base32hexpadupper = rfc4648({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5,
});
const base32z = rfc4648({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5,
});

var base32$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base32: base32,
    base32hex: base32hex,
    base32hexpad: base32hexpad,
    base32hexpadupper: base32hexpadupper,
    base32hexupper: base32hexupper,
    base32pad: base32pad,
    base32padupper: base32padupper,
    base32upper: base32upper,
    base32z: base32z,
});

const base36 = baseX({
    prefix: "k",
    name: "base36",
    alphabet: "0123456789abcdefghijklmnopqrstuvwxyz",
});
const base36upper = baseX({
    prefix: "K",
    name: "base36upper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
});

var base36$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base36: base36,
    base36upper: base36upper,
});

const base58btc = baseX({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
});
const base58flickr = baseX({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",
});

var base58 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base58btc: base58btc,
    base58flickr: base58flickr,
});

const base64 = rfc4648({
    prefix: "m",
    name: "base64",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    bitsPerChar: 6,
});
const base64pad = rfc4648({
    prefix: "M",
    name: "base64pad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    bitsPerChar: 6,
});
const base64url = rfc4648({
    prefix: "u",
    name: "base64url",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    bitsPerChar: 6,
});
const base64urlpad = rfc4648({
    prefix: "U",
    name: "base64urlpad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
    bitsPerChar: 6,
});

var base64$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base64: base64,
    base64pad: base64pad,
    base64url: base64url,
    base64urlpad: base64urlpad,
});

const alphabet = Array.from(
    "\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42"
);
const alphabetBytesToChars = alphabet.reduce((p, c, i) => {
    p[i] = c;
    return p;
}, []);
const alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
    p[c.codePointAt(0)] = i;
    return p;
}, []);
function encode(data) {
    return data.reduce((p, c) => {
        p += alphabetBytesToChars[c];
        return p;
    }, "");
}
function decode(str) {
    const byts = [];
    for (const char of str) {
        const byt = alphabetCharsToBytes[char.codePointAt(0)];
        if (byt === undefined) {
            throw new Error(`Non-base256emoji character: ${char}`);
        }
        byts.push(byt);
    }
    return new Uint8Array(byts);
}
const base256emoji = from({
    prefix: "\uD83D\uDE80",
    name: "base256emoji",
    encode,
    decode,
});

var base256emoji$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    base256emoji: base256emoji,
});

new TextEncoder();
new TextDecoder();

const bases = {
    ...identityBase,
    ...base2$1,
    ...base8$1,
    ...base10$1,
    ...base16$1,
    ...base32$1,
    ...base36$1,
    ...base58,
    ...base64$1,
    ...base256emoji$1,
};

function createCodec(name, prefix, encode, decode) {
    return {
        name,
        prefix,
        encoder: {
            name,
            prefix,
            encode,
        },
        decoder: { decode },
    };
}
const string = createCodec(
    "utf8",
    "u",
    (buf) => {
        const decoder = new TextDecoder("utf8");
        return "u" + decoder.decode(buf);
    },
    (str) => {
        const encoder = new TextEncoder();
        return encoder.encode(str.substring(1));
    }
);
const ascii = createCodec(
    "ascii",
    "a",
    (buf) => {
        let string = "a";
        for (let i = 0; i < buf.length; i++) {
            string += String.fromCharCode(buf[i]);
        }
        return string;
    },
    (str) => {
        str = str.substring(1);
        const buf = allocUnsafe(str.length);
        for (let i = 0; i < str.length; i++) {
            buf[i] = str.charCodeAt(i);
        }
        return buf;
    }
);
const BASES = {
    utf8: string,
    "utf-8": string,
    hex: bases.base16,
    latin1: ascii,
    ascii: ascii,
    binary: ascii,
    ...bases,
};

function fromString(string, encoding = "utf8") {
    const base = BASES[encoding];
    if (!base) {
        throw new Error(`Unsupported encoding "${encoding}"`);
    }
    if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
        return globalThis.Buffer.from(string, "utf8");
    }
    return base.decoder.decode(`${base.prefix}${string}`);
}

function toString(array, encoding = "utf8") {
    const base = BASES[encoding];
    if (!base) {
        throw new Error(`Unsupported encoding "${encoding}"`);
    }
    if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
    }
    return base.encoder.encode(array).substring(1);
}

var elliptic = {};

var name = "elliptic";
var version$1 = "6.5.7";
var description = "EC cryptography";
var main$1 = "lib/elliptic.js";
var files = ["lib"];
var scripts = {
    lint: "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    unit: "istanbul test _mocha --reporter=spec test/index.js",
    test: "npm run lint && npm run unit",
    version: "grunt dist && git add dist/",
};
var repository = {
    type: "git",
    url: "git@github.com:indutny/elliptic",
};
var keywords = ["EC", "Elliptic", "curve", "Cryptography"];
var author = "Fedor Indutny <fedor@indutny.com>";
var license = "MIT";
var bugs = {
    url: "https://github.com/indutny/elliptic/issues",
};
var homepage = "https://github.com/indutny/elliptic";
var devDependencies = {
    brfs: "^2.0.2",
    coveralls: "^3.1.0",
    eslint: "^7.6.0",
    grunt: "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    istanbul: "^0.4.5",
    mocha: "^8.0.1",
};
var dependencies = {
    "bn.js": "^4.11.9",
    brorand: "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    inherits: "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1",
};
var require$$0 = {
    name: name,
    version: version$1,
    description: description,
    main: main$1,
    files: files,
    scripts: scripts,
    repository: repository,
    keywords: keywords,
    author: author,
    license: license,
    bugs: bugs,
    homepage: homepage,
    devDependencies: devDependencies,
    dependencies: dependencies,
};

var utils$o = {};

var bn$1 = { exports: {} };

bn$1.exports;

(function (module) {
    (function (module, exports) {
        // Utils
        function assert(val, msg) {
            if (!val) throw new Error(msg || "Assertion failed");
        }

        // Could use `inherits` module, but don't want to move from single file
        // architecture yet.
        function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
        }

        // BN

        function BN(number, base, endian) {
            if (BN.isBN(number)) {
                return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
                if (base === "le" || base === "be") {
                    endian = base;
                    base = 10;
                }

                this._init(number || 0, base || 10, endian || "be");
            }
        }
        if (typeof module === "object") {
            module.exports = BN;
        } else {
            exports.BN = BN;
        }

        BN.BN = BN;
        BN.wordSize = 26;

        var Buffer;
        try {
            if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
                Buffer = window.Buffer;
            } else {
                Buffer = require$$0$1.Buffer;
            }
        } catch (e) {}

        BN.isBN = function isBN(num) {
            if (num instanceof BN) {
                return true;
            }

            return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };

        BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
        };

        BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
        };

        BN.prototype._init = function init(number, base, endian) {
            if (typeof number === "number") {
                return this._initNumber(number, base, endian);
            }

            if (typeof number === "object") {
                return this._initArray(number, base, endian);
            }

            if (base === "hex") {
                base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, "");
            var start = 0;
            if (number[0] === "-") {
                start++;
                this.negative = 1;
            }

            if (start < number.length) {
                if (base === 16) {
                    this._parseHex(number, start, endian);
                } else {
                    this._parseBase(number, base, start);
                    if (endian === "le") {
                        this._initArray(this.toArray(), base, endian);
                    }
                }
            }
        };

        BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
                this.negative = 1;
                number = -number;
            }
            if (number < 0x4000000) {
                this.words = [number & 0x3ffffff];
                this.length = 1;
            } else if (number < 0x10000000000000) {
                this.words = [number & 0x3ffffff, (number / 0x4000000) & 0x3ffffff];
                this.length = 2;
            } else {
                assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                this.words = [number & 0x3ffffff, (number / 0x4000000) & 0x3ffffff, 1];
                this.length = 3;
            }

            if (endian !== "le") return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
        };

        BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === "number");
            if (number.length <= 0) {
                this.words = [0];
                this.length = 1;
                return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === "be") {
                for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                    w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                    off += 24;
                    if (off >= 26) {
                        off -= 26;
                        j++;
                    }
                }
            } else if (endian === "le") {
                for (i = 0, j = 0; i < number.length; i += 3) {
                    w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                    off += 24;
                    if (off >= 26) {
                        off -= 26;
                        j++;
                    }
                }
            }
            return this.strip();
        };

        function parseHex4Bits(string, index) {
            var c = string.charCodeAt(index);
            // 'A' - 'F'
            if (c >= 65 && c <= 70) {
                return c - 55;
                // 'a' - 'f'
            } else if (c >= 97 && c <= 102) {
                return c - 87;
                // '0' - '9'
            } else {
                return (c - 48) & 0xf;
            }
        }

        function parseHexByte(string, lowerBound, index) {
            var r = parseHex4Bits(string, index);
            if (index - 1 >= lowerBound) {
                r |= parseHex4Bits(string, index - 1) << 4;
            }
            return r;
        }

        BN.prototype._parseHex = function _parseHex(number, start, endian) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
            }

            // 24-bits chunks
            var off = 0;
            var j = 0;

            var w;
            if (endian === "be") {
                for (i = number.length - 1; i >= start; i -= 2) {
                    w = parseHexByte(number, start, i) << off;
                    this.words[j] |= w & 0x3ffffff;
                    if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                    } else {
                        off += 8;
                    }
                }
            } else {
                var parseLength = number.length - start;
                for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                    w = parseHexByte(number, start, i) << off;
                    this.words[j] |= w & 0x3ffffff;
                    if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                    } else {
                        off += 8;
                    }
                }
            }

            this.strip();
        };

        function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r *= mul;

                // 'a'
                if (c >= 49) {
                    r += c - 49 + 0xa;

                    // 'A'
                } else if (c >= 17) {
                    r += c - 17 + 0xa;

                    // '0' - '9'
                } else {
                    r += c;
                }
            }
            return r;
        }

        BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
                word = parseBase(number, i, i + limbLen, base);

                this.imuln(limbPow);
                if (this.words[0] + word < 0x4000000) {
                    this.words[0] += word;
                } else {
                    this._iaddn(word);
                }
            }

            if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);

                for (i = 0; i < mod; i++) {
                    pow *= base;
                }

                this.imuln(pow);
                if (this.words[0] + word < 0x4000000) {
                    this.words[0] += word;
                } else {
                    this._iaddn(word);
                }
            }

            this.strip();
        };

        BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
                dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
        };

        BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
        };

        BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
                this.words[this.length++] = 0;
            }
            return this;
        };

        // Remove leading `0` from `this`
        BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
                this.length--;
            }
            return this._normSign();
        };

        BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
            }
            return this;
        };

        BN.prototype.inspect = function inspect() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };

        /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

        var zeros = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000",
        ];

        var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];

        var groupBases = [
            0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000,
            28629151, 33554432, 39135393, 45435424, 52521875, 60466176,
        ];

        BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === "hex") {
                out = "";
                var off = 0;
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                    var w = this.words[i];
                    var word = (((w << off) | carry) & 0xffffff).toString(16);
                    carry = (w >>> (24 - off)) & 0xffffff;
                    if (carry !== 0 || i !== this.length - 1) {
                        out = zeros[6 - word.length] + word + out;
                    } else {
                        out = word + out;
                    }
                    off += 2;
                    if (off >= 26) {
                        off -= 26;
                        i--;
                    }
                }
                if (carry !== 0) {
                    out = carry.toString(16) + out;
                }
                while (out.length % padding !== 0) {
                    out = "0" + out;
                }
                if (this.negative !== 0) {
                    out = "-" + out;
                }
                return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
                // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                var groupSize = groupSizes[base];
                // var groupBase = Math.pow(base, groupSize);
                var groupBase = groupBases[base];
                out = "";
                var c = this.clone();
                c.negative = 0;
                while (!c.isZero()) {
                    var r = c.modn(groupBase).toString(base);
                    c = c.idivn(groupBase);

                    if (!c.isZero()) {
                        out = zeros[groupSize - r.length] + r + out;
                    } else {
                        out = r + out;
                    }
                }
                if (this.isZero()) {
                    out = "0" + out;
                }
                while (out.length % padding !== 0) {
                    out = "0" + out;
                }
                if (this.negative !== 0) {
                    out = "-" + out;
                }
                return out;
            }

            assert(false, "Base should be between 2 and 36");
        };

        BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
                ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
                // NOTE: at this stage it is known that the top bit is set
                ret += 0x10000000000000 + this.words[1] * 0x4000000;
            } else if (this.length > 2) {
                assert(false, "Number can only safely store up to 53 bits");
            }
            return this.negative !== 0 ? -ret : ret;
        };

        BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
        };

        BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer !== "undefined");
            return this.toArrayLike(Buffer, endian, length);
        };

        BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
        };

        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, "byte array longer than desired length");
            assert(reqLength > 0, "Requested array length <= 0");

            this.strip();
            var littleEndian = endian === "le";
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
                // Assume big-endian
                for (i = 0; i < reqLength - byteLength; i++) {
                    res[i] = 0;
                }

                for (i = 0; !q.isZero(); i++) {
                    b = q.andln(0xff);
                    q.iushrn(8);

                    res[reqLength - i - 1] = b;
                }
            } else {
                for (i = 0; !q.isZero(); i++) {
                    b = q.andln(0xff);
                    q.iushrn(8);

                    res[i] = b;
                }

                for (; i < reqLength; i++) {
                    res[i] = 0;
                }
            }

            return res;
        };

        if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
            };
        } else {
            BN.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;
                if (t >= 0x1000) {
                    r += 13;
                    t >>>= 13;
                }
                if (t >= 0x40) {
                    r += 7;
                    t >>>= 7;
                }
                if (t >= 0x8) {
                    r += 4;
                    t >>>= 4;
                }
                if (t >= 0x02) {
                    r += 2;
                    t >>>= 2;
                }
                return r + t;
            };
        }

        BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
                r += 13;
                t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
                r += 7;
                t >>>= 7;
            }
            if ((t & 0xf) === 0) {
                r += 4;
                t >>>= 4;
            }
            if ((t & 0x3) === 0) {
                r += 2;
                t >>>= 2;
            }
            if ((t & 0x1) === 0) {
                r++;
            }
            return r;
        };

        // Return number of used bits in a BN
        BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
        };

        function toBitArray(num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
        }

        // Number of trailing zero bits
        BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
                var b = this._zeroBits(this.words[i]);
                r += b;
                if (b !== 26) break;
            }
            return r;
        };

        BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
        };

        BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
        };

        BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
        };

        BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
        };

        // Return negative clone of `this`
        BN.prototype.neg = function neg() {
            return this.clone().ineg();
        };

        BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
                this.negative ^= 1;
            }

            return this;
        };

        // Or `num` with `this` in-place
        BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
                this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
                this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
        };

        BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
        };

        // Or `num` with `this`
        BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
        };

        BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
        };

        // And `num` with `this` in-place
        BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
                b = num;
            } else {
                b = this;
            }

            for (var i = 0; i < b.length; i++) {
                this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
        };

        BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
        };

        // And `num` with `this`
        BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
        };

        BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
        };

        // Xor `num` with `this` in-place
        BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
                a = this;
                b = num;
            } else {
                a = num;
                b = this;
            }

            for (var i = 0; i < b.length; i++) {
                this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
                for (; i < a.length; i++) {
                    this.words[i] = a.words[i];
                }
            }

            this.length = a.length;

            return this.strip();
        };

        BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
        };

        // Xor `num` with `this`
        BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
        };

        BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
        };

        // Not ``this`` with ``width`` bitwidth
        BN.prototype.inotn = function inotn(width) {
            assert(typeof width === "number" && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
                bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
                this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
        };

        BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
        };

        // Set `bit` of `this`
        BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === "number" && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
                this.words[off] = this.words[off] | (1 << wbit);
            } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
        };

        // Add `num` to `this` in-place
        BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign();

                // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
                a = this;
                b = num;
            } else {
                a = num;
                b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++;
                // Copy the rest of the words
            } else if (a !== this) {
                for (; i < a.length; i++) {
                    this.words[i] = a.words[i];
                }
            }

            return this;
        };

        // Add `num` to `this`
        BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
            } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
        };

        // Subtract `num` from `this` in-place
        BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign();

                // -this - num = -(this + num)
            } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
                a = this;
                b = num;
            } else {
                a = num;
                b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
                for (; i < a.length; i++) {
                    this.words[i] = a.words[i];
                }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
                this.negative = 1;
            }

            return this.strip();
        };

        // Subtract `num` from `this`
        BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
        };

        function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = carry >>> 26;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                    var i = (k - j) | 0;
                    a = self.words[i] | 0;
                    b = num.words[j] | 0;
                    r = a * b + rword;
                    ncarry += (r / 0x4000000) | 0;
                    rword = r & 0x3ffffff;
                }
                out.words[k] = rword | 0;
                carry = ncarry | 0;
            }
            if (carry !== 0) {
                out.words[k] = carry | 0;
            } else {
                out.length--;
            }

            return out.strip();
        }

        // TODO(indutny): it may be reasonable to omit it for users who don't need
        // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
        // multiplication (like elliptic secp256k1).
        var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
                o[19] = c;
                out.length++;
            }
            return out;
        };

        // Polyfill comb
        if (!Math.imul) {
            comb10MulTo = smallMulTo;
        }

        function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                    var i = k - j;
                    var a = self.words[i] | 0;
                    var b = num.words[j] | 0;
                    var r = a * b;

                    var lo = r & 0x3ffffff;
                    ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                    lo = (lo + rword) | 0;
                    rword = lo & 0x3ffffff;
                    ncarry = (ncarry + (lo >>> 26)) | 0;

                    hncarry += ncarry >>> 26;
                    ncarry &= 0x3ffffff;
                }
                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
            }
            if (carry !== 0) {
                out.words[k] = carry;
            } else {
                out.length--;
            }

            return out.strip();
        }

        function jumboMulTo(self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
        }

        BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
            } else if (len < 63) {
                res = smallMulTo(this, num, out);
            } else if (len < 1024) {
                res = bigMulTo(this, num, out);
            } else {
                res = jumboMulTo(this, num, out);
            }

            return res;
        };

        // Cooley-Tukey algorithm for FFT
        // slightly revisited to rely on looping instead of recursion

        function FFTM(x, y) {
            this.x = x;
            this.y = y;
        }

        FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
                t[i] = this.revBin(i, l, N);
            }

            return t;
        };

        // Returns binary-reversed representation of `x`
        FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
                rb |= (x & 1) << (l - i - 1);
                x >>= 1;
            }

            return rb;
        };

        // Performs "tweedling" phase, therefore 'emulating'
        // behaviour of the recursive algorithm
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
                rtws[i] = rws[rbt[i]];
                itws[i] = iws[rbt[i]];
            }
        };

        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
                var l = s << 1;

                var rtwdf = Math.cos((2 * Math.PI) / l);
                var itwdf = Math.sin((2 * Math.PI) / l);

                for (var p = 0; p < N; p += l) {
                    var rtwdf_ = rtwdf;
                    var itwdf_ = itwdf;

                    for (var j = 0; j < s; j++) {
                        var re = rtws[p + j];
                        var ie = itws[p + j];

                        var ro = rtws[p + j + s];
                        var io = itws[p + j + s];

                        var rx = rtwdf_ * ro - itwdf_ * io;

                        io = rtwdf_ * io + itwdf_ * ro;
                        ro = rx;

                        rtws[p + j] = re + ro;
                        itws[p + j] = ie + io;

                        rtws[p + j + s] = re - ro;
                        itws[p + j + s] = ie - io;

                        /* jshint maxdepth : false */
                        if (j !== l) {
                            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                            rtwdf_ = rx;
                        }
                    }
                }
            }
        };

        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = (N / 2) | 0; N; N = N >>> 1) {
                i++;
            }

            return 1 << (i + 1 + odd);
        };

        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
                var t = rws[i];

                rws[i] = rws[N - i - 1];
                rws[N - i - 1] = t;

                t = iws[i];

                iws[i] = -iws[N - i - 1];
                iws[N - i - 1] = -t;
            }
        };

        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
                var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;

                ws[i] = w & 0x3ffffff;

                if (w < 0x4000000) {
                    carry = 0;
                } else {
                    carry = (w / 0x4000000) | 0;
                }
            }

            return ws;
        };

        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
                carry = carry + (ws[i] | 0);

                rws[2 * i] = carry & 0x1fff;
                carry = carry >>> 13;
                rws[2 * i + 1] = carry & 0x1fff;
                carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
                rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
        };

        FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
                ph[i] = 0;
            }

            return ph;
        };

        FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
                var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
        };

        // Multiply `this` by `num`
        BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
        };

        // Multiply employing FFT
        BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
        };

        // In-place Multiplication
        BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
        };

        BN.prototype.imuln = function imuln(num) {
            assert(typeof num === "number");
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
                var w = (this.words[i] | 0) * num;
                var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                carry >>= 26;
                carry += (w / 0x4000000) | 0;
                // NOTE: lo is 27bit maximum
                carry += lo >>> 26;
                this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
            }

            return this;
        };

        BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
        };

        // `this` * `this`
        BN.prototype.sqr = function sqr() {
            return this.mul(this);
        };

        // `this` * `this` in-place
        BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
        };

        // Math.pow(`this`, `num`)
        BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++, res = res.sqr()) {
                if (w[i] !== 0) break;
            }

            if (++i < w.length) {
                for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                    if (w[i] === 0) continue;

                    res = res.mul(q);
                }
            }

            return res;
        };

        // Shift-left in-place
        BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
                var carry = 0;

                for (i = 0; i < this.length; i++) {
                    var newCarry = this.words[i] & carryMask;
                    var c = ((this.words[i] | 0) - newCarry) << r;
                    this.words[i] = c | carry;
                    carry = newCarry >>> (26 - r);
                }

                if (carry) {
                    this.words[i] = carry;
                    this.length++;
                }
            }

            if (s !== 0) {
                for (i = this.length - 1; i >= 0; i--) {
                    this.words[i + s] = this.words[i];
                }

                for (i = 0; i < s; i++) {
                    this.words[i] = 0;
                }

                this.length += s;
            }

            return this.strip();
        };

        BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
        };

        // Shift-right in-place
        // NOTE: `hint` is a lowest bit before trailing zeroes
        // NOTE: if `extended` is present - it will be filled with destroyed bits
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === "number" && bits >= 0);
            var h;
            if (hint) {
                h = (hint - (hint % 26)) / 26;
            } else {
                h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
                for (var i = 0; i < s; i++) {
                    maskedWords.words[i] = this.words[i];
                }
                maskedWords.length = s;
            }

            if (s === 0);
            else if (this.length > s) {
                this.length -= s;
                for (i = 0; i < this.length; i++) {
                    this.words[i] = this.words[i + s];
                }
            } else {
                this.words[0] = 0;
                this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                var word = this.words[i] | 0;
                this.words[i] = (carry << (26 - r)) | (word >>> r);
                carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
            }

            return this.strip();
        };

        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
        };

        // Shift-left
        BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
        };

        BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
        };

        // Shift-right
        BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
        };

        BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
        };

        // Test if n bit is set
        BN.prototype.testn = function testn(bit) {
            assert(typeof bit === "number" && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
        };

        // Return only lowers bits of number (in-place)
        BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, "imaskn works only with positive numbers");

            if (this.length <= s) {
                return this;
            }

            if (r !== 0) {
                s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                this.words[this.length - 1] &= mask;
            }

            return this.strip();
        };

        // Return only lowers bits of number
        BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
        };

        // Add plain number `num` to `this`
        BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === "number");
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) < num) {
                    this.words[0] = num - (this.words[0] | 0);
                    this.negative = 0;
                    return this;
                }

                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
            }

            // Add without checks
            return this._iaddn(num);
        };

        BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                this.words[i] -= 0x4000000;
                if (i === this.length - 1) {
                    this.words[i + 1] = 1;
                } else {
                    this.words[i + 1]++;
                }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
        };

        // Subtract plain number `num` from `this`
        BN.prototype.isubn = function isubn(num) {
            assert(typeof num === "number");
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
            } else {
                // Carry
                for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                    this.words[i] += 0x4000000;
                    this.words[i + 1] -= 1;
                }
            }

            return this.strip();
        };

        BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
        };

        BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
        };

        BN.prototype.iabs = function iabs() {
            this.negative = 0;

            return this;
        };

        BN.prototype.abs = function abs() {
            return this.clone().iabs();
        };

        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 0x3ffffff;
                carry = (w >> 26) - ((right / 0x4000000) | 0);
                this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
        };

        BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== "mod") {
                q = new BN(null);
                q.length = m + 1;
                q.words = new Array(q.length);
                for (var i = 0; i < q.length; i++) {
                    q.words[i] = 0;
                }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
                a = diff;
                if (q) {
                    q.words[m] = 1;
                }
            }

            for (var j = m - 1; j >= 0; j--) {
                var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

                // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                // (0x7ffffff)
                qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                a._ishlnsubmul(b, qj, j);
                while (a.negative !== 0) {
                    qj--;
                    a.negative = 0;
                    a._ishlnsubmul(b, 1, j);
                    if (!a.isZero()) {
                        a.negative ^= 1;
                    }
                }
                if (q) {
                    q.words[j] = qj;
                }
            }
            if (q) {
                q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== "div" && shift !== 0) {
                a.iushrn(shift);
            }

            return {
                div: q || null,
                mod: a,
            };
        };

        // NOTE: 1) `mode` can be set to `mod` to request mod only,
        //       to `div` to request div only, or be absent to
        //       request both div & mod
        //       2) `positive` is true if unsigned mod is requested
        BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
                return {
                    div: new BN(0),
                    mod: new BN(0),
                };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);

                if (mode !== "mod") {
                    div = res.div.neg();
                }

                if (mode !== "div") {
                    mod = res.mod.neg();
                    if (positive && mod.negative !== 0) {
                        mod.iadd(num);
                    }
                }

                return {
                    div: div,
                    mod: mod,
                };
            }

            if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);

                if (mode !== "mod") {
                    div = res.div.neg();
                }

                return {
                    div: div,
                    mod: res.mod,
                };
            }

            if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);

                if (mode !== "div") {
                    mod = res.mod.neg();
                    if (positive && mod.negative !== 0) {
                        mod.isub(num);
                    }
                }

                return {
                    div: res.div,
                    mod: mod,
                };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
                return {
                    div: new BN(0),
                    mod: this,
                };
            }

            // Very short reduction
            if (num.length === 1) {
                if (mode === "div") {
                    return {
                        div: this.divn(num.words[0]),
                        mod: null,
                    };
                }

                if (mode === "mod") {
                    return {
                        div: null,
                        mod: new BN(this.modn(num.words[0])),
                    };
                }

                return {
                    div: this.divn(num.words[0]),
                    mod: new BN(this.modn(num.words[0])),
                };
            }

            return this._wordDiv(num, mode);
        };

        // Find `this` / `num`
        BN.prototype.div = function div(num) {
            return this.divmod(num, "div", false).div;
        };

        // Find `this` % `num`
        BN.prototype.mod = function mod(num) {
            return this.divmod(num, "mod", false).mod;
        };

        BN.prototype.umod = function umod(num) {
            return this.divmod(num, "mod", true).mod;
        };

        // Find Round(`this` / `num`)
        BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };

        BN.prototype.modn = function modn(num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
                acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
        };

        // In-place division by number
        BN.prototype.idivn = function idivn(num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
                var w = (this.words[i] | 0) + carry * 0x4000000;
                this.words[i] = (w / num) | 0;
                carry = w % num;
            }

            return this.strip();
        };

        BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
        };

        BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
                x = x.umod(p);
            } else {
                x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
                x.iushrn(1);
                y.iushrn(1);
                ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
                for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                    x.iushrn(i);
                    while (i-- > 0) {
                        if (A.isOdd() || B.isOdd()) {
                            A.iadd(yp);
                            B.isub(xp);
                        }

                        A.iushrn(1);
                        B.iushrn(1);
                    }
                }

                for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                    y.iushrn(j);
                    while (j-- > 0) {
                        if (C.isOdd() || D.isOdd()) {
                            C.iadd(yp);
                            D.isub(xp);
                        }

                        C.iushrn(1);
                        D.iushrn(1);
                    }
                }

                if (x.cmp(y) >= 0) {
                    x.isub(y);
                    A.isub(C);
                    B.isub(D);
                } else {
                    y.isub(x);
                    C.isub(A);
                    D.isub(B);
                }
            }

            return {
                a: C,
                b: D,
                gcd: y.iushln(g),
            };
        };

        // This is reduced incarnation of the binary EEA
        // above, designated to invert members of the
        // _prime_ fields F(p) at a maximal speed
        BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
                a = a.umod(p);
            } else {
                a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                    a.iushrn(i);
                    while (i-- > 0) {
                        if (x1.isOdd()) {
                            x1.iadd(delta);
                        }

                        x1.iushrn(1);
                    }
                }

                for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                    b.iushrn(j);
                    while (j-- > 0) {
                        if (x2.isOdd()) {
                            x2.iadd(delta);
                        }

                        x2.iushrn(1);
                    }
                }

                if (a.cmp(b) >= 0) {
                    a.isub(b);
                    x1.isub(x2);
                } else {
                    b.isub(a);
                    x2.isub(x1);
                }
            }

            var res;
            if (a.cmpn(1) === 0) {
                res = x1;
            } else {
                res = x2;
            }

            if (res.cmpn(0) < 0) {
                res.iadd(p);
            }

            return res;
        };

        BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                a.iushrn(1);
                b.iushrn(1);
            }

            do {
                while (a.isEven()) {
                    a.iushrn(1);
                }
                while (b.isEven()) {
                    b.iushrn(1);
                }

                var r = a.cmp(b);
                if (r < 0) {
                    // Swap `a` and `b` to make `a` always bigger than `b`
                    var t = a;
                    a = b;
                    b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                    break;
                }

                a.isub(b);
            } while (true);

            return b.iushln(shift);
        };

        // Invert number in the field F(num)
        BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
        };

        BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
        };

        BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
        };

        // And first word and num
        BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
        };

        // Increment at the bit position in-line
        BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === "number");
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
                this._expand(s + 1);
                this.words[s] |= q;
                return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 0x3ffffff;
                this.words[i] = w;
            }
            if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
            }
            return this;
        };

        BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
        };

        BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
                res = 1;
            } else {
                if (negative) {
                    num = -num;
                }

                assert(num <= 0x3ffffff, "Number is too big");

                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
        };

        // Compare two numbers and return:
        // 1 - if `this` > `num`
        // 0 - if `this` == `num`
        // -1 - if `this` < `num`
        BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
        };

        // Unsigned comparison
        BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;

                if (a === b) continue;
                if (a < b) {
                    res = -1;
                } else if (a > b) {
                    res = 1;
                }
                break;
            }
            return res;
        };

        BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
        };

        BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
        };

        BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
        };

        BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
        };

        BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
        };

        BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
        };

        BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
        };

        BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
        };

        BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
        };

        BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
        };

        //
        // A reduce context, could be using montgomery or something better, depending
        // on the `m` itself.
        //
        BN.red = function red(num) {
            return new Red(num);
        };

        BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            assert(this.negative === 0, "red works only with positives");
            return ctx.convertTo(this)._forceRed(ctx);
        };

        BN.prototype.fromRed = function fromRed() {
            assert(this.red, "fromRed works only with numbers in reduction context");
            return this.red.convertFrom(this);
        };

        BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
        };

        BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            return this._forceRed(ctx);
        };

        BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, "redAdd works only with red numbers");
            return this.red.add(this, num);
        };

        BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, "redIAdd works only with red numbers");
            return this.red.iadd(this, num);
        };

        BN.prototype.redSub = function redSub(num) {
            assert(this.red, "redSub works only with red numbers");
            return this.red.sub(this, num);
        };

        BN.prototype.redISub = function redISub(num) {
            assert(this.red, "redISub works only with red numbers");
            return this.red.isub(this, num);
        };

        BN.prototype.redShl = function redShl(num) {
            assert(this.red, "redShl works only with red numbers");
            return this.red.shl(this, num);
        };

        BN.prototype.redMul = function redMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.mul(this, num);
        };

        BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.imul(this, num);
        };

        BN.prototype.redSqr = function redSqr() {
            assert(this.red, "redSqr works only with red numbers");
            this.red._verify1(this);
            return this.red.sqr(this);
        };

        BN.prototype.redISqr = function redISqr() {
            assert(this.red, "redISqr works only with red numbers");
            this.red._verify1(this);
            return this.red.isqr(this);
        };

        // Square root over p
        BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, "redSqrt works only with red numbers");
            this.red._verify1(this);
            return this.red.sqrt(this);
        };

        BN.prototype.redInvm = function redInvm() {
            assert(this.red, "redInvm works only with red numbers");
            this.red._verify1(this);
            return this.red.invm(this);
        };

        // Return negative clone of `this` % `red modulo`
        BN.prototype.redNeg = function redNeg() {
            assert(this.red, "redNeg works only with red numbers");
            this.red._verify1(this);
            return this.red.neg(this);
        };

        BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, "redPow(normalNum)");
            this.red._verify1(this);
            return this.red.pow(this, num);
        };

        // Prime numbers with efficient reduction
        var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null,
        };

        // Pseudo-Mersenne prime
        function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
        }

        MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
        };

        MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
            } else if (cmp > 0) {
                r.isub(this.p);
            } else {
                if (r.strip !== undefined) {
                    // r is BN v4 instance
                    r.strip();
                } else {
                    // r is BN v5 instance
                    r._strip();
                }
            }

            return r;
        };

        MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
        };

        MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
        };

        function K256() {
            MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        inherits(K256, MPrime);

        K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
                output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
                var next = input.words[i] | 0;
                input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
                input.length -= 10;
            } else {
                input.length -= 9;
            }
        };

        K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
                var w = num.words[i] | 0;
                lo += w * 0x3d1;
                num.words[i] = lo & 0x3ffffff;
                lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
                num.length--;
                if (num.words[num.length - 1] === 0) {
                    num.length--;
                }
            }
            return num;
        };

        function P224() {
            MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        inherits(P224, MPrime);

        function P192() {
            MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        inherits(P192, MPrime);

        function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        inherits(P25519, MPrime);

        P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
                var hi = (num.words[i] | 0) * 0x13 + carry;
                var lo = hi & 0x3ffffff;
                hi >>>= 26;

                num.words[i] = lo;
                carry = hi;
            }
            if (carry !== 0) {
                num.words[num.length++] = carry;
            }
            return num;
        };

        // Exported mostly for testing purposes, use plain name instead
        BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === "k256") {
                prime = new K256();
            } else if (name === "p224") {
                prime = new P224();
            } else if (name === "p192") {
                prime = new P192();
            } else if (name === "p25519") {
                prime = new P25519();
            } else {
                throw new Error("Unknown prime " + name);
            }
            primes[name] = prime;

            return prime;
        };

        //
        // Base reduction engine
        //
        function Red(m) {
            if (typeof m === "string") {
                var prime = BN._prime(m);
                this.m = prime.p;
                this.prime = prime;
            } else {
                assert(m.gtn(1), "modulus must be greater than 1");
                this.m = m;
                this.prime = null;
            }
        }

        Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, "red works only with positives");
            assert(a.red, "red works only with red numbers");
        };

        Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, "red works only with positives");
            assert(a.red && a.red === b.red, "red works only with red numbers");
        };

        Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
        };

        Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
                return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
        };

        Red.prototype.add = function add(a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
            }
            return res._forceRed(this);
        };

        Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
            }
            return res;
        };

        Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
                res.iadd(this.m);
            }
            return res._forceRed(this);
        };

        Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
                res.iadd(this.m);
            }
            return res;
        };

        Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
        };

        Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
        };

        Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
        };

        Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
        };

        Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
        };

        Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
                var pow = this.m.add(new BN(1)).iushrn(2);
                return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
                s++;
                q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
                z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
                var tmp = t;
                for (var i = 0; tmp.cmp(one) !== 0; i++) {
                    tmp = tmp.redSqr();
                }
                assert(i < m);
                var b = this.pow(c, new BN(1).iushln(m - i - 1));

                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
            }

            return r;
        };

        Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
            } else {
                return this.imod(inv);
            }
        };

        Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1).toRed(this);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
                wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
                start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
                var word = num.words[i];
                for (var j = start - 1; j >= 0; j--) {
                    var bit = (word >> j) & 1;
                    if (res !== wnd[0]) {
                        res = this.sqr(res);
                    }

                    if (bit === 0 && current === 0) {
                        currentLen = 0;
                        continue;
                    }

                    current <<= 1;
                    current |= bit;
                    currentLen++;
                    if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                    res = this.mul(res, wnd[current]);
                    currentLen = 0;
                    current = 0;
                }
                start = 26;
            }

            return res;
        };

        Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
        };

        Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
        };

        //
        // Montgomery method engine
        //

        BN.mont = function mont(num) {
            return new Mont(num);
        };

        function Mont(m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
                this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);

        Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
        };

        Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
        };

        Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
            }

            return res._forceRed(this);
        };

        Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
            }

            return res._forceRed(this);
        };

        Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
        };
    })(module, commonjsGlobal);
})(bn$1);

var bnExports = bn$1.exports;

var minimalisticAssert = assert$f;

function assert$f(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}

assert$f.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

var utils$n = {};

(function (exports) {
    var utils = exports;

    function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg !== "string") {
            for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
            return res;
        }
        if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
            for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                var hi = c >> 8;
                var lo = c & 0xff;
                if (hi) res.push(hi, lo);
                else res.push(lo);
            }
        }
        return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
        return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
        if (enc === "hex") return toHex(arr);
        else return arr;
    };
})(utils$n);

(function (exports) {
    var utils = exports;
    var BN = bnExports;
    var minAssert = minimalisticAssert;
    var minUtils = utils$n;

    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        var i;
        for (i = 0; i < naf.length; i += 1) {
            naf[i] = 0;
        }

        var ws = 1 << (w + 1);
        var k = num.clone();

        for (i = 0; i < naf.length; i++) {
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                else z = mod;
                k.isubn(z);
            } else {
                z = 0;
            }

            naf[i] = z;
            k.iushrn(1);
        }

        return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
        var jsf = [[], []];

        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
            // First phase
            var m14 = (k1.andln(3) + d1) & 3;
            var m24 = (k2.andln(3) + d2) & 3;
            if (m14 === 3) m14 = -1;
            if (m24 === 3) m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
                u1 = 0;
            } else {
                m8 = (k1.andln(7) + d1) & 7;
                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                else u1 = m14;
            }
            jsf[0].push(u1);

            var u2;
            if ((m24 & 1) === 0) {
                u2 = 0;
            } else {
                m8 = (k2.andln(7) + d2) & 7;
                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                else u2 = m24;
            }
            jsf[1].push(u2);

            // Second phase
            if (2 * d1 === u1 + 1) d1 = 1 - d1;
            if (2 * d2 === u2 + 1) d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
        }

        return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
        var key = "_" + name;
        obj.prototype[name] = function cachedProperty() {
            return this[key] !== undefined ? this[key] : (this[key] = computer.call(this));
        };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
        return new BN(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
})(utils$o);

var brorand = { exports: {} };

var r$7;

brorand.exports = function rand(len) {
    if (!r$7) r$7 = new Rand(null);

    return r$7.generate(len);
};

function Rand(rand) {
    this.rand = rand;
}
brorand.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);

    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
    return res;
};

if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.crypto.getRandomValues(arr);
            return arr;
        };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.msCrypto.getRandomValues(arr);
            return arr;
        };

        // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === "object") {
        // Old junk
        Rand.prototype._rand = function () {
            throw new Error("Not implemented yet");
        };
    }
} else {
    // Node.js or Web worker with no crypto support
    try {
        var crypto$2 = require$$0$1;
        if (typeof crypto$2.randomBytes !== "function") throw new Error("Not supported");

        Rand.prototype._rand = function _rand(n) {
            return crypto$2.randomBytes(n);
        };
    } catch (e) {}
}

var brorandExports = brorand.exports;

var curve = {};

var BN$7 = bnExports;
var utils$m = utils$o;
var getNAF = utils$m.getNAF;
var getJSF = utils$m.getJSF;
var assert$e = utils$m.assert;

function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN$7(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN$7.red(conf.prime) : BN$7.mont(this.p);

    // Useful for many curves
    this.zero = new BN$7(0).toRed(this.red);
    this.one = new BN$7(1).toRed(this.red);
    this.two = new BN$7(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new BN$7(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    this._bitLength = this.n ? this.n.bitLength() : 0;

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
    } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
var base = BaseCurve;

BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};

BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$e(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--) nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);

        if (i < 0) break;
        var z = naf[i];
        assert$e(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
            else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
            // J +- J
            if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
            else acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
    }
    return p.type === "affine" ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }

        var comb = [points[a] /* 1 */, null /* 3 */, null /* 5 */, points[b] /* 7 */];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [-3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */, -7 /* 0 -1 */, 0 /* 0 0 */, 7 /* 0 1 */, 5 /* 1 -1 */, 1 /* 1 0 */, 3 /* 1 1 */];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;

            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
            var zero = true;
            for (j = 0; j < len; j++) {
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;

        for (j = 0; j < len; j++) {
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][(z - 1) >> 1];
            else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();

            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for (i = 0; i < len; i++) wnd[i] = null;

    if (jacobianResult) return acc;
    else return acc.toP();
};

function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error("Not implemented");
};

BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils$m.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert$e(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert$e(bytes[bytes.length - 1] % 2 === 1);

        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error("Unknown point format");
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);

    if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

    return [0x04].concat(x, this.getY().toArray("be", len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
    return utils$m.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;

    var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;

    var doubles = this.precomputed.doubles;
    if (!doubles) return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

    var doubles = [this];
    var acc = this;
    for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++) acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles,
    };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res,
    };
};

BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};

BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++) r = r.dbl();
    return r;
};

var inherits_browser = { exports: {} };

if (typeof Object.create === "function") {
    // implementation from standard node.js 'util' module
    inherits_browser.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true,
                },
            });
        }
    };
} else {
    // old school shim for old browsers
    inherits_browser.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
        }
    };
}

var inherits_browserExports = inherits_browser.exports;

var utils$l = utils$o;
var BN$6 = bnExports;
var inherits$3 = inherits_browserExports;
var Base$2 = base;

var assert$d = utils$l.assert;

function ShortCurve(conf) {
    Base$2.call(this, "short", conf);

    this.a = new BN$6(conf.a, 16).toRed(this.red);
    this.b = new BN$6(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits$3(ShortCurve, Base$2);
var short = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
        beta = new BN$6(conf.beta, 16).toRed(this.red);
    } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
        lambda = new BN$6(conf.lambda, 16);
    } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
        } else {
            lambda = lambdas[1];
            assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
        basis = conf.basis.map(function (vec) {
            return {
                a: new BN$6(vec.a, 16),
                b: new BN$6(vec.b, 16),
            };
        });
    } else {
        basis = this._getEndoBasis(lambda);
    }

    return {
        beta: beta,
        lambda: lambda,
        basis: basis,
    };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN$6.mont(num);
    var tinv = new BN$6(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new BN$6(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN$6(1);
    var y1 = new BN$6(0);
    var x2 = new BN$6(0);
    var y2 = new BN$6(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) {
            break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }

    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }

    return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
    ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$6(x, 16);
    if (!x.red) x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

    return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

    // Clean-up references to points and coefficients
    for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};

function Point$2(curve, x, y, isRed) {
    Base$2.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN$6(x, 16);
        this.y = new BN$6(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits$3(Point$2, Base$2.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point$2(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point$2.fromJSON(this, obj, red);
};

Point$2.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;

    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul),
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul),
            },
        };
    }
    return beta;
};

Point$2.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [this.x, this.y];

    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1),
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1),
            },
        },
    ];
};

Point$2.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;

    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point)),
        },
    };
    return res;
};

Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};

Point$2.prototype.isInfinity = function isInfinity() {
    return this.inf;
};

Point$2.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;

    // P + O = P
    if (p.inf) return this;

    // P + P = 2P
    if (this.eq(p)) return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};

Point$2.prototype.dbl = function dbl() {
    if (this.inf) return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};

Point$2.prototype.getX = function getX() {
    return this.x.fromRed();
};

Point$2.prototype.getY = function getY() {
    return this.y.fromRed();
};

Point$2.prototype.mul = function mul(k) {
    k = new BN$6(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);
    else return this.curve._wnafMul(this, k);
};

Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point$2.prototype.eq = function eq(p) {
    return this === p || (this.inf === p.inf && (this.inf || (this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0)));
};

Point$2.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate),
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate),
            },
        };
    }
    return res;
};

Point$2.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};

function JPoint(curve, x, y, z) {
    Base$2.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN$6(0);
    } else {
        this.x = new BN$6(x, 16);
        this.y = new BN$6(y, 16);
        this.z = new BN$6(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
}
inherits$3(JPoint, Base$2.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;

    // P + O = P
    if (p.isInfinity()) return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();

    // P + O = P
    if (p.isInfinity()) return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();

    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++) r = r.dbl();
        return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;

    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN$6(k, kbase);

    return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());

    if (this === p) return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};

JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};

JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

var BN$5 = bnExports;
var inherits$2 = inherits_browserExports;
var Base$1 = base;

var utils$k = utils$o;

function MontCurve(conf) {
    Base$1.call(this, "mont", conf);

    this.a = new BN$5(conf.a, 16).toRed(this.red);
    this.b = new BN$5(conf.b, 16).toRed(this.red);
    this.i4 = new BN$5(4).toRed(this.red).redInvm();
    this.two = new BN$5(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits$2(MontCurve, Base$1);
var mont = MontCurve;

MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();

    return y.redSqr().cmp(rhs) === 0;
};

function Point$1(curve, x, z) {
    Base$1.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN$5(x, 16);
        this.z = new BN$5(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits$2(Point$1, Base$1.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils$k.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
};

Point$1.prototype.precompute = function precompute() {
    // No-op
};

Point$1.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};

Point$1.fromJSON = function fromJSON(curve, obj) {
    return new Point$1(curve, obj[0], obj[1] || curve.one);
};

Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};

Point$1.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

Point$1.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A

    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};

Point$1.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};

Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A

    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};

Point$1.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
            a = a.diffAdd(b, c);
            // N * Q = 2 * ((N / 2) * Q + Q))
            b = b.dbl();
        } else {
            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
            b = a.diffAdd(b, c);
            // N * Q + Q = 2 * ((N / 2) * Q + Q)
            a = a.dbl();
        }
    }
    return b;
};

Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};

Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};

Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};

Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};

Point$1.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();

    return this.x.fromRed();
};

var utils$j = utils$o;
var BN$4 = bnExports;
var inherits$1 = inherits_browserExports;
var Base = base;

var assert$c = utils$j.assert;

function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    Base.call(this, "edwards", conf);

    this.a = new BN$4(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN$4(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN$4(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits$1(EdwardsCurve, Base);
var edwards = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$4(x, 16);
    if (!x.red) x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");

    var isOdd = y.fromRed().isOdd();
    if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

    return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN$4(y, 16);
    if (!y.red) y = y.toRed(this.red);

    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");

    if (x.fromRed().isOdd() !== odd) x = x.redNeg();

    return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN$4(x, 16);
        this.y = new BN$4(y, 16);
        this.z = z ? new BN$4(z, 16) : this.curve.one;
        this.t = t && new BN$4(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits$1(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};

Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;

    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;

    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;

    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};

Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};

Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
    return this === other || (this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0);
};

Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

(function (exports) {
    var curve = exports;

    curve.base = base;
    curve.short = short;
    curve.mont = mont;
    curve.edwards = edwards;
})(curve);

var curves$2 = {};

var hash$2 = {};

var utils$i = {};

var assert$b = minimalisticAssert;
var inherits = inherits_browserExports;

utils$i.inherits = inherits;

function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xfc00) !== 0xd800) {
        return false;
    }
    if (i < 0 || i + 1 >= msg.length) {
        return false;
    }
    return (msg.charCodeAt(i + 1) & 0xfc00) === 0xdc00;
}

function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                if (c < 128) {
                    res[p++] = c;
                } else if (c < 2048) {
                    res[p++] = (c >> 6) | 192;
                    res[p++] = (c & 63) | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03ff) << 10) + (msg.charCodeAt(++i) & 0x03ff);
                    res[p++] = (c >> 18) | 240;
                    res[p++] = ((c >> 12) & 63) | 128;
                    res[p++] = ((c >> 6) & 63) | 128;
                    res[p++] = (c & 63) | 128;
                } else {
                    res[p++] = (c >> 12) | 224;
                    res[p++] = ((c >> 6) & 63) | 128;
                    res[p++] = (c & 63) | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else {
        for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
    }
    return res;
}
utils$i.toArray = toArray;

function toHex(msg) {
    var res = "";
    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
    return res;
}
utils$i.toHex = toHex;

function htonl(w) {
    var res = (w >>> 24) | ((w >>> 8) & 0xff00) | ((w << 8) & 0xff0000) | ((w & 0xff) << 24);
    return res >>> 0;
}
utils$i.htonl = htonl;

function toHex32(msg, endian) {
    var res = "";
    for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
utils$i.toHex32 = toHex32;

function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
utils$i.zero2 = zero2;

function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
utils$i.zero8 = zero8;

function join32(msg, start, end, endian) {
    var len = end - start;
    assert$b(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big") w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
utils$i.join32 = join32;

function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = (m >>> 16) & 0xff;
            res[k + 2] = (m >>> 8) & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = (m >>> 16) & 0xff;
            res[k + 1] = (m >>> 8) & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
utils$i.split32 = split32;

function rotr32$1(w, b) {
    return (w >>> b) | (w << (32 - b));
}
utils$i.rotr32 = rotr32$1;

function rotl32$2(w, b) {
    return (w << b) | (w >>> (32 - b));
}
utils$i.rotl32 = rotl32$2;

function sum32$3(a, b) {
    return (a + b) >>> 0;
}
utils$i.sum32 = sum32$3;

function sum32_3$1(a, b, c) {
    return (a + b + c) >>> 0;
}
utils$i.sum32_3 = sum32_3$1;

function sum32_4$2(a, b, c, d) {
    return (a + b + c + d) >>> 0;
}
utils$i.sum32_4 = sum32_4$2;

function sum32_5$2(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
}
utils$i.sum32_5 = sum32_5$2;

function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
utils$i.sum64 = sum64$1;

function sum64_hi$1(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
utils$i.sum64_hi = sum64_hi$1;

function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
utils$i.sum64_lo = sum64_lo$1;

function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
utils$i.sum64_4_hi = sum64_4_hi$1;

function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
utils$i.sum64_4_lo = sum64_4_lo$1;

function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
utils$i.sum64_5_hi = sum64_5_hi$1;

function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
}
utils$i.sum64_5_lo = sum64_5_lo$1;

function rotr64_hi$1(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
}
utils$i.rotr64_hi = rotr64_hi$1;

function rotr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
}
utils$i.rotr64_lo = rotr64_lo$1;

function shr64_hi$1(ah, al, num) {
    return ah >>> num;
}
utils$i.shr64_hi = shr64_hi$1;

function shr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
}
utils$i.shr64_lo = shr64_lo$1;

var common$5 = {};

var utils$h = utils$i;
var assert$a = minimalisticAssert;

function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
common$5.BlockHash = BlockHash$4;

BlockHash$4.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils$h.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;

        msg = utils$h.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
    }

    return this;
};

BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$a(this.pending === null);

    return this._digest(enc);
};

BlockHash$4.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++) res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++) res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++) res[i++] = 0;
    }

    return res;
};

var sha = {};

var common$4 = {};

var utils$g = utils$i;
var rotr32 = utils$g.rotr32;

function ft_1$1(s, x, y, z) {
    if (s === 0) return ch32$1(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32$1(x, y, z);
}
common$4.ft_1 = ft_1$1;

function ch32$1(x, y, z) {
    return (x & y) ^ (~x & z);
}
common$4.ch32 = ch32$1;

function maj32$1(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
}
common$4.maj32 = maj32$1;

function p32(x, y, z) {
    return x ^ y ^ z;
}
common$4.p32 = p32;

function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
common$4.s0_256 = s0_256$1;

function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
common$4.s1_256 = s1_256$1;

function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
common$4.g0_256 = g0_256$1;

function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
common$4.g1_256 = g1_256$1;

var utils$f = utils$i;
var common$3 = common$5;
var shaCommon$1 = common$4;

var rotl32$1 = utils$f.rotl32;
var sum32$2 = utils$f.sum32;
var sum32_5$1 = utils$f.sum32_5;
var ft_1 = shaCommon$1.ft_1;
var BlockHash$3 = common$3.BlockHash;

var sha1_K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];

function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();

    BlockHash$3.call(this);
    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    this.W = new Array(80);
}

utils$f.inherits(SHA1, BlockHash$3);
var _1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++) W[i] = msg[start + i];

    for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
    }

    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils$f.toHex32(this.h, "big");
    else return utils$f.split32(this.h, "big");
};

var utils$e = utils$i;
var common$2 = common$5;
var shaCommon = common$4;
var assert$9 = minimalisticAssert;

var sum32$1 = utils$e.sum32;
var sum32_4$1 = utils$e.sum32_4;
var sum32_5 = utils$e.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash$2 = common$2.BlockHash;

var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74,
    0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d,
    0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e,
    0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
];

function SHA256$1() {
    if (!(this instanceof SHA256$1)) return new SHA256$1();

    BlockHash$2.call(this);
    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils$e.inherits(SHA256$1, BlockHash$2);
var _256 = SHA256$1;

SHA256$1.blockSize = 512;
SHA256$1.outSize = 256;
SHA256$1.hmacStrength = 192;
SHA256$1.padLength = 64;

SHA256$1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++) W[i] = msg[start + i];
    for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    assert$9(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
};

SHA256$1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils$e.toHex32(this.h, "big");
    else return utils$e.split32(this.h, "big");
};

var utils$d = utils$i;
var SHA256 = _256;

function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();

    SHA256.call(this);
    this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}
utils$d.inherits(SHA224, SHA256);
var _224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return utils$d.toHex32(this.h.slice(0, 7), "big");
    else return utils$d.split32(this.h.slice(0, 7), "big");
};

var utils$c = utils$i;
var common$1 = common$5;
var assert$8 = minimalisticAssert;

var rotr64_hi = utils$c.rotr64_hi;
var rotr64_lo = utils$c.rotr64_lo;
var shr64_hi = utils$c.shr64_hi;
var shr64_lo = utils$c.shr64_lo;
var sum64 = utils$c.sum64;
var sum64_hi = utils$c.sum64_hi;
var sum64_lo = utils$c.sum64_lo;
var sum64_4_hi = utils$c.sum64_4_hi;
var sum64_4_lo = utils$c.sum64_4_lo;
var sum64_5_hi = utils$c.sum64_5_hi;
var sum64_5_lo = utils$c.sum64_5_lo;

var BlockHash$1 = common$1.BlockHash;

var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4,
    0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f,
    0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc,
    0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85,
    0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6,
    0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624,
    0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814,
    0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c,
    0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35,
    0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
];

function SHA512$1() {
    if (!(this instanceof SHA512$1)) return new SHA512$1();

    BlockHash$1.call(this);
    this.h = [
        0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils$c.inherits(SHA512$1, BlockHash$1);
var _512 = SHA512$1;

SHA512$1.blockSize = 1024;
SHA512$1.outSize = 512;
SHA512$1.hmacStrength = 192;
SHA512$1.padLength = 128;

SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++) W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};

SHA512$1.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    assert$8(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};

SHA512$1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils$c.toHex32(this.h, "big");
    else return utils$c.split32(this.h, "big");
};

function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (~xh & zh);
    if (r < 0) r += 0x100000000;
    return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (~xl & zl);
    if (r < 0) r += 0x100000000;
    return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0) r += 0x100000000;
    return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0) r += 0x100000000;
    return r;
}

function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}

function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}

function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}

function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}

function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

var utils$b = utils$i;

var SHA512 = _512;

function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();

    SHA512.call(this);
    this.h = [
        0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,
    ];
}
utils$b.inherits(SHA384, SHA512);
var _384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils$b.toHex32(this.h.slice(0, 12), "big");
    else return utils$b.split32(this.h.slice(0, 12), "big");
};

sha.sha1 = _1;
sha.sha224 = _224;
sha.sha256 = _256;
sha.sha384 = _384;
sha.sha512 = _512;

var ripemd = {};

var utils$a = utils$i;
var common = common$5;

var rotl32 = utils$a.rotl32;
var sum32 = utils$a.sum32;
var sum32_3 = utils$a.sum32_3;
var sum32_4 = utils$a.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();

    BlockHash.call(this);

    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    this.endian = "little";
}
utils$a.inherits(RIPEMD160, BlockHash);
ripemd.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
        var T = sum32(rotl32(sum32_4(A, f$5(j, B, C, D), msg[r$6[j] + start], K$4(j)), s$6[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f$5(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh$1[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils$a.toHex32(this.h, "little");
    else return utils$a.split32(this.h, "little");
};

function f$5(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return (x & y) | (~x & z);
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return (x & z) | (y & ~z);
    else return x ^ (y | ~z);
}

function K$4(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}

function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}

var r$6 = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11,
    5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
];

var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0,
    4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
];

var s$6 = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6,
    5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
];

var sh$1 = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14,
    13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
];

var utils$9 = utils$i;
var assert$7 = minimalisticAssert;

function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils$9.toArray(key, enc));
}
var hmac = Hmac;

Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert$7(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++) key.push(0);

    for (i = 0; i < key.length; i++) key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++) key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};

Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

(function (exports) {
    var hash = exports;

    hash.utils = utils$i;
    hash.common = common$5;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
})(hash$2);

var secp256k1;
var hasRequiredSecp256k1;

function requireSecp256k1() {
    if (hasRequiredSecp256k1) return secp256k1;
    hasRequiredSecp256k1 = 1;
    secp256k1 = {
        doubles: {
            step: 4,
            points: [
                ["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],
                ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],
                ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],
                ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],
                ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],
                ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],
                ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],
                ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],
                ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],
                ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],
                ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],
                ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],
                ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],
                ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],
                ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],
                ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],
                ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],
                ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],
                ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],
                ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],
                ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],
                ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],
                ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],
                ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],
                ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],
                ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],
                ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],
                ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],
                ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],
                ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],
                ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],
                ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],
                ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],
                ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],
                ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],
                ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],
                ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],
                ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],
                ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],
                ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],
                ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],
                ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],
                ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],
                ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],
                ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],
                ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],
                ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],
                ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],
                ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],
                ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],
                ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],
                ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],
                ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],
                ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],
                ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],
                ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],
                ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],
                ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],
                ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],
                ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],
                ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],
                ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],
                ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],
                ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],
                ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"],
            ],
        },
        naf: {
            wnd: 7,
            points: [
                ["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],
                ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],
                ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],
                ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],
                ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],
                ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],
                ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],
                ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],
                ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],
                ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],
                ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],
                ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],
                ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],
                ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],
                ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],
                ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],
                ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],
                ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],
                ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],
                ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],
                ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],
                ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],
                ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],
                ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],
                ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],
                ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],
                ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],
                ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],
                ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],
                ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],
                ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],
                ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],
                ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],
                ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],
                ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],
                ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],
                ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],
                ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],
                ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],
                ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],
                ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],
                ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],
                ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],
                ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],
                ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],
                ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],
                ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],
                ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],
                ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],
                ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],
                ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],
                ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],
                ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],
                ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],
                ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],
                ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],
                ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],
                ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],
                ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],
                ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],
                ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],
                ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],
                ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],
                ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],
                ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],
                ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],
                ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],
                ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],
                ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],
                ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],
                ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],
                ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],
                ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],
                ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],
                ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],
                ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],
                ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],
                ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],
                ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],
                ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],
                ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],
                ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],
                ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],
                ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],
                ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],
                ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],
                ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],
                ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],
                ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],
                ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],
                ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],
                ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],
                ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],
                ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],
                ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],
                ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],
                ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],
                ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],
                ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],
                ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],
                ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],
                ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],
                ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],
                ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],
                ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],
                ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],
                ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],
                ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],
                ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],
                ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],
                ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],
                ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],
                ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],
                ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],
                ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],
                ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],
                ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],
                ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],
                ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],
                ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],
                ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],
                ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],
                ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],
                ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],
                ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],
                ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],
                ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"],
            ],
        },
    };
    return secp256k1;
}

(function (exports) {
    var curves = exports;

    var hash = hash$2;
    var curve$1 = curve;
    var utils = utils$o;

    var assert = utils.assert;

    function PresetCurve(options) {
        if (options.type === "short") this.curve = new curve$1.short(options);
        else if (options.type === "edwards") this.curve = new curve$1.edwards(options);
        else this.curve = new curve$1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;

        assert(this.g.validate(), "Invalid curve");
        assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
        Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function () {
                var curve = new PresetCurve(options);
                Object.defineProperty(curves, name, {
                    configurable: true,
                    enumerable: true,
                    value: curve,
                });
                return curve;
            },
        });
    }

    defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash.sha256,
        gRed: false,
        g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"],
    });

    defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash.sha256,
        gRed: false,
        g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"],
    });

    defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash.sha256,
        gRed: false,
        g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5",
        ],
    });

    defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " + "fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " + "fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f " + "5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 " + "f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash.sha384,
        gRed: false,
        g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 " + "5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 " + "0a60b1ce 1d7e819d 7a431d7c 90ea0e5f",
        ],
    });

    defineCurve("p521", {
        type: "short",
        prime: null,
        p:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff",
        a:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff fffffffc",
        b:
            "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b " +
            "99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd " +
            "3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 " +
            "f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash.sha512,
        gRed: false,
        g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 " +
                "053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 " +
                "a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 " +
                "579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 " +
                "3fad0761 353c7086 a272c240 88be9476 9fd16650",
        ],
    });

    defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: ["9"],
    });

    defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",

            // 4/5
            "6666666666666666666666666666666666666666666666666666666666666658",
        ],
    });

    var pre;
    try {
        pre = requireSecp256k1();
    } catch (e) {
        pre = undefined;
    }

    defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash.sha256,

        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
            {
                a: "3086d221a7d46bcde86c90e49284eb15",
                b: "-e4437ed6010e88286f547fa90abfe4c3",
            },
            {
                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                b: "3086d221a7d46bcde86c90e49284eb15",
            },
        ],

        gRed: false,
        g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", pre],
    });
})(curves$2);

var hash$1 = hash$2;
var utils$8 = utils$n;
var assert$6 = minimalisticAssert;

function HmacDRBG$1(options) {
    if (!(this instanceof HmacDRBG$1)) return new HmacDRBG$1(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils$8.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils$8.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils$8.toArray(options.pers, options.persEnc || "hex");
    assert$6(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG$1;

HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }

    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG$1.prototype._hmac = function hmac() {
    return new hash$1.hmac(this.hash, this.K);
};

HmacDRBG$1.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0x00]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;

    this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};

HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }

    entropy = utils$8.toArray(entropy, entropyEnc);
    add = utils$8.toArray(add, addEnc);

    assert$6(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");

    this._update(entropy.concat(add || []));
    this._reseed = 1;
};

HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");

    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }

    // Optional additional data
    if (add) {
        add = utils$8.toArray(add, addEnc || "hex");
        this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils$8.encode(res, enc);
};

var BN$3 = bnExports;
var utils$7 = utils$o;
var assert$5 = utils$7.assert;

function KeyPair$3(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
var key$1 = KeyPair$3;

KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair$3) return pub;

    return new KeyPair$3(ec, {
        pub: pub,
        pubEnc: enc,
    });
};

KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair$3) return priv;

    return new KeyPair$3(ec, {
        priv: priv,
        privEnc: enc,
    });
};

KeyPair$3.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity()) return { result: false, reason: "Invalid public key" };
    if (!pub.validate()) return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: "Public key * N != O" };

    return { result: true, reason: null };
};

KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }

    if (!this.pub) this.pub = this.ec.g.mul(this.priv);

    if (!enc) return this.pub;

    return this.pub.encode(enc, compact);
};

KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};

KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN$3(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") {
            assert$5(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert$5(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair$3.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
        assert$5(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair$3.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};

KeyPair$3.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};

KeyPair$3.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

var BN$2 = bnExports;

var utils$6 = utils$o;
var assert$4 = utils$6.assert;

function Signature$3(options, enc) {
    if (options instanceof Signature$3) return options;

    if (this._importDER(options, enc)) return;

    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new BN$2(options.r, 16);
    this.s = new BN$2(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
var signature$1 = Signature$3;

function Position() {
    this.place = 0;
}

function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
        return initial;
    }
    var octetLen = initial & 0xf;

    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) {
        return false;
    }

    if (buf[p.place] === 0x00) {
        return false;
    }

    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }

    // Leading zeroes
    if (val <= 0x7f) {
        return false;
    }

    p.place = off;
    return val;
}

function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
    }
    if (i === 0) {
        return buf;
    }
    return buf.slice(i);
}

Signature$3.prototype._importDER = function _importDER(data, enc) {
    data = utils$6.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
        return false;
    }
    var len = getLength(data, p);
    if (len === false) {
        return false;
    }
    if (len + p.place !== data.length) {
        return false;
    }
    if (data[p.place++] !== 0x02) {
        return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
        return false;
    }
    if ((data[p.place] & 128) !== 0) {
        return false;
    }
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
        return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
        return false;
    }
    if (data.length !== slen + p.place) {
        return false;
    }
    if ((data[p.place] & 128) !== 0) {
        return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) {
            r = r.slice(1);
        } else {
            // Leading zeroes
            return false;
        }
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) {
            s = s.slice(1);
        } else {
            // Leading zeroes
            return false;
        }
    }

    this.r = new BN$2(r);
    this.s = new BN$2(s);
    this.recoveryParam = null;

    return true;
};

function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
}

Signature$3.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80) r = [0].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [0].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
    }
    var arr = [0x02];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [0x30];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils$6.encode(res, enc);
};

var BN$1 = bnExports;
var HmacDRBG = hmacDrbg;
var utils$5 = utils$o;
var curves$1 = curves$2;
var rand = brorandExports;
var assert$3 = utils$5.assert;

var KeyPair$2 = key$1;
var Signature$2 = signature$1;

function EC(options) {
    if (!(this instanceof EC)) return new EC(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        assert$3(Object.prototype.hasOwnProperty.call(curves$1, options), "Unknown curve " + options);

        options = curves$1[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves$1.PresetCurve) options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
var ec = EC;

EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair$2(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair$2.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair$2.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};

    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: (options.entropy && options.entropyEnc) || "utf8",
        nonce: this.n.toArray(),
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN$1(2));
    for (;;) {
        var priv = new BN$1(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};

    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN$1(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);

    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new BN$1(1));

    for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN$1(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }

        return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
    }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN$1(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature$2(signature, "hex");

    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;

    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;

        return p.getX().umod(this.n).cmp(r) === 0;
    }

    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K

    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;

    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
    assert$3((3 & j) === j, "The recovery param is more than two bits");
    signature = new Signature$2(signature, enc);

    var n = this.n;
    var e = new BN$1(msg);
    var r = signature.r;
    var s = signature.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");

    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);

    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
    signature = new Signature$2(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;

    for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }

        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

var utils$4 = utils$o;
var assert$2 = utils$4.assert;
var parseBytes$2 = utils$4.parseBytes;
var cachedProperty$1 = utils$4.cachedProperty;

/**
 * @param {EDDSA} eddsa - instance
 * @param {Object} params - public/private key parameters
 *
 * @param {Array<Byte>} [params.secret] - secret seed bytes
 * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
 * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
 *
 */
function KeyPair$1(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes$2(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes$2(params.pub);
}

KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair$1) return pub;
    return new KeyPair$1(eddsa, { pub: pub });
};

KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair$1) return secret;
    return new KeyPair$1(eddsa, { secret: secret });
};

KeyPair$1.prototype.secret = function secret() {
    return this._secret;
};

cachedProperty$1(KeyPair$1, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});

cachedProperty$1(KeyPair$1, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});

cachedProperty$1(KeyPair$1, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;

    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;

    return a;
});

cachedProperty$1(KeyPair$1, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty$1(KeyPair$1, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty$1(KeyPair$1, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair$1.prototype.sign = function sign(message) {
    assert$2(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};

KeyPair$1.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};

KeyPair$1.prototype.getSecret = function getSecret(enc) {
    assert$2(this._secret, "KeyPair is public only");
    return utils$4.encode(this.secret(), enc);
};

KeyPair$1.prototype.getPublic = function getPublic(enc) {
    return utils$4.encode(this.pubBytes(), enc);
};

var key = KeyPair$1;

var BN = bnExports;
var utils$3 = utils$o;
var assert$1 = utils$3.assert;
var cachedProperty = utils$3.cachedProperty;
var parseBytes$1 = utils$3.parseBytes;

/**
 * @param {EDDSA} eddsa - eddsa instance
 * @param {Array<Bytes>|Object} sig -
 * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
 * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
 * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
 * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
 */
function Signature$1(eddsa, sig) {
    this.eddsa = eddsa;

    if (typeof sig !== "object") sig = parseBytes$1(sig);

    if (Array.isArray(sig)) {
        assert$1(sig.length === eddsa.encodingLength * 2, "Signature has invalid size");
        sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength),
        };
    }

    assert$1(sig.R && sig.S, "Signature without R or S");

    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;

    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature$1, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature$1, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature$1, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature$1, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});

Signature$1.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};

Signature$1.prototype.toHex = function toHex() {
    return utils$3.encode(this.toBytes(), "hex").toUpperCase();
};

var signature = Signature$1;

var hash = hash$2;
var curves = curves$2;
var utils$2 = utils$o;
var assert = utils$2.assert;
var parseBytes = utils$2.parseBytes;
var KeyPair = key;
var Signature = signature;

function EDDSA(curve) {
    assert(curve === "ed25519", "only tested with ed25519 so far");

    if (!(this instanceof EDDSA)) return new EDDSA(curve);

    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);

    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}

var eddsa = EDDSA;

/**
 * @param {Array|String} message - message bytes
 * @param {Array|String|KeyPair} secret - secret bytes or a keypair
 * @returns {Signature} - signature
 */
EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
 * @param {Array} message - message bytes
 * @param {Array|String|Signature} sig - sig bytes
 * @param {Array|String|Point|KeyPair} pub - public key
 * @returns {Boolean} - true if public key matches sig of message
 */
EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
    }
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);
    return utils$2.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};

/**
 * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
 *
 * EDDSA defines methods for encoding and decoding points and integers. These are
 * helper convenience methods, that pass along to utility functions implied
 * parameters.
 *
 */
EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils$2.parseBytes(bytes);

    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

    var y = utils$2.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils$2.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

(function (exports) {
    var elliptic = exports;

    elliptic.version = require$$0.version;
    elliptic.utils = utils$o;
    elliptic.rand = brorandExports;
    elliptic.curve = curve;
    elliptic.curves = curves$2;

    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = eddsa;
})(elliptic);

var ed25519 = {};

var sha512 = {};

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = binary;
    var wipe_1 = wipe$1;
    exports.DIGEST_LENGTH = 64;
    exports.BLOCK_SIZE = 128;
    /**
     * SHA-2-512 cryptographic hash algorithm.
     */
    var SHA512 = /** @class */ (function () {
        function SHA512() {
            /** Length of hash output */
            this.digestLength = exports.DIGEST_LENGTH;
            /** Block size */
            this.blockSize = exports.BLOCK_SIZE;
            // Note: Int32Array is used instead of Uint32Array for performance reasons.
            this._stateHi = new Int32Array(8); // hash state, high bytes
            this._stateLo = new Int32Array(8); // hash state, low bytes
            this._tempHi = new Int32Array(16); // temporary state, high bytes
            this._tempLo = new Int32Array(16); // temporary state, low bytes
            this._buffer = new Uint8Array(256); // buffer for data to hash
            this._bufferLength = 0; // number of bytes in buffer
            this._bytesHashed = 0; // number of total bytes hashed
            this._finished = false; // indicates whether the hash was finalized
            this.reset();
        }
        SHA512.prototype._initState = function () {
            this._stateHi[0] = 0x6a09e667;
            this._stateHi[1] = 0xbb67ae85;
            this._stateHi[2] = 0x3c6ef372;
            this._stateHi[3] = 0xa54ff53a;
            this._stateHi[4] = 0x510e527f;
            this._stateHi[5] = 0x9b05688c;
            this._stateHi[6] = 0x1f83d9ab;
            this._stateHi[7] = 0x5be0cd19;
            this._stateLo[0] = 0xf3bcc908;
            this._stateLo[1] = 0x84caa73b;
            this._stateLo[2] = 0xfe94f82b;
            this._stateLo[3] = 0x5f1d36f1;
            this._stateLo[4] = 0xade682d1;
            this._stateLo[5] = 0x2b3e6c1f;
            this._stateLo[6] = 0xfb41bd6b;
            this._stateLo[7] = 0x137e2179;
        };
        /**
         * Resets hash state making it possible
         * to re-use this instance to hash other data.
         */
        SHA512.prototype.reset = function () {
            this._initState();
            this._bufferLength = 0;
            this._bytesHashed = 0;
            this._finished = false;
            return this;
        };
        /**
         * Cleans internal buffers and resets hash state.
         */
        SHA512.prototype.clean = function () {
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._tempHi);
            wipe_1.wipe(this._tempLo);
            this.reset();
        };
        /**
         * Updates hash state with the given data.
         *
         * Throws error when trying to update already finalized hash:
         * instance must be reset to update it again.
         */
        SHA512.prototype.update = function (data, dataLength) {
            if (dataLength === void 0) {
                dataLength = data.length;
            }
            if (this._finished) {
                throw new Error("SHA512: can't update because hash was finished.");
            }
            var dataPos = 0;
            this._bytesHashed += dataLength;
            if (this._bufferLength > 0) {
                while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                if (this._bufferLength === this.blockSize) {
                    hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
                    this._bufferLength = 0;
                }
            }
            if (dataLength >= this.blockSize) {
                dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
                dataLength %= this.blockSize;
            }
            while (dataLength > 0) {
                this._buffer[this._bufferLength++] = data[dataPos++];
                dataLength--;
            }
            return this;
        };
        /**
         * Finalizes hash state and puts hash into out.
         * If hash was already finalized, puts the same value.
         */
        SHA512.prototype.finish = function (out) {
            if (!this._finished) {
                var bytesHashed = this._bytesHashed;
                var left = this._bufferLength;
                var bitLenHi = (bytesHashed / 0x20000000) | 0;
                var bitLenLo = bytesHashed << 3;
                var padLength = bytesHashed % 128 < 112 ? 128 : 256;
                this._buffer[left] = 0x80;
                for (var i = left + 1; i < padLength - 8; i++) {
                    this._buffer[i] = 0;
                }
                binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
                this._finished = true;
            }
            for (var i = 0; i < this.digestLength / 8; i++) {
                binary_1.writeUint32BE(this._stateHi[i], out, i * 8);
                binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);
            }
            return this;
        };
        /**
         * Returns the final hash digest.
         */
        SHA512.prototype.digest = function () {
            var out = new Uint8Array(this.digestLength);
            this.finish(out);
            return out;
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be
         * used with restoreState(). Only chain value is saved, not buffers or
         * other state variables.
         */
        SHA512.prototype.saveState = function () {
            if (this._finished) {
                throw new Error("SHA256: cannot save finished state");
            }
            return {
                stateHi: new Int32Array(this._stateHi),
                stateLo: new Int32Array(this._stateLo),
                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
                bufferLength: this._bufferLength,
                bytesHashed: this._bytesHashed,
            };
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization. Restores state saved by
         * saveState() and sets bytesHashed to the given value.
         */
        SHA512.prototype.restoreState = function (savedState) {
            this._stateHi.set(savedState.stateHi);
            this._stateLo.set(savedState.stateLo);
            this._bufferLength = savedState.bufferLength;
            if (savedState.buffer) {
                this._buffer.set(savedState.buffer);
            }
            this._bytesHashed = savedState.bytesHashed;
            this._finished = false;
            return this;
        };
        /**
         * Cleans state returned by saveState().
         */
        SHA512.prototype.cleanSavedState = function (savedState) {
            wipe_1.wipe(savedState.stateHi);
            wipe_1.wipe(savedState.stateLo);
            if (savedState.buffer) {
                wipe_1.wipe(savedState.buffer);
            }
            savedState.bufferLength = 0;
            savedState.bytesHashed = 0;
        };
        return SHA512;
    })();
    exports.SHA512 = SHA512;
    // Constants
    var K = new Int32Array([
        0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
        0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
        0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
        0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
        0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
        0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
        0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
        0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
        0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
        0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
        0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
        0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
        0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
        0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
    ]);
    function hashBlocks(wh, wl, hh, hl, m, pos, len) {
        var ah0 = hh[0],
            ah1 = hh[1],
            ah2 = hh[2],
            ah3 = hh[3],
            ah4 = hh[4],
            ah5 = hh[5],
            ah6 = hh[6],
            ah7 = hh[7],
            al0 = hl[0],
            al1 = hl[1],
            al2 = hl[2],
            al3 = hl[3],
            al4 = hl[4],
            al5 = hl[5],
            al6 = hl[6],
            al7 = hl[7];
        var h, l;
        var th, tl;
        var a, b, c, d;
        while (len >= 128) {
            for (var i = 0; i < 16; i++) {
                var j = 8 * i + pos;
                wh[i] = binary_1.readUint32BE(m, j);
                wl[i] = binary_1.readUint32BE(m, j + 4);
            }
            for (var i = 0; i < 80; i++) {
                var bh0 = ah0;
                var bh1 = ah1;
                var bh2 = ah2;
                var bh3 = ah3;
                var bh4 = ah4;
                var bh5 = ah5;
                var bh6 = ah6;
                var bh7 = ah7;
                var bl0 = al0;
                var bl1 = al1;
                var bl2 = al2;
                var bl3 = al3;
                var bl4 = al4;
                var bl5 = al5;
                var bl6 = al6;
                var bl7 = al7;
                // add
                h = ah7;
                l = al7;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma1
                h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
                l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Ch
                h = (ah4 & ah5) ^ (~ah4 & ah6);
                l = (al4 & al5) ^ (~al4 & al6);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // K
                h = K[i * 2];
                l = K[i * 2 + 1];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // w
                h = wh[i % 16];
                l = wl[i % 16];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                th = (c & 0xffff) | (d << 16);
                tl = (a & 0xffff) | (b << 16);
                // add
                h = th;
                l = tl;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma0
                h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
                l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Maj
                h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh7 = (c & 0xffff) | (d << 16);
                bl7 = (a & 0xffff) | (b << 16);
                // add
                h = bh3;
                l = bl3;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = th;
                l = tl;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh3 = (c & 0xffff) | (d << 16);
                bl3 = (a & 0xffff) | (b << 16);
                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;
                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;
                if (i % 16 === 15) {
                    for (var j = 0; j < 16; j++) {
                        // add
                        h = wh[j];
                        l = wl[j];
                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;
                        h = wh[(j + 9) % 16];
                        l = wl[(j + 9) % 16];
                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;
                        // sigma0
                        th = wh[(j + 1) % 16];
                        tl = wl[(j + 1) % 16];
                        h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
                        l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));
                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;
                        // sigma1
                        th = wh[(j + 14) % 16];
                        tl = wl[(j + 14) % 16];
                        h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
                        l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));
                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;
                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;
                        wh[j] = (c & 0xffff) | (d << 16);
                        wl[j] = (a & 0xffff) | (b << 16);
                    }
                }
            }
            // add
            h = ah0;
            l = al0;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = (c & 0xffff) | (d << 16);
            hl[0] = al0 = (a & 0xffff) | (b << 16);
            h = ah1;
            l = al1;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = (c & 0xffff) | (d << 16);
            hl[1] = al1 = (a & 0xffff) | (b << 16);
            h = ah2;
            l = al2;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = (c & 0xffff) | (d << 16);
            hl[2] = al2 = (a & 0xffff) | (b << 16);
            h = ah3;
            l = al3;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = (c & 0xffff) | (d << 16);
            hl[3] = al3 = (a & 0xffff) | (b << 16);
            h = ah4;
            l = al4;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = (c & 0xffff) | (d << 16);
            hl[4] = al4 = (a & 0xffff) | (b << 16);
            h = ah5;
            l = al5;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = (c & 0xffff) | (d << 16);
            hl[5] = al5 = (a & 0xffff) | (b << 16);
            h = ah6;
            l = al6;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = (c & 0xffff) | (d << 16);
            hl[6] = al6 = (a & 0xffff) | (b << 16);
            h = ah7;
            l = al7;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = (c & 0xffff) | (d << 16);
            hl[7] = al7 = (a & 0xffff) | (b << 16);
            pos += 128;
            len -= 128;
        }
        return pos;
    }
    function hash(data) {
        var h = new SHA512();
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    exports.hash = hash;
})(sha512);

(function (exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertSecretKeyToX25519 =
        exports.convertPublicKeyToX25519 =
        exports.verify =
        exports.sign =
        exports.extractPublicKeyFromSecretKey =
        exports.generateKeyPair =
        exports.generateKeyPairFromSeed =
        exports.SEED_LENGTH =
        exports.SECRET_KEY_LENGTH =
        exports.PUBLIC_KEY_LENGTH =
        exports.SIGNATURE_LENGTH =
            void 0;
    /**
     * Package ed25519 implements Ed25519 public-key signature algorithm.
     */
    const random_1 = random;
    const sha512_1 = sha512;
    const wipe_1 = wipe$1;
    exports.SIGNATURE_LENGTH = 64;
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 64;
    exports.SEED_LENGTH = 32;
    // Returns new zero-filled 16-element GF (Float64Array).
    // If passed an array of numbers, prefills the returned
    // array with them.
    //
    // We use Float64Array, because we need 48-bit numbers
    // for this implementation.
    function gf(init) {
        const r = new Float64Array(16);
        if (init) {
            for (let i = 0; i < init.length; i++) {
                r[i] = init[i];
            }
        }
        return r;
    }
    // Base point.
    const _9 = new Uint8Array(32);
    _9[0] = 9;
    const gf0 = gf();
    const gf1 = gf([1]);
    const D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]);
    const D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]);
    const X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]);
    const Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]);
    const I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
    function set25519(r, a) {
        for (let i = 0; i < 16; i++) {
            r[i] = a[i] | 0;
        }
    }
    function car25519(o) {
        let c = 1;
        for (let i = 0; i < 16; i++) {
            let v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        const c = ~(b - 1);
        for (let i = 0; i < 16; i++) {
            const t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        const m = gf();
        const t = gf();
        for (let i = 0; i < 16; i++) {
            t[i] = n[i];
        }
        car25519(t);
        car25519(t);
        car25519(t);
        for (let j = 0; j < 2; j++) {
            m[0] = t[0] - 0xffed;
            for (let i = 1; i < 15; i++) {
                m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                m[i - 1] &= 0xffff;
            }
            m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
            const b = (m[15] >> 16) & 1;
            m[14] &= 0xffff;
            sel25519(t, m, 1 - b);
        }
        for (let i = 0; i < 16; i++) {
            o[2 * i] = t[i] & 0xff;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function verify32(x, y) {
        let d = 0;
        for (let i = 0; i < 32; i++) {
            d |= x[i] ^ y[i];
        }
        return (1 & ((d - 1) >>> 8)) - 1;
    }
    function neq25519(a, b) {
        const c = new Uint8Array(32);
        const d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return verify32(c, d);
    }
    function par25519(a) {
        const d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
    }
    function unpack25519(o, n) {
        for (let i = 0; i < 16; i++) {
            o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        }
        o[15] &= 0x7fff;
    }
    function add(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] + b[i];
        }
    }
    function sub(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] - b[i];
        }
    }
    function mul(o, a, b) {
        let v,
            c,
            t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0,
            t5 = 0,
            t6 = 0,
            t7 = 0,
            t8 = 0,
            t9 = 0,
            t10 = 0,
            t11 = 0,
            t12 = 0,
            t13 = 0,
            t14 = 0,
            t15 = 0,
            t16 = 0,
            t17 = 0,
            t18 = 0,
            t19 = 0,
            t20 = 0,
            t21 = 0,
            t22 = 0,
            t23 = 0,
            t24 = 0,
            t25 = 0,
            t26 = 0,
            t27 = 0,
            t28 = 0,
            t29 = 0,
            t30 = 0,
            b0 = b[0],
            b1 = b[1],
            b2 = b[2],
            b3 = b[3],
            b4 = b[4],
            b5 = b[5],
            b6 = b[6],
            b7 = b[7],
            b8 = b[8],
            b9 = b[9],
            b10 = b[10],
            b11 = b[11],
            b12 = b[12],
            b13 = b[13],
            b14 = b[14],
            b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function square(o, a) {
        mul(o, a, a);
    }
    function inv25519(o, i) {
        const c = gf();
        let a;
        for (a = 0; a < 16; a++) {
            c[a] = i[a];
        }
        for (a = 253; a >= 0; a--) {
            square(c, c);
            if (a !== 2 && a !== 4) {
                mul(c, c, i);
            }
        }
        for (a = 0; a < 16; a++) {
            o[a] = c[a];
        }
    }
    function pow2523(o, i) {
        const c = gf();
        let a;
        for (a = 0; a < 16; a++) {
            c[a] = i[a];
        }
        for (a = 250; a >= 0; a--) {
            square(c, c);
            if (a !== 1) {
                mul(c, c, i);
            }
        }
        for (a = 0; a < 16; a++) {
            o[a] = c[a];
        }
    }
    function edadd(p, q) {
        const a = gf(),
            b = gf(),
            c = gf(),
            d = gf(),
            e = gf(),
            f = gf(),
            g = gf(),
            h = gf(),
            t = gf();
        sub(a, p[1], p[0]);
        sub(t, q[1], q[0]);
        mul(a, a, t);
        add(b, p[0], p[1]);
        add(t, q[0], q[1]);
        mul(b, b, t);
        mul(c, p[3], q[3]);
        mul(c, c, D2);
        mul(d, p[2], q[2]);
        add(d, d, d);
        sub(e, b, a);
        sub(f, d, c);
        add(g, d, c);
        add(h, b, a);
        mul(p[0], e, f);
        mul(p[1], h, g);
        mul(p[2], g, f);
        mul(p[3], e, h);
    }
    function cswap(p, q, b) {
        for (let i = 0; i < 4; i++) {
            sel25519(p[i], q[i], b);
        }
    }
    function pack(r, p) {
        const tx = gf(),
            ty = gf(),
            zi = gf();
        inv25519(zi, p[2]);
        mul(tx, p[0], zi);
        mul(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for (let i = 255; i >= 0; --i) {
            const b = (s[(i / 8) | 0] >> (i & 7)) & 1;
            cswap(p, q, b);
            edadd(q, p);
            edadd(p, p);
            cswap(p, q, b);
        }
    }
    function scalarbase(p, s) {
        const q = [gf(), gf(), gf(), gf()];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        mul(q[3], X, Y);
        scalarmult(p, q, s);
    }
    // Generates key pair from secret 32-byte seed.
    function generateKeyPairFromSeed(seed) {
        if (seed.length !== exports.SEED_LENGTH) {
            throw new Error(`ed25519: seed must be ${exports.SEED_LENGTH} bytes`);
        }
        const d = (0, sha512_1.hash)(seed);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        const publicKey = new Uint8Array(32);
        const p = [gf(), gf(), gf(), gf()];
        scalarbase(p, d);
        pack(publicKey, p);
        const secretKey = new Uint8Array(64);
        secretKey.set(seed);
        secretKey.set(publicKey, 32);
        return {
            publicKey,
            secretKey,
        };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
    function generateKeyPair(prng) {
        const seed = (0, random_1.randomBytes)(32, prng);
        const result = generateKeyPairFromSeed(seed);
        (0, wipe_1.wipe)(seed);
        return result;
    }
    exports.generateKeyPair = generateKeyPair;
    function extractPublicKeyFromSecretKey(secretKey) {
        if (secretKey.length !== exports.SECRET_KEY_LENGTH) {
            throw new Error(`ed25519: secret key must be ${exports.SECRET_KEY_LENGTH} bytes`);
        }
        return new Uint8Array(secretKey.subarray(32));
    }
    exports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;
    const L = new Float64Array([
        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10,
    ]);
    function modL(r, x) {
        let carry;
        let i;
        let j;
        let k;
        for (i = 63; i >= 32; --i) {
            carry = 0;
            for (j = i - 32, k = i - 12; j < k; ++j) {
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
        }
        carry = 0;
        for (j = 0; j < 32; j++) {
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
        }
        for (j = 0; j < 32; j++) {
            x[j] -= carry * L[j];
        }
        for (i = 0; i < 32; i++) {
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
        }
    }
    function reduce(r) {
        const x = new Float64Array(64);
        for (let i = 0; i < 64; i++) {
            x[i] = r[i];
        }
        for (let i = 0; i < 64; i++) {
            r[i] = 0;
        }
        modL(r, x);
    }
    // Returns 64-byte signature of the message under the 64-byte secret key.
    function sign(secretKey, message) {
        const x = new Float64Array(64);
        const p = [gf(), gf(), gf(), gf()];
        const d = (0, sha512_1.hash)(secretKey.subarray(0, 32));
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        const signature = new Uint8Array(64);
        signature.set(d.subarray(32), 32);
        const hs = new sha512_1.SHA512();
        hs.update(signature.subarray(32));
        hs.update(message);
        const r = hs.digest();
        hs.clean();
        reduce(r);
        scalarbase(p, r);
        pack(signature, p);
        hs.reset();
        hs.update(signature.subarray(0, 32));
        hs.update(secretKey.subarray(32));
        hs.update(message);
        const h = hs.digest();
        reduce(h);
        for (let i = 0; i < 32; i++) {
            x[i] = r[i];
        }
        for (let i = 0; i < 32; i++) {
            for (let j = 0; j < 32; j++) {
                x[i + j] += h[i] * d[j];
            }
        }
        modL(signature.subarray(32), x);
        return signature;
    }
    exports.sign = sign;
    function unpackneg(r, p) {
        const t = gf(),
            chk = gf(),
            num = gf(),
            den = gf(),
            den2 = gf(),
            den4 = gf(),
            den6 = gf();
        set25519(r[2], gf1);
        unpack25519(r[1], p);
        square(num, r[1]);
        mul(den, num, D);
        sub(num, num, r[2]);
        add(den, r[2], den);
        square(den2, den);
        square(den4, den2);
        mul(den6, den4, den2);
        mul(t, den6, num);
        mul(t, t, den);
        pow2523(t, t);
        mul(t, t, num);
        mul(t, t, den);
        mul(t, t, den);
        mul(r[0], t, den);
        square(chk, r[0]);
        mul(chk, chk, den);
        if (neq25519(chk, num)) {
            mul(r[0], r[0], I);
        }
        square(chk, r[0]);
        mul(chk, chk, den);
        if (neq25519(chk, num)) {
            return -1;
        }
        if (par25519(r[0]) === p[31] >> 7) {
            sub(r[0], gf0, r[0]);
        }
        mul(r[3], r[0], r[1]);
        return 0;
    }
    function verify(publicKey, message, signature) {
        const t = new Uint8Array(32);
        const p = [gf(), gf(), gf(), gf()];
        const q = [gf(), gf(), gf(), gf()];
        if (signature.length !== exports.SIGNATURE_LENGTH) {
            throw new Error(`ed25519: signature must be ${exports.SIGNATURE_LENGTH} bytes`);
        }
        if (unpackneg(q, publicKey)) {
            return false;
        }
        const hs = new sha512_1.SHA512();
        hs.update(signature.subarray(0, 32));
        hs.update(publicKey);
        hs.update(message);
        const h = hs.digest();
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, signature.subarray(32));
        edadd(p, q);
        pack(t, p);
        if (verify32(signature, t)) {
            return false;
        }
        return true;
    }
    exports.verify = verify;
    /**
     * Convert Ed25519 public key to X25519 public key.
     *
     * Throws if given an invalid public key.
     */
    function convertPublicKeyToX25519(publicKey) {
        let q = [gf(), gf(), gf(), gf()];
        if (unpackneg(q, publicKey)) {
            throw new Error("Ed25519: invalid public key");
        }
        // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
        let a = gf();
        let b = gf();
        let y = q[1];
        add(a, gf1, y);
        sub(b, gf1, y);
        inv25519(b, b);
        mul(a, a, b);
        let z = new Uint8Array(32);
        pack25519(z, a);
        return z;
    }
    exports.convertPublicKeyToX25519 = convertPublicKeyToX25519;
    /**
     *  Convert Ed25519 secret (private) key to X25519 secret key.
     */
    function convertSecretKeyToX25519(secretKey) {
        const d = (0, sha512_1.hash)(secretKey.subarray(0, 32));
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        const o = new Uint8Array(d.subarray(0, 32));
        (0, wipe_1.wipe)(d);
        return o;
    }
    exports.convertSecretKeyToX25519 = convertSecretKeyToX25519;
})(ed25519);

const JWT_IRIDIUM_ALG = "EdDSA";
const JWT_IRIDIUM_TYP = "JWT";
const JWT_DELIMITER = ".";
const JWT_ENCODING = "base64url";
const JSON_ENCODING = "utf8";
const DATA_ENCODING = "utf8";
const DID_DELIMITER = ":";
const DID_PREFIX = "did";
const DID_METHOD = "key";
const MULTICODEC_ED25519_ENCODING = "base58btc";
const MULTICODEC_ED25519_BASE = "z";
const MULTICODEC_ED25519_HEADER = "K36";
const KEY_PAIR_SEED_LENGTH = 32;

const JSONStringify = (data) => JSON.stringify(data, (_, value) => (typeof value === "bigint" ? value.toString() + "n" : value));
const JSONParse = (json) => {
    const numbersBiggerThanMaxInt =
        /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
    const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
    return JSON.parse(serializedData, (_, value) => {
        const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
        if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));
        return value;
    });
};
function safeJsonParse(value) {
    if (typeof value !== "string") {
        throw new Error(`Cannot safe json parse value of type ${typeof value}`);
    }
    try {
        return JSONParse(value);
    } catch (_a) {
        return value;
    }
}
function safeJsonStringify(value) {
    return typeof value === "string" ? value : JSONStringify(value) || "";
}

function decodeJSON(str) {
    return safeJsonParse(toString(fromString(str, JWT_ENCODING), JSON_ENCODING));
}
function encodeJSON(val) {
    return toString(fromString(safeJsonStringify(val), JSON_ENCODING), JWT_ENCODING);
}
function encodeIss(publicKey) {
    const header = fromString(MULTICODEC_ED25519_HEADER, MULTICODEC_ED25519_ENCODING);
    const multicodec = MULTICODEC_ED25519_BASE + toString(concat([header, publicKey]), MULTICODEC_ED25519_ENCODING);
    return [DID_PREFIX, DID_METHOD, multicodec].join(DID_DELIMITER);
}
function encodeSig(bytes) {
    return toString(bytes, JWT_ENCODING);
}
function decodeSig(encoded) {
    return fromString(encoded, JWT_ENCODING);
}
function encodeData(params) {
    return fromString([encodeJSON(params.header), encodeJSON(params.payload)].join(JWT_DELIMITER), DATA_ENCODING);
}
function encodeJWT(params) {
    return [encodeJSON(params.header), encodeJSON(params.payload), encodeSig(params.signature)].join(JWT_DELIMITER);
}
function decodeJWT(jwt) {
    const params = jwt.split(JWT_DELIMITER);
    const header = decodeJSON(params[0]);
    const payload = decodeJSON(params[1]);
    const signature = decodeSig(params[2]);
    const data = fromString(params.slice(0, 2).join(JWT_DELIMITER), DATA_ENCODING);
    return { header, payload, signature, data };
}

function generateKeyPair(seed = random.randomBytes(KEY_PAIR_SEED_LENGTH)) {
    return ed25519.generateKeyPairFromSeed(seed);
}
async function signJWT(sub, aud, ttl, keyPair, iat = cjs$3.fromMiliseconds(Date.now())) {
    const header = { alg: JWT_IRIDIUM_ALG, typ: JWT_IRIDIUM_TYP };
    const iss = encodeIss(keyPair.publicKey);
    const exp = iat + ttl;
    const payload = { iss, sub, aud, iat, exp };
    const data = encodeData({ header, payload });
    const signature = ed25519.sign(keyPair.secretKey, data);
    return encodeJWT({ header, payload, signature });
}

const C$5 = {
    waku: {
        publish: "waku_publish",
        batchPublish: "waku_batchPublish",
        subscribe: "waku_subscribe",
        batchSubscribe: "waku_batchSubscribe",
        subscription: "waku_subscription",
        unsubscribe: "waku_unsubscribe",
        batchUnsubscribe: "waku_batchUnsubscribe",
        batchFetchMessages: "waku_batchFetchMessages",
    },
    irn: {
        publish: "irn_publish",
        batchPublish: "irn_batchPublish",
        subscribe: "irn_subscribe",
        batchSubscribe: "irn_batchSubscribe",
        subscription: "irn_subscription",
        unsubscribe: "irn_unsubscribe",
        batchUnsubscribe: "irn_batchUnsubscribe",
        batchFetchMessages: "irn_batchFetchMessages",
    },
    iridium: {
        publish: "iridium_publish",
        batchPublish: "iridium_batchPublish",
        subscribe: "iridium_subscribe",
        batchSubscribe: "iridium_batchSubscribe",
        subscription: "iridium_subscription",
        unsubscribe: "iridium_unsubscribe",
        batchUnsubscribe: "iridium_batchUnsubscribe",
        batchFetchMessages: "iridium_batchFetchMessages",
    },
};

const Rr$1 = ":";
function mn$1(e) {
    const [t, r] = e.split(Rr$1);
    return { namespace: t, reference: r };
}
function Jo$1(e, t = []) {
    const r = [];
    return (
        Object.keys(e).forEach((i) => {
            if (t.length && !t.includes(i)) return;
            const n = e[i];
            r.push(...n.accounts);
        }),
        r
    );
}
function Or$1(e, t) {
    return e.includes(":") ? [e] : t.chains || [];
}
var Vo$1 = Object.defineProperty,
    Mn = Object.getOwnPropertySymbols,
    Wo = Object.prototype.hasOwnProperty,
    Xo$1 = Object.prototype.propertyIsEnumerable,
    En$1 = (e, t, r) => (t in e ? Vo$1(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : (e[t] = r)),
    Sn$1 = (e, t) => {
        for (var r in t || (t = {})) Wo.call(t, r) && En$1(e, r, t[r]);
        if (Mn) for (var r of Mn(t)) Xo$1.call(t, r) && En$1(e, r, t[r]);
        return e;
    };
const Nn = "ReactNative",
    qt$2 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" },
    _n$1 = "js";
function bi() {
    return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function rr$2() {
    return !getDocument_1() && !!getNavigator_1() && navigator.product === Nn;
}
function gr$1() {
    return !bi() && !!getNavigator_1() && !!getDocument_1();
}
function We$2() {
    return rr$2() ? qt$2.reactNative : bi() ? qt$2.node : gr$1() ? qt$2.browser : qt$2.unknown;
}
function ts() {
    var e;
    try {
        return rr$2() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u"
            ? (e = global.Application) == null
                ? void 0
                : e.applicationId
            : void 0;
    } catch {
        return;
    }
}
function Bn(e, t) {
    let r = queryString.parse(e);
    return (r = Sn$1(Sn$1({}, r), t)), (e = queryString.stringify(r)), e;
}
function es() {
    return getWindowMetadata_1() || { name: "", description: "", url: "", icons: [""] };
}
function Cn$1() {
    if (We$2() === qt$2.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
        const { OS: r, Version: i } = global.Platform;
        return [r, i].join("-");
    }
    const e = detect();
    if (e === null) return "unknown";
    const t = e.os ? e.os.replace(" ", "").toLowerCase() : "unknown";
    return e.type === "browser" ? [t, e.name, e.version].join("-") : [t, e.version].join("-");
}
function Rn() {
    var e;
    const t = We$2();
    return t === qt$2.browser ? [t, ((e = getLocation_1()) == null ? void 0 : e.host) || "unknown"].join(":") : t;
}
function On(e, t, r) {
    const i = Cn$1(),
        n = Rn();
    return [[e, t].join("-"), [_n$1, r].join("-"), i, n].join("/");
}
function is({ protocol: e, version: t, relayUrl: r, sdkVersion: i, auth: n, projectId: o, useOnCloseEvent: h, bundleId: p }) {
    const A = r.split("?"),
        v = On(e, t, i),
        w = { auth: n, ua: v, projectId: o, useOnCloseEvent: h || void 0, origin: p || void 0 },
        y = Bn(A[1] || "", w);
    return A[0] + "?" + y;
}
function _e$4(e, t) {
    return e.filter((r) => t.includes(r)).length === e.length;
}
function ss(e) {
    return Object.fromEntries(e.entries());
}
function as(e) {
    return new Map(Object.entries(e));
}
function ls(e = cjs$3.FIVE_MINUTES, t) {
    const r = cjs$3.toMiliseconds(e || cjs$3.FIVE_MINUTES);
    let i, n, o;
    return {
        resolve: (h) => {
            o && i && (clearTimeout(o), i(h));
        },
        reject: (h) => {
            o && n && (clearTimeout(o), n(h));
        },
        done: () =>
            new Promise((h, p) => {
                (o = setTimeout(() => {
                    p(new Error(t));
                }, r)),
                    (i = h),
                    (n = p);
            }),
    };
}
function ds(e, t, r) {
    return new Promise(async (i, n) => {
        const o = setTimeout(() => n(new Error(r)), t);
        try {
            const h = await e;
            i(h);
        } catch (h) {
            n(h);
        }
        clearTimeout(o);
    });
}
function yi$1(e, t) {
    if (typeof t == "string" && t.startsWith(`${e}:`)) return t;
    if (e.toLowerCase() === "topic") {
        if (typeof t != "string") throw new Error('Value must be "string" for expirer target type: topic');
        return `topic:${t}`;
    } else if (e.toLowerCase() === "id") {
        if (typeof t != "number") throw new Error('Value must be "number" for expirer target type: id');
        return `id:${t}`;
    }
    throw new Error(`Unknown expirer target type: ${e}`);
}
function ps(e) {
    return yi$1("topic", e);
}
function vs$2(e) {
    return yi$1("id", e);
}
function gs$1(e) {
    const [t, r] = e.split(":"),
        i = { id: void 0, topic: void 0 };
    if (t === "topic" && typeof r == "string") i.topic = r;
    else if (t === "id" && Number.isInteger(Number(r))) i.id = Number(r);
    else throw new Error(`Invalid target, expected id:number or topic:string, got ${t}:${r}`);
    return i;
}
function ms$2(e, t) {
    return cjs$3.fromMiliseconds(Date.now() + cjs$3.toMiliseconds(e));
}
function As$1(e) {
    return Date.now() >= cjs$3.toMiliseconds(e);
}
function bs$1(e, t) {
    return `${e}${t ? `:${t}` : ""}`;
}
function me$2(e = [], t = []) {
    return [...new Set([...e, ...t])];
}
async function ys$2({ id: e, topic: t, wcDeepLink: r }) {
    var i;
    try {
        if (!r) return;
        const n = typeof r == "string" ? JSON.parse(r) : r;
        let o = n?.href;
        if (typeof o != "string") return;
        o.endsWith("/") && (o = o.slice(0, -1));
        const h = `${o}/wc?requestId=${e}&sessionTopic=${t}`,
            p = We$2();
        if (p === qt$2.browser) {
            if (!((i = getDocument_1()) != null && i.hasFocus())) {
                console.warn("Document does not have focus, skipping deeplink.");
                return;
            }
            h.startsWith("https://") || h.startsWith("http://")
                ? window.open(h, "_blank", "noreferrer noopener")
                : window.open(h, "_self", "noreferrer noopener");
        } else p === qt$2.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && (await global.Linking.openURL(h));
    } catch (n) {
        console.error(n);
    }
}
async function ws$2(e, t) {
    try {
        return (await e.getItem(t)) || (gr$1() ? localStorage.getItem(t) : void 0);
    } catch (r) {
        console.error(r);
    }
}
function xs$1(e, t) {
    if (!e.includes(t)) return null;
    const r = e.split(/([&,?,=])/),
        i = r.indexOf(t);
    return r[i + 2];
}
function Ms$1() {
    return typeof crypto < "u" && crypto != null && crypto.randomUUID
        ? crypto.randomUUID()
        : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e) => {
              const t = (Math.random() * 16) | 0;
              return (e === "x" ? t : (t & 3) | 8).toString(16);
          });
}
var Tn$1 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Es$2(e) {
    var t = e.default;
    if (typeof t == "function") {
        var r = function () {
            return t.apply(this, arguments);
        };
        r.prototype = t.prototype;
    } else r = {};
    return (
        Object.defineProperty(r, "__esModule", { value: !0 }),
        Object.keys(e).forEach(function (i) {
            var n = Object.getOwnPropertyDescriptor(e, i);
            Object.defineProperty(
                r,
                i,
                n.get
                    ? n
                    : {
                          enumerable: !0,
                          get: function () {
                              return e[i];
                          },
                      }
            );
        }),
        r
    );
}
var Un = { exports: {} };
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */ (function (e) {
    (function () {
        var t = "input is invalid type",
            r = "finalize already called",
            i = typeof window == "object",
            n = i ? window : {};
        n.JS_SHA3_NO_WINDOW && (i = !1);
        var o = !i && typeof self == "object",
            h = !n.JS_SHA3_NO_NODE_JS && typeof process == "object" && process.versions && process.versions.node;
        h ? (n = Tn$1) : o && (n = self);
        var p = !n.JS_SHA3_NO_COMMON_JS && !0 && e.exports,
            A = !n.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer < "u",
            v = "0123456789abcdef".split(""),
            w = [31, 7936, 2031616, 520093696],
            y = [4, 1024, 262144, 67108864],
            S = [1, 256, 65536, 16777216],
            I = [6, 1536, 393216, 100663296],
            N = [0, 8, 16, 24],
            C = [
                1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0,
                2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778,
                0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648,
            ],
            F = [224, 256, 384, 512],
            U = [128, 256],
            J = ["hex", "buffer", "arrayBuffer", "array", "digest"],
            Bt = { 128: 168, 256: 136 };
        (n.JS_SHA3_NO_NODE_JS || !Array.isArray) &&
            (Array.isArray = function (u) {
                return Object.prototype.toString.call(u) === "[object Array]";
            }),
            A &&
                (n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) &&
                (ArrayBuffer.isView = function (u) {
                    return typeof u == "object" && u.buffer && u.buffer.constructor === ArrayBuffer;
                });
        for (
            var G = function (u, E, _) {
                    return function (B) {
                        return new s(u, E, u).update(B)[_]();
                    };
                },
                H = function (u, E, _) {
                    return function (B, R) {
                        return new s(u, E, R).update(B)[_]();
                    };
                },
                L = function (u, E, _) {
                    return function (B, R, T, P) {
                        return f["cshake" + u].update(B, R, T, P)[_]();
                    };
                },
                Pt = function (u, E, _) {
                    return function (B, R, T, P) {
                        return f["kmac" + u].update(B, R, T, P)[_]();
                    };
                },
                W = function (u, E, _, B) {
                    for (var R = 0; R < J.length; ++R) {
                        var T = J[R];
                        u[T] = E(_, B, T);
                    }
                    return u;
                },
                Rt = function (u, E) {
                    var _ = G(u, E, "hex");
                    return (
                        (_.create = function () {
                            return new s(u, E, u);
                        }),
                        (_.update = function (B) {
                            return _.create().update(B);
                        }),
                        W(_, G, u, E)
                    );
                },
                Vt = function (u, E) {
                    var _ = H(u, E, "hex");
                    return (
                        (_.create = function (B) {
                            return new s(u, E, B);
                        }),
                        (_.update = function (B, R) {
                            return _.create(R).update(B);
                        }),
                        W(_, H, u, E)
                    );
                },
                Y = function (u, E) {
                    var _ = Bt[u],
                        B = L(u, E, "hex");
                    return (
                        (B.create = function (R, T, P) {
                            return !T && !P ? f["shake" + u].create(R) : new s(u, E, R).bytepad([T, P], _);
                        }),
                        (B.update = function (R, T, P, O) {
                            return B.create(T, P, O).update(R);
                        }),
                        W(B, L, u, E)
                    );
                },
                Wt = function (u, E) {
                    var _ = Bt[u],
                        B = Pt(u, E, "hex");
                    return (
                        (B.create = function (R, T, P) {
                            return new g(u, E, T).bytepad(["KMAC", P], _).bytepad([R], _);
                        }),
                        (B.update = function (R, T, P, O) {
                            return B.create(R, P, O).update(T);
                        }),
                        W(B, Pt, u, E)
                    );
                },
                b = [
                    { name: "keccak", padding: S, bits: F, createMethod: Rt },
                    { name: "sha3", padding: I, bits: F, createMethod: Rt },
                    { name: "shake", padding: w, bits: U, createMethod: Vt },
                    { name: "cshake", padding: y, bits: U, createMethod: Y },
                    { name: "kmac", padding: y, bits: U, createMethod: Wt },
                ],
                f = {},
                a = [],
                c = 0;
            c < b.length;
            ++c
        )
            for (var d = b[c], m = d.bits, x = 0; x < m.length; ++x) {
                var M = d.name + "_" + m[x];
                if ((a.push(M), (f[M] = d.createMethod(m[x], d.padding)), d.name !== "sha3")) {
                    var l = d.name + m[x];
                    a.push(l), (f[l] = f[M]);
                }
            }
        function s(u, E, _) {
            (this.blocks = []),
                (this.s = []),
                (this.padding = E),
                (this.outputBits = _),
                (this.reset = !0),
                (this.finalized = !1),
                (this.block = 0),
                (this.start = 0),
                (this.blockCount = (1600 - (u << 1)) >> 5),
                (this.byteCount = this.blockCount << 2),
                (this.outputBlocks = _ >> 5),
                (this.extraBytes = (_ & 31) >> 3);
            for (var B = 0; B < 50; ++B) this.s[B] = 0;
        }
        (s.prototype.update = function (u) {
            if (this.finalized) throw new Error(r);
            var E,
                _ = typeof u;
            if (_ !== "string") {
                if (_ === "object") {
                    if (u === null) throw new Error(t);
                    if (A && u.constructor === ArrayBuffer) u = new Uint8Array(u);
                    else if (!Array.isArray(u) && (!A || !ArrayBuffer.isView(u))) throw new Error(t);
                } else throw new Error(t);
                E = !0;
            }
            for (var B = this.blocks, R = this.byteCount, T = u.length, P = this.blockCount, O = 0, Ct = this.s, D, q; O < T; ) {
                if (this.reset) for (this.reset = !1, B[0] = this.block, D = 1; D < P + 1; ++D) B[D] = 0;
                if (E) for (D = this.start; O < T && D < R; ++O) B[D >> 2] |= u[O] << N[D++ & 3];
                else
                    for (D = this.start; O < T && D < R; ++O)
                        (q = u.charCodeAt(O)),
                            q < 128
                                ? (B[D >> 2] |= q << N[D++ & 3])
                                : q < 2048
                                ? ((B[D >> 2] |= (192 | (q >> 6)) << N[D++ & 3]), (B[D >> 2] |= (128 | (q & 63)) << N[D++ & 3]))
                                : q < 55296 || q >= 57344
                                ? ((B[D >> 2] |= (224 | (q >> 12)) << N[D++ & 3]),
                                  (B[D >> 2] |= (128 | ((q >> 6) & 63)) << N[D++ & 3]),
                                  (B[D >> 2] |= (128 | (q & 63)) << N[D++ & 3]))
                                : ((q = 65536 + (((q & 1023) << 10) | (u.charCodeAt(++O) & 1023))),
                                  (B[D >> 2] |= (240 | (q >> 18)) << N[D++ & 3]),
                                  (B[D >> 2] |= (128 | ((q >> 12) & 63)) << N[D++ & 3]),
                                  (B[D >> 2] |= (128 | ((q >> 6) & 63)) << N[D++ & 3]),
                                  (B[D >> 2] |= (128 | (q & 63)) << N[D++ & 3]));
                if (((this.lastByteIndex = D), D >= R)) {
                    for (this.start = D - R, this.block = B[P], D = 0; D < P; ++D) Ct[D] ^= B[D];
                    k(Ct), (this.reset = !0);
                } else this.start = D;
            }
            return this;
        }),
            (s.prototype.encode = function (u, E) {
                var _ = u & 255,
                    B = 1,
                    R = [_];
                for (u = u >> 8, _ = u & 255; _ > 0; ) R.unshift(_), (u = u >> 8), (_ = u & 255), ++B;
                return E ? R.push(B) : R.unshift(B), this.update(R), R.length;
            }),
            (s.prototype.encodeString = function (u) {
                var E,
                    _ = typeof u;
                if (_ !== "string") {
                    if (_ === "object") {
                        if (u === null) throw new Error(t);
                        if (A && u.constructor === ArrayBuffer) u = new Uint8Array(u);
                        else if (!Array.isArray(u) && (!A || !ArrayBuffer.isView(u))) throw new Error(t);
                    } else throw new Error(t);
                    E = !0;
                }
                var B = 0,
                    R = u.length;
                if (E) B = R;
                else
                    for (var T = 0; T < u.length; ++T) {
                        var P = u.charCodeAt(T);
                        P < 128
                            ? (B += 1)
                            : P < 2048
                            ? (B += 2)
                            : P < 55296 || P >= 57344
                            ? (B += 3)
                            : ((P = 65536 + (((P & 1023) << 10) | (u.charCodeAt(++T) & 1023))), (B += 4));
                    }
                return (B += this.encode(B * 8)), this.update(u), B;
            }),
            (s.prototype.bytepad = function (u, E) {
                for (var _ = this.encode(E), B = 0; B < u.length; ++B) _ += this.encodeString(u[B]);
                var R = E - (_ % E),
                    T = [];
                return (T.length = R), this.update(T), this;
            }),
            (s.prototype.finalize = function () {
                if (!this.finalized) {
                    this.finalized = !0;
                    var u = this.blocks,
                        E = this.lastByteIndex,
                        _ = this.blockCount,
                        B = this.s;
                    if (((u[E >> 2] |= this.padding[E & 3]), this.lastByteIndex === this.byteCount)) for (u[0] = u[_], E = 1; E < _ + 1; ++E) u[E] = 0;
                    for (u[_ - 1] |= 2147483648, E = 0; E < _; ++E) B[E] ^= u[E];
                    k(B);
                }
            }),
            (s.prototype.toString = s.prototype.hex =
                function () {
                    this.finalize();
                    for (var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = "", O; T < _; ) {
                        for (R = 0; R < u && T < _; ++R, ++T)
                            (O = E[R]),
                                (P +=
                                    v[(O >> 4) & 15] +
                                    v[O & 15] +
                                    v[(O >> 12) & 15] +
                                    v[(O >> 8) & 15] +
                                    v[(O >> 20) & 15] +
                                    v[(O >> 16) & 15] +
                                    v[(O >> 28) & 15] +
                                    v[(O >> 24) & 15]);
                        T % u === 0 && (k(E), (R = 0));
                    }
                    return (
                        B &&
                            ((O = E[R]),
                            (P += v[(O >> 4) & 15] + v[O & 15]),
                            B > 1 && (P += v[(O >> 12) & 15] + v[(O >> 8) & 15]),
                            B > 2 && (P += v[(O >> 20) & 15] + v[(O >> 16) & 15])),
                        P
                    );
                }),
            (s.prototype.arrayBuffer = function () {
                this.finalize();
                var u = this.blockCount,
                    E = this.s,
                    _ = this.outputBlocks,
                    B = this.extraBytes,
                    R = 0,
                    T = 0,
                    P = this.outputBits >> 3,
                    O;
                B ? (O = new ArrayBuffer((_ + 1) << 2)) : (O = new ArrayBuffer(P));
                for (var Ct = new Uint32Array(O); T < _; ) {
                    for (R = 0; R < u && T < _; ++R, ++T) Ct[T] = E[R];
                    T % u === 0 && k(E);
                }
                return B && ((Ct[R] = E[R]), (O = O.slice(0, P))), O;
            }),
            (s.prototype.buffer = s.prototype.arrayBuffer),
            (s.prototype.digest = s.prototype.array =
                function () {
                    this.finalize();
                    for (var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = [], O, Ct; T < _; ) {
                        for (R = 0; R < u && T < _; ++R, ++T)
                            (O = T << 2),
                                (Ct = E[R]),
                                (P[O] = Ct & 255),
                                (P[O + 1] = (Ct >> 8) & 255),
                                (P[O + 2] = (Ct >> 16) & 255),
                                (P[O + 3] = (Ct >> 24) & 255);
                        T % u === 0 && k(E);
                    }
                    return (
                        B && ((O = T << 2), (Ct = E[R]), (P[O] = Ct & 255), B > 1 && (P[O + 1] = (Ct >> 8) & 255), B > 2 && (P[O + 2] = (Ct >> 16) & 255)), P
                    );
                });
        function g(u, E, _) {
            s.call(this, u, E, _);
        }
        (g.prototype = new s()),
            (g.prototype.finalize = function () {
                return this.encode(this.outputBits, !0), s.prototype.finalize.call(this);
            });
        var k = function (u) {
            var E,
                _,
                B,
                R,
                T,
                P,
                O,
                Ct,
                D,
                q,
                De,
                X,
                Z,
                Fe,
                $,
                tt,
                Te,
                et,
                rt,
                Ue,
                it,
                nt,
                ke,
                ft,
                ot,
                qe,
                st,
                at,
                Ke,
                ut,
                ht,
                He,
                ct,
                lt,
                Le,
                dt,
                pt,
                ze,
                vt,
                gt,
                je,
                mt,
                At,
                Qe,
                bt,
                yt,
                Je,
                wt,
                xt,
                Ge,
                Mt,
                Et,
                Ye,
                St,
                Nt,
                Ve,
                It,
                _t,
                Me,
                Ee,
                Se,
                Ne,
                Ie;
            for (B = 0; B < 48; B += 2)
                (R = u[0] ^ u[10] ^ u[20] ^ u[30] ^ u[40]),
                    (T = u[1] ^ u[11] ^ u[21] ^ u[31] ^ u[41]),
                    (P = u[2] ^ u[12] ^ u[22] ^ u[32] ^ u[42]),
                    (O = u[3] ^ u[13] ^ u[23] ^ u[33] ^ u[43]),
                    (Ct = u[4] ^ u[14] ^ u[24] ^ u[34] ^ u[44]),
                    (D = u[5] ^ u[15] ^ u[25] ^ u[35] ^ u[45]),
                    (q = u[6] ^ u[16] ^ u[26] ^ u[36] ^ u[46]),
                    (De = u[7] ^ u[17] ^ u[27] ^ u[37] ^ u[47]),
                    (X = u[8] ^ u[18] ^ u[28] ^ u[38] ^ u[48]),
                    (Z = u[9] ^ u[19] ^ u[29] ^ u[39] ^ u[49]),
                    (E = X ^ ((P << 1) | (O >>> 31))),
                    (_ = Z ^ ((O << 1) | (P >>> 31))),
                    (u[0] ^= E),
                    (u[1] ^= _),
                    (u[10] ^= E),
                    (u[11] ^= _),
                    (u[20] ^= E),
                    (u[21] ^= _),
                    (u[30] ^= E),
                    (u[31] ^= _),
                    (u[40] ^= E),
                    (u[41] ^= _),
                    (E = R ^ ((Ct << 1) | (D >>> 31))),
                    (_ = T ^ ((D << 1) | (Ct >>> 31))),
                    (u[2] ^= E),
                    (u[3] ^= _),
                    (u[12] ^= E),
                    (u[13] ^= _),
                    (u[22] ^= E),
                    (u[23] ^= _),
                    (u[32] ^= E),
                    (u[33] ^= _),
                    (u[42] ^= E),
                    (u[43] ^= _),
                    (E = P ^ ((q << 1) | (De >>> 31))),
                    (_ = O ^ ((De << 1) | (q >>> 31))),
                    (u[4] ^= E),
                    (u[5] ^= _),
                    (u[14] ^= E),
                    (u[15] ^= _),
                    (u[24] ^= E),
                    (u[25] ^= _),
                    (u[34] ^= E),
                    (u[35] ^= _),
                    (u[44] ^= E),
                    (u[45] ^= _),
                    (E = Ct ^ ((X << 1) | (Z >>> 31))),
                    (_ = D ^ ((Z << 1) | (X >>> 31))),
                    (u[6] ^= E),
                    (u[7] ^= _),
                    (u[16] ^= E),
                    (u[17] ^= _),
                    (u[26] ^= E),
                    (u[27] ^= _),
                    (u[36] ^= E),
                    (u[37] ^= _),
                    (u[46] ^= E),
                    (u[47] ^= _),
                    (E = q ^ ((R << 1) | (T >>> 31))),
                    (_ = De ^ ((T << 1) | (R >>> 31))),
                    (u[8] ^= E),
                    (u[9] ^= _),
                    (u[18] ^= E),
                    (u[19] ^= _),
                    (u[28] ^= E),
                    (u[29] ^= _),
                    (u[38] ^= E),
                    (u[39] ^= _),
                    (u[48] ^= E),
                    (u[49] ^= _),
                    (Fe = u[0]),
                    ($ = u[1]),
                    (yt = (u[11] << 4) | (u[10] >>> 28)),
                    (Je = (u[10] << 4) | (u[11] >>> 28)),
                    (at = (u[20] << 3) | (u[21] >>> 29)),
                    (Ke = (u[21] << 3) | (u[20] >>> 29)),
                    (Ee = (u[31] << 9) | (u[30] >>> 23)),
                    (Se = (u[30] << 9) | (u[31] >>> 23)),
                    (mt = (u[40] << 18) | (u[41] >>> 14)),
                    (At = (u[41] << 18) | (u[40] >>> 14)),
                    (lt = (u[2] << 1) | (u[3] >>> 31)),
                    (Le = (u[3] << 1) | (u[2] >>> 31)),
                    (tt = (u[13] << 12) | (u[12] >>> 20)),
                    (Te = (u[12] << 12) | (u[13] >>> 20)),
                    (wt = (u[22] << 10) | (u[23] >>> 22)),
                    (xt = (u[23] << 10) | (u[22] >>> 22)),
                    (ut = (u[33] << 13) | (u[32] >>> 19)),
                    (ht = (u[32] << 13) | (u[33] >>> 19)),
                    (Ne = (u[42] << 2) | (u[43] >>> 30)),
                    (Ie = (u[43] << 2) | (u[42] >>> 30)),
                    (St = (u[5] << 30) | (u[4] >>> 2)),
                    (Nt = (u[4] << 30) | (u[5] >>> 2)),
                    (dt = (u[14] << 6) | (u[15] >>> 26)),
                    (pt = (u[15] << 6) | (u[14] >>> 26)),
                    (et = (u[25] << 11) | (u[24] >>> 21)),
                    (rt = (u[24] << 11) | (u[25] >>> 21)),
                    (Ge = (u[34] << 15) | (u[35] >>> 17)),
                    (Mt = (u[35] << 15) | (u[34] >>> 17)),
                    (He = (u[45] << 29) | (u[44] >>> 3)),
                    (ct = (u[44] << 29) | (u[45] >>> 3)),
                    (ft = (u[6] << 28) | (u[7] >>> 4)),
                    (ot = (u[7] << 28) | (u[6] >>> 4)),
                    (Ve = (u[17] << 23) | (u[16] >>> 9)),
                    (It = (u[16] << 23) | (u[17] >>> 9)),
                    (ze = (u[26] << 25) | (u[27] >>> 7)),
                    (vt = (u[27] << 25) | (u[26] >>> 7)),
                    (Ue = (u[36] << 21) | (u[37] >>> 11)),
                    (it = (u[37] << 21) | (u[36] >>> 11)),
                    (Et = (u[47] << 24) | (u[46] >>> 8)),
                    (Ye = (u[46] << 24) | (u[47] >>> 8)),
                    (Qe = (u[8] << 27) | (u[9] >>> 5)),
                    (bt = (u[9] << 27) | (u[8] >>> 5)),
                    (qe = (u[18] << 20) | (u[19] >>> 12)),
                    (st = (u[19] << 20) | (u[18] >>> 12)),
                    (_t = (u[29] << 7) | (u[28] >>> 25)),
                    (Me = (u[28] << 7) | (u[29] >>> 25)),
                    (gt = (u[38] << 8) | (u[39] >>> 24)),
                    (je = (u[39] << 8) | (u[38] >>> 24)),
                    (nt = (u[48] << 14) | (u[49] >>> 18)),
                    (ke = (u[49] << 14) | (u[48] >>> 18)),
                    (u[0] = Fe ^ (~tt & et)),
                    (u[1] = $ ^ (~Te & rt)),
                    (u[10] = ft ^ (~qe & at)),
                    (u[11] = ot ^ (~st & Ke)),
                    (u[20] = lt ^ (~dt & ze)),
                    (u[21] = Le ^ (~pt & vt)),
                    (u[30] = Qe ^ (~yt & wt)),
                    (u[31] = bt ^ (~Je & xt)),
                    (u[40] = St ^ (~Ve & _t)),
                    (u[41] = Nt ^ (~It & Me)),
                    (u[2] = tt ^ (~et & Ue)),
                    (u[3] = Te ^ (~rt & it)),
                    (u[12] = qe ^ (~at & ut)),
                    (u[13] = st ^ (~Ke & ht)),
                    (u[22] = dt ^ (~ze & gt)),
                    (u[23] = pt ^ (~vt & je)),
                    (u[32] = yt ^ (~wt & Ge)),
                    (u[33] = Je ^ (~xt & Mt)),
                    (u[42] = Ve ^ (~_t & Ee)),
                    (u[43] = It ^ (~Me & Se)),
                    (u[4] = et ^ (~Ue & nt)),
                    (u[5] = rt ^ (~it & ke)),
                    (u[14] = at ^ (~ut & He)),
                    (u[15] = Ke ^ (~ht & ct)),
                    (u[24] = ze ^ (~gt & mt)),
                    (u[25] = vt ^ (~je & At)),
                    (u[34] = wt ^ (~Ge & Et)),
                    (u[35] = xt ^ (~Mt & Ye)),
                    (u[44] = _t ^ (~Ee & Ne)),
                    (u[45] = Me ^ (~Se & Ie)),
                    (u[6] = Ue ^ (~nt & Fe)),
                    (u[7] = it ^ (~ke & $)),
                    (u[16] = ut ^ (~He & ft)),
                    (u[17] = ht ^ (~ct & ot)),
                    (u[26] = gt ^ (~mt & lt)),
                    (u[27] = je ^ (~At & Le)),
                    (u[36] = Ge ^ (~Et & Qe)),
                    (u[37] = Mt ^ (~Ye & bt)),
                    (u[46] = Ee ^ (~Ne & St)),
                    (u[47] = Se ^ (~Ie & Nt)),
                    (u[8] = nt ^ (~Fe & tt)),
                    (u[9] = ke ^ (~$ & Te)),
                    (u[18] = He ^ (~ft & qe)),
                    (u[19] = ct ^ (~ot & st)),
                    (u[28] = mt ^ (~lt & dt)),
                    (u[29] = At ^ (~Le & pt)),
                    (u[38] = Et ^ (~Qe & yt)),
                    (u[39] = Ye ^ (~bt & Je)),
                    (u[48] = Ne ^ (~St & Ve)),
                    (u[49] = Ie ^ (~Nt & It)),
                    (u[0] ^= C[B]),
                    (u[1] ^= C[B + 1]);
        };
        if (p) e.exports = f;
        else for (c = 0; c < a.length; ++c) n[a[c]] = f[a[c]];
    })();
})(Un);
var Ss$2 = Un.exports;
const Ns$1 = "logger/5.7.0";
let kn = !1,
    qn = !1;
const Dr$1 = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
let Kn$1 = Dr$1.default,
    xi = null;
function Is$2() {
    try {
        const e = [];
        if (
            (["NFD", "NFC", "NFKD", "NFKC"].forEach((t) => {
                try {
                    if ("test".normalize(t) !== "test") throw new Error("bad normalize");
                } catch {
                    e.push(t);
                }
            }),
            e.length)
        )
            throw new Error("missing " + e.join(", "));
        if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
    } catch (e) {
        return e.message;
    }
    return null;
}
const Hn = Is$2();
var Mi$1;
(function (e) {
    (e.DEBUG = "DEBUG"), (e.INFO = "INFO"), (e.WARNING = "WARNING"), (e.ERROR = "ERROR"), (e.OFF = "OFF");
})(Mi$1 || (Mi$1 = {}));
var re$1;
(function (e) {
    (e.UNKNOWN_ERROR = "UNKNOWN_ERROR"),
        (e.NOT_IMPLEMENTED = "NOT_IMPLEMENTED"),
        (e.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION"),
        (e.NETWORK_ERROR = "NETWORK_ERROR"),
        (e.SERVER_ERROR = "SERVER_ERROR"),
        (e.TIMEOUT = "TIMEOUT"),
        (e.BUFFER_OVERRUN = "BUFFER_OVERRUN"),
        (e.NUMERIC_FAULT = "NUMERIC_FAULT"),
        (e.MISSING_NEW = "MISSING_NEW"),
        (e.INVALID_ARGUMENT = "INVALID_ARGUMENT"),
        (e.MISSING_ARGUMENT = "MISSING_ARGUMENT"),
        (e.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT"),
        (e.CALL_EXCEPTION = "CALL_EXCEPTION"),
        (e.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS"),
        (e.NONCE_EXPIRED = "NONCE_EXPIRED"),
        (e.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED"),
        (e.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT"),
        (e.TRANSACTION_REPLACED = "TRANSACTION_REPLACED"),
        (e.ACTION_REJECTED = "ACTION_REJECTED");
})(re$1 || (re$1 = {}));
const Ln = "0123456789abcdef";
let z$6 = class z {
    constructor(t) {
        Object.defineProperty(this, "version", { enumerable: !0, value: t, writable: !1 });
    }
    _log(t, r) {
        const i = t.toLowerCase();
        Dr$1[i] == null && this.throwArgumentError("invalid log level name", "logLevel", t), !(Kn$1 > Dr$1[i]) && console.log.apply(console, r);
    }
    debug(...t) {
        this._log(z.levels.DEBUG, t);
    }
    info(...t) {
        this._log(z.levels.INFO, t);
    }
    warn(...t) {
        this._log(z.levels.WARNING, t);
    }
    makeError(t, r, i) {
        if (qn) return this.makeError("censored error", r, {});
        r || (r = z.errors.UNKNOWN_ERROR), i || (i = {});
        const n = [];
        Object.keys(i).forEach((A) => {
            const v = i[A];
            try {
                if (v instanceof Uint8Array) {
                    let w = "";
                    for (let y = 0; y < v.length; y++) (w += Ln[v[y] >> 4]), (w += Ln[v[y] & 15]);
                    n.push(A + "=Uint8Array(0x" + w + ")");
                } else n.push(A + "=" + JSON.stringify(v));
            } catch {
                n.push(A + "=" + JSON.stringify(i[A].toString()));
            }
        }),
            n.push(`code=${r}`),
            n.push(`version=${this.version}`);
        const o = t;
        let h = "";
        switch (r) {
            case re$1.NUMERIC_FAULT: {
                h = "NUMERIC_FAULT";
                const A = t;
                switch (A) {
                    case "overflow":
                    case "underflow":
                    case "division-by-zero":
                        h += "-" + A;
                        break;
                    case "negative-power":
                    case "negative-width":
                        h += "-unsupported";
                        break;
                    case "unbound-bitwise-result":
                        h += "-unbound-result";
                        break;
                }
                break;
            }
            case re$1.CALL_EXCEPTION:
            case re$1.INSUFFICIENT_FUNDS:
            case re$1.MISSING_NEW:
            case re$1.NONCE_EXPIRED:
            case re$1.REPLACEMENT_UNDERPRICED:
            case re$1.TRANSACTION_REPLACED:
            case re$1.UNPREDICTABLE_GAS_LIMIT:
                h = r;
                break;
        }
        h && (t += " [ See: https://links.ethers.org/v5-errors-" + h + " ]"), n.length && (t += " (" + n.join(", ") + ")");
        const p = new Error(t);
        return (
            (p.reason = o),
            (p.code = r),
            Object.keys(i).forEach(function (A) {
                p[A] = i[A];
            }),
            p
        );
    }
    throwError(t, r, i) {
        throw this.makeError(t, r, i);
    }
    throwArgumentError(t, r, i) {
        return this.throwError(t, z.errors.INVALID_ARGUMENT, { argument: r, value: i });
    }
    assert(t, r, i, n) {
        t || this.throwError(r, i, n);
    }
    assertArgument(t, r, i, n) {
        t || this.throwArgumentError(r, i, n);
    }
    checkNormalize(t) {
        Hn &&
            this.throwError("platform missing String.prototype.normalize", z.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: Hn,
            });
    }
    checkSafeUint53(t, r) {
        typeof t == "number" &&
            (r == null && (r = "value not safe"),
            (t < 0 || t >= 9007199254740991) &&
                this.throwError(r, z.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "out-of-safe-range", value: t }),
            t % 1 && this.throwError(r, z.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "non-integer", value: t }));
    }
    checkArgumentCount(t, r, i) {
        i ? (i = ": " + i) : (i = ""),
            t < r && this.throwError("missing argument" + i, z.errors.MISSING_ARGUMENT, { count: t, expectedCount: r }),
            t > r && this.throwError("too many arguments" + i, z.errors.UNEXPECTED_ARGUMENT, { count: t, expectedCount: r });
    }
    checkNew(t, r) {
        (t === Object || t == null) && this.throwError("missing new", z.errors.MISSING_NEW, { name: r.name });
    }
    checkAbstract(t, r) {
        t === r
            ? this.throwError("cannot instantiate abstract class " + JSON.stringify(r.name) + " directly; use a sub-class", z.errors.UNSUPPORTED_OPERATION, {
                  name: t.name,
                  operation: "new",
              })
            : (t === Object || t == null) && this.throwError("missing new", z.errors.MISSING_NEW, { name: r.name });
    }
    static globalLogger() {
        return xi || (xi = new z(Ns$1)), xi;
    }
    static setCensorship(t, r) {
        if (
            (!t && r && this.globalLogger().throwError("cannot permanently disable censorship", z.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" }),
            kn)
        ) {
            if (!t) return;
            this.globalLogger().throwError("error censorship permanent", z.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" });
        }
        (qn = !!t), (kn = !!r);
    }
    static setLogLevel(t) {
        const r = Dr$1[t.toLowerCase()];
        if (r == null) {
            z.globalLogger().warn("invalid log level - " + t);
            return;
        }
        Kn$1 = r;
    }
    static from(t) {
        return new z(t);
    }
};
(z$6.errors = re$1), (z$6.levels = Mi$1);
const _s$2 = "bytes/5.7.0",
    Dt$2 = new z$6(_s$2);
function zn(e) {
    return !!e.toHexString;
}
function ir$2(e) {
    return (
        e.slice ||
            (e.slice = function () {
                const t = Array.prototype.slice.call(arguments);
                return ir$2(new Uint8Array(Array.prototype.slice.apply(e, t)));
            }),
        e
    );
}
function Bs$1(e) {
    return (Jt$2(e) && !(e.length % 2)) || nr$2(e);
}
function jn(e) {
    return typeof e == "number" && e == e && e % 1 === 0;
}
function nr$2(e) {
    if (e == null) return !1;
    if (e.constructor === Uint8Array) return !0;
    if (typeof e == "string" || !jn(e.length) || e.length < 0) return !1;
    for (let t = 0; t < e.length; t++) {
        const r = e[t];
        if (!jn(r) || r < 0 || r >= 256) return !1;
    }
    return !0;
}
function Ot$2(e, t) {
    if ((t || (t = {}), typeof e == "number")) {
        Dt$2.checkSafeUint53(e, "invalid arrayify value");
        const r = [];
        for (; e; ) r.unshift(e & 255), (e = parseInt(String(e / 256)));
        return r.length === 0 && r.push(0), ir$2(new Uint8Array(r));
    }
    if ((t.allowMissingPrefix && typeof e == "string" && e.substring(0, 2) !== "0x" && (e = "0x" + e), zn(e) && (e = e.toHexString()), Jt$2(e))) {
        let r = e.substring(2);
        r.length % 2 &&
            (t.hexPad === "left" ? (r = "0" + r) : t.hexPad === "right" ? (r += "0") : Dt$2.throwArgumentError("hex data is odd-length", "value", e));
        const i = [];
        for (let n = 0; n < r.length; n += 2) i.push(parseInt(r.substring(n, n + 2), 16));
        return ir$2(new Uint8Array(i));
    }
    return nr$2(e) ? ir$2(new Uint8Array(e)) : Dt$2.throwArgumentError("invalid arrayify value", "value", e);
}
function Cs$1(e) {
    const t = e.map((n) => Ot$2(n)),
        r = t.reduce((n, o) => n + o.length, 0),
        i = new Uint8Array(r);
    return t.reduce((n, o) => (i.set(o, n), n + o.length), 0), ir$2(i);
}
function Rs$2(e, t) {
    (e = Ot$2(e)), e.length > t && Dt$2.throwArgumentError("value out of range", "value", arguments[0]);
    const r = new Uint8Array(t);
    return r.set(e, t - e.length), ir$2(r);
}
function Jt$2(e, t) {
    return !(typeof e != "string" || !e.match(/^0x[0-9A-Fa-f]*$/) || (t && e.length !== 2 + 2 * t));
}
const Ei = "0123456789abcdef";
function Kt$2(e, t) {
    if ((t || (t = {}), typeof e == "number")) {
        Dt$2.checkSafeUint53(e, "invalid hexlify value");
        let r = "";
        for (; e; ) (r = Ei[e & 15] + r), (e = Math.floor(e / 16));
        return r.length ? (r.length % 2 && (r = "0" + r), "0x" + r) : "0x00";
    }
    if (typeof e == "bigint") return (e = e.toString(16)), e.length % 2 ? "0x0" + e : "0x" + e;
    if ((t.allowMissingPrefix && typeof e == "string" && e.substring(0, 2) !== "0x" && (e = "0x" + e), zn(e))) return e.toHexString();
    if (Jt$2(e))
        return (
            e.length % 2 &&
                (t.hexPad === "left"
                    ? (e = "0x0" + e.substring(2))
                    : t.hexPad === "right"
                    ? (e += "0")
                    : Dt$2.throwArgumentError("hex data is odd-length", "value", e)),
            e.toLowerCase()
        );
    if (nr$2(e)) {
        let r = "0x";
        for (let i = 0; i < e.length; i++) {
            let n = e[i];
            r += Ei[(n & 240) >> 4] + Ei[n & 15];
        }
        return r;
    }
    return Dt$2.throwArgumentError("invalid hexlify value", "value", e);
}
function Os$1(e) {
    if (typeof e != "string") e = Kt$2(e);
    else if (!Jt$2(e) || e.length % 2) return null;
    return (e.length - 2) / 2;
}
function Qn(e, t, r) {
    return (
        typeof e != "string" ? (e = Kt$2(e)) : (!Jt$2(e) || e.length % 2) && Dt$2.throwArgumentError("invalid hexData", "value", e),
        (t = 2 + 2 * t),
        r != null ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t)
    );
}
function oe$4(e, t) {
    for (
        typeof e != "string" ? (e = Kt$2(e)) : Jt$2(e) || Dt$2.throwArgumentError("invalid hex string", "value", e),
            e.length > 2 * t + 2 && Dt$2.throwArgumentError("value out of range", "value", arguments[1]);
        e.length < 2 * t + 2;

    )
        e = "0x0" + e.substring(2);
    return e;
}
function Jn(e) {
    const t = { r: "0x", s: "0x", _vs: "0x", recoveryParam: 0, v: 0, yParityAndS: "0x", compact: "0x" };
    if (Bs$1(e)) {
        let r = Ot$2(e);
        r.length === 64
            ? ((t.v = 27 + (r[32] >> 7)), (r[32] &= 127), (t.r = Kt$2(r.slice(0, 32))), (t.s = Kt$2(r.slice(32, 64))))
            : r.length === 65
            ? ((t.r = Kt$2(r.slice(0, 32))), (t.s = Kt$2(r.slice(32, 64))), (t.v = r[64]))
            : Dt$2.throwArgumentError("invalid signature string", "signature", e),
            t.v < 27 && (t.v === 0 || t.v === 1 ? (t.v += 27) : Dt$2.throwArgumentError("signature invalid v byte", "signature", e)),
            (t.recoveryParam = 1 - (t.v % 2)),
            t.recoveryParam && (r[32] |= 128),
            (t._vs = Kt$2(r.slice(32, 64)));
    } else {
        if (((t.r = e.r), (t.s = e.s), (t.v = e.v), (t.recoveryParam = e.recoveryParam), (t._vs = e._vs), t._vs != null)) {
            const n = Rs$2(Ot$2(t._vs), 32);
            t._vs = Kt$2(n);
            const o = n[0] >= 128 ? 1 : 0;
            t.recoveryParam == null
                ? (t.recoveryParam = o)
                : t.recoveryParam !== o && Dt$2.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e),
                (n[0] &= 127);
            const h = Kt$2(n);
            t.s == null ? (t.s = h) : t.s !== h && Dt$2.throwArgumentError("signature v mismatch _vs", "signature", e);
        }
        if (t.recoveryParam == null)
            t.v == null
                ? Dt$2.throwArgumentError("signature missing v and recoveryParam", "signature", e)
                : t.v === 0 || t.v === 1
                ? (t.recoveryParam = t.v)
                : (t.recoveryParam = 1 - (t.v % 2));
        else if (t.v == null) t.v = 27 + t.recoveryParam;
        else {
            const n = t.v === 0 || t.v === 1 ? t.v : 1 - (t.v % 2);
            t.recoveryParam !== n && Dt$2.throwArgumentError("signature recoveryParam mismatch v", "signature", e);
        }
        t.r == null || !Jt$2(t.r) ? Dt$2.throwArgumentError("signature missing or invalid r", "signature", e) : (t.r = oe$4(t.r, 32)),
            t.s == null || !Jt$2(t.s) ? Dt$2.throwArgumentError("signature missing or invalid s", "signature", e) : (t.s = oe$4(t.s, 32));
        const r = Ot$2(t.s);
        r[0] >= 128 && Dt$2.throwArgumentError("signature s out of range", "signature", e), t.recoveryParam && (r[0] |= 128);
        const i = Kt$2(r);
        t._vs && (Jt$2(t._vs) || Dt$2.throwArgumentError("signature invalid _vs", "signature", e), (t._vs = oe$4(t._vs, 32))),
            t._vs == null ? (t._vs = i) : t._vs !== i && Dt$2.throwArgumentError("signature _vs mismatch v and s", "signature", e);
    }
    return (t.yParityAndS = t._vs), (t.compact = t.r + t.yParityAndS.substring(2)), t;
}
function Si(e) {
    return "0x" + Ss$2.keccak_256(Ot$2(e));
}
var Gn = { exports: {} },
    Ps$1 = {},
    Ds$1 = Object.freeze({ __proto__: null, default: Ps$1 }),
    Fs$1 = Es$2(Ds$1);
(function (e) {
    (function (t, r) {
        function i(b, f) {
            if (!b) throw new Error(f || "Assertion failed");
        }
        function n(b, f) {
            b.super_ = f;
            var a = function () {};
            (a.prototype = f.prototype), (b.prototype = new a()), (b.prototype.constructor = b);
        }
        function o(b, f, a) {
            if (o.isBN(b)) return b;
            (this.negative = 0),
                (this.words = null),
                (this.length = 0),
                (this.red = null),
                b !== null && ((f === "le" || f === "be") && ((a = f), (f = 10)), this._init(b || 0, f || 10, a || "be"));
        }
        typeof t == "object" ? (t.exports = o) : (r.BN = o), (o.BN = o), (o.wordSize = 26);
        var h;
        try {
            typeof window < "u" && typeof window.Buffer < "u" ? (h = window.Buffer) : (h = Fs$1.Buffer);
        } catch {}
        (o.isBN = function (f) {
            return f instanceof o ? !0 : f !== null && typeof f == "object" && f.constructor.wordSize === o.wordSize && Array.isArray(f.words);
        }),
            (o.max = function (f, a) {
                return f.cmp(a) > 0 ? f : a;
            }),
            (o.min = function (f, a) {
                return f.cmp(a) < 0 ? f : a;
            }),
            (o.prototype._init = function (f, a, c) {
                if (typeof f == "number") return this._initNumber(f, a, c);
                if (typeof f == "object") return this._initArray(f, a, c);
                a === "hex" && (a = 16), i(a === (a | 0) && a >= 2 && a <= 36), (f = f.toString().replace(/\s+/g, ""));
                var d = 0;
                f[0] === "-" && (d++, (this.negative = 1)),
                    d < f.length && (a === 16 ? this._parseHex(f, d, c) : (this._parseBase(f, a, d), c === "le" && this._initArray(this.toArray(), a, c)));
            }),
            (o.prototype._initNumber = function (f, a, c) {
                f < 0 && ((this.negative = 1), (f = -f)),
                    f < 67108864
                        ? ((this.words = [f & 67108863]), (this.length = 1))
                        : f < 4503599627370496
                        ? ((this.words = [f & 67108863, (f / 67108864) & 67108863]), (this.length = 2))
                        : (i(f < 9007199254740992), (this.words = [f & 67108863, (f / 67108864) & 67108863, 1]), (this.length = 3)),
                    c === "le" && this._initArray(this.toArray(), a, c);
            }),
            (o.prototype._initArray = function (f, a, c) {
                if ((i(typeof f.length == "number"), f.length <= 0)) return (this.words = [0]), (this.length = 1), this;
                (this.length = Math.ceil(f.length / 3)), (this.words = new Array(this.length));
                for (var d = 0; d < this.length; d++) this.words[d] = 0;
                var m,
                    x,
                    M = 0;
                if (c === "be")
                    for (d = f.length - 1, m = 0; d >= 0; d -= 3)
                        (x = f[d] | (f[d - 1] << 8) | (f[d - 2] << 16)),
                            (this.words[m] |= (x << M) & 67108863),
                            (this.words[m + 1] = (x >>> (26 - M)) & 67108863),
                            (M += 24),
                            M >= 26 && ((M -= 26), m++);
                else if (c === "le")
                    for (d = 0, m = 0; d < f.length; d += 3)
                        (x = f[d] | (f[d + 1] << 8) | (f[d + 2] << 16)),
                            (this.words[m] |= (x << M) & 67108863),
                            (this.words[m + 1] = (x >>> (26 - M)) & 67108863),
                            (M += 24),
                            M >= 26 && ((M -= 26), m++);
                return this._strip();
            });
        function p(b, f) {
            var a = b.charCodeAt(f);
            if (a >= 48 && a <= 57) return a - 48;
            if (a >= 65 && a <= 70) return a - 55;
            if (a >= 97 && a <= 102) return a - 87;
            i(!1, "Invalid character in " + b);
        }
        function A(b, f, a) {
            var c = p(b, a);
            return a - 1 >= f && (c |= p(b, a - 1) << 4), c;
        }
        o.prototype._parseHex = function (f, a, c) {
            (this.length = Math.ceil((f.length - a) / 6)), (this.words = new Array(this.length));
            for (var d = 0; d < this.length; d++) this.words[d] = 0;
            var m = 0,
                x = 0,
                M;
            if (c === "be")
                for (d = f.length - 1; d >= a; d -= 2)
                    (M = A(f, a, d) << m), (this.words[x] |= M & 67108863), m >= 18 ? ((m -= 18), (x += 1), (this.words[x] |= M >>> 26)) : (m += 8);
            else {
                var l = f.length - a;
                for (d = l % 2 === 0 ? a + 1 : a; d < f.length; d += 2)
                    (M = A(f, a, d) << m), (this.words[x] |= M & 67108863), m >= 18 ? ((m -= 18), (x += 1), (this.words[x] |= M >>> 26)) : (m += 8);
            }
            this._strip();
        };
        function v(b, f, a, c) {
            for (var d = 0, m = 0, x = Math.min(b.length, a), M = f; M < x; M++) {
                var l = b.charCodeAt(M) - 48;
                (d *= c), l >= 49 ? (m = l - 49 + 10) : l >= 17 ? (m = l - 17 + 10) : (m = l), i(l >= 0 && m < c, "Invalid character"), (d += m);
            }
            return d;
        }
        (o.prototype._parseBase = function (f, a, c) {
            (this.words = [0]), (this.length = 1);
            for (var d = 0, m = 1; m <= 67108863; m *= a) d++;
            d--, (m = (m / a) | 0);
            for (var x = f.length - c, M = x % d, l = Math.min(x, x - M) + c, s = 0, g = c; g < l; g += d)
                (s = v(f, g, g + d, a)), this.imuln(m), this.words[0] + s < 67108864 ? (this.words[0] += s) : this._iaddn(s);
            if (M !== 0) {
                var k = 1;
                for (s = v(f, g, f.length, a), g = 0; g < M; g++) k *= a;
                this.imuln(k), this.words[0] + s < 67108864 ? (this.words[0] += s) : this._iaddn(s);
            }
            this._strip();
        }),
            (o.prototype.copy = function (f) {
                f.words = new Array(this.length);
                for (var a = 0; a < this.length; a++) f.words[a] = this.words[a];
                (f.length = this.length), (f.negative = this.negative), (f.red = this.red);
            });
        function w(b, f) {
            (b.words = f.words), (b.length = f.length), (b.negative = f.negative), (b.red = f.red);
        }
        if (
            ((o.prototype._move = function (f) {
                w(f, this);
            }),
            (o.prototype.clone = function () {
                var f = new o(null);
                return this.copy(f), f;
            }),
            (o.prototype._expand = function (f) {
                for (; this.length < f; ) this.words[this.length++] = 0;
                return this;
            }),
            (o.prototype._strip = function () {
                for (; this.length > 1 && this.words[this.length - 1] === 0; ) this.length--;
                return this._normSign();
            }),
            (o.prototype._normSign = function () {
                return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
            }),
            typeof Symbol < "u" && typeof Symbol.for == "function")
        )
            try {
                o.prototype[Symbol.for("nodejs.util.inspect.custom")] = y;
            } catch {
                o.prototype.inspect = y;
            }
        else o.prototype.inspect = y;
        function y() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var S = [
                "",
                "0",
                "00",
                "000",
                "0000",
                "00000",
                "000000",
                "0000000",
                "00000000",
                "000000000",
                "0000000000",
                "00000000000",
                "000000000000",
                "0000000000000",
                "00000000000000",
                "000000000000000",
                "0000000000000000",
                "00000000000000000",
                "000000000000000000",
                "0000000000000000000",
                "00000000000000000000",
                "000000000000000000000",
                "0000000000000000000000",
                "00000000000000000000000",
                "000000000000000000000000",
                "0000000000000000000000000",
            ],
            I = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            N = [
                0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625,
                16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5,
                28629151, 33554432, 39135393, 45435424, 52521875, 60466176,
            ];
        (o.prototype.toString = function (f, a) {
            (f = f || 10), (a = a | 0 || 1);
            var c;
            if (f === 16 || f === "hex") {
                c = "";
                for (var d = 0, m = 0, x = 0; x < this.length; x++) {
                    var M = this.words[x],
                        l = (((M << d) | m) & 16777215).toString(16);
                    (m = (M >>> (24 - d)) & 16777215),
                        (d += 2),
                        d >= 26 && ((d -= 26), x--),
                        m !== 0 || x !== this.length - 1 ? (c = S[6 - l.length] + l + c) : (c = l + c);
                }
                for (m !== 0 && (c = m.toString(16) + c); c.length % a !== 0; ) c = "0" + c;
                return this.negative !== 0 && (c = "-" + c), c;
            }
            if (f === (f | 0) && f >= 2 && f <= 36) {
                var s = I[f],
                    g = N[f];
                c = "";
                var k = this.clone();
                for (k.negative = 0; !k.isZero(); ) {
                    var u = k.modrn(g).toString(f);
                    (k = k.idivn(g)), k.isZero() ? (c = u + c) : (c = S[s - u.length] + u + c);
                }
                for (this.isZero() && (c = "0" + c); c.length % a !== 0; ) c = "0" + c;
                return this.negative !== 0 && (c = "-" + c), c;
            }
            i(!1, "Base should be between 2 and 36");
        }),
            (o.prototype.toNumber = function () {
                var f = this.words[0];
                return (
                    this.length === 2
                        ? (f += this.words[1] * 67108864)
                        : this.length === 3 && this.words[2] === 1
                        ? (f += 4503599627370496 + this.words[1] * 67108864)
                        : this.length > 2 && i(!1, "Number can only safely store up to 53 bits"),
                    this.negative !== 0 ? -f : f
                );
            }),
            (o.prototype.toJSON = function () {
                return this.toString(16, 2);
            }),
            h &&
                (o.prototype.toBuffer = function (f, a) {
                    return this.toArrayLike(h, f, a);
                }),
            (o.prototype.toArray = function (f, a) {
                return this.toArrayLike(Array, f, a);
            });
        var C = function (f, a) {
            return f.allocUnsafe ? f.allocUnsafe(a) : new f(a);
        };
        (o.prototype.toArrayLike = function (f, a, c) {
            this._strip();
            var d = this.byteLength(),
                m = c || Math.max(1, d);
            i(d <= m, "byte array longer than desired length"), i(m > 0, "Requested array length <= 0");
            var x = C(f, m),
                M = a === "le" ? "LE" : "BE";
            return this["_toArrayLike" + M](x, d), x;
        }),
            (o.prototype._toArrayLikeLE = function (f, a) {
                for (var c = 0, d = 0, m = 0, x = 0; m < this.length; m++) {
                    var M = (this.words[m] << x) | d;
                    (f[c++] = M & 255),
                        c < f.length && (f[c++] = (M >> 8) & 255),
                        c < f.length && (f[c++] = (M >> 16) & 255),
                        x === 6 ? (c < f.length && (f[c++] = (M >> 24) & 255), (d = 0), (x = 0)) : ((d = M >>> 24), (x += 2));
                }
                if (c < f.length) for (f[c++] = d; c < f.length; ) f[c++] = 0;
            }),
            (o.prototype._toArrayLikeBE = function (f, a) {
                for (var c = f.length - 1, d = 0, m = 0, x = 0; m < this.length; m++) {
                    var M = (this.words[m] << x) | d;
                    (f[c--] = M & 255),
                        c >= 0 && (f[c--] = (M >> 8) & 255),
                        c >= 0 && (f[c--] = (M >> 16) & 255),
                        x === 6 ? (c >= 0 && (f[c--] = (M >> 24) & 255), (d = 0), (x = 0)) : ((d = M >>> 24), (x += 2));
                }
                if (c >= 0) for (f[c--] = d; c >= 0; ) f[c--] = 0;
            }),
            Math.clz32
                ? (o.prototype._countBits = function (f) {
                      return 32 - Math.clz32(f);
                  })
                : (o.prototype._countBits = function (f) {
                      var a = f,
                          c = 0;
                      return (
                          a >= 4096 && ((c += 13), (a >>>= 13)),
                          a >= 64 && ((c += 7), (a >>>= 7)),
                          a >= 8 && ((c += 4), (a >>>= 4)),
                          a >= 2 && ((c += 2), (a >>>= 2)),
                          c + a
                      );
                  }),
            (o.prototype._zeroBits = function (f) {
                if (f === 0) return 26;
                var a = f,
                    c = 0;
                return (
                    a & 8191 || ((c += 13), (a >>>= 13)),
                    a & 127 || ((c += 7), (a >>>= 7)),
                    a & 15 || ((c += 4), (a >>>= 4)),
                    a & 3 || ((c += 2), (a >>>= 2)),
                    a & 1 || c++,
                    c
                );
            }),
            (o.prototype.bitLength = function () {
                var f = this.words[this.length - 1],
                    a = this._countBits(f);
                return (this.length - 1) * 26 + a;
            });
        function F(b) {
            for (var f = new Array(b.bitLength()), a = 0; a < f.length; a++) {
                var c = (a / 26) | 0,
                    d = a % 26;
                f[a] = (b.words[c] >>> d) & 1;
            }
            return f;
        }
        (o.prototype.zeroBits = function () {
            if (this.isZero()) return 0;
            for (var f = 0, a = 0; a < this.length; a++) {
                var c = this._zeroBits(this.words[a]);
                if (((f += c), c !== 26)) break;
            }
            return f;
        }),
            (o.prototype.byteLength = function () {
                return Math.ceil(this.bitLength() / 8);
            }),
            (o.prototype.toTwos = function (f) {
                return this.negative !== 0 ? this.abs().inotn(f).iaddn(1) : this.clone();
            }),
            (o.prototype.fromTwos = function (f) {
                return this.testn(f - 1) ? this.notn(f).iaddn(1).ineg() : this.clone();
            }),
            (o.prototype.isNeg = function () {
                return this.negative !== 0;
            }),
            (o.prototype.neg = function () {
                return this.clone().ineg();
            }),
            (o.prototype.ineg = function () {
                return this.isZero() || (this.negative ^= 1), this;
            }),
            (o.prototype.iuor = function (f) {
                for (; this.length < f.length; ) this.words[this.length++] = 0;
                for (var a = 0; a < f.length; a++) this.words[a] = this.words[a] | f.words[a];
                return this._strip();
            }),
            (o.prototype.ior = function (f) {
                return i((this.negative | f.negative) === 0), this.iuor(f);
            }),
            (o.prototype.or = function (f) {
                return this.length > f.length ? this.clone().ior(f) : f.clone().ior(this);
            }),
            (o.prototype.uor = function (f) {
                return this.length > f.length ? this.clone().iuor(f) : f.clone().iuor(this);
            }),
            (o.prototype.iuand = function (f) {
                var a;
                this.length > f.length ? (a = f) : (a = this);
                for (var c = 0; c < a.length; c++) this.words[c] = this.words[c] & f.words[c];
                return (this.length = a.length), this._strip();
            }),
            (o.prototype.iand = function (f) {
                return i((this.negative | f.negative) === 0), this.iuand(f);
            }),
            (o.prototype.and = function (f) {
                return this.length > f.length ? this.clone().iand(f) : f.clone().iand(this);
            }),
            (o.prototype.uand = function (f) {
                return this.length > f.length ? this.clone().iuand(f) : f.clone().iuand(this);
            }),
            (o.prototype.iuxor = function (f) {
                var a, c;
                this.length > f.length ? ((a = this), (c = f)) : ((a = f), (c = this));
                for (var d = 0; d < c.length; d++) this.words[d] = a.words[d] ^ c.words[d];
                if (this !== a) for (; d < a.length; d++) this.words[d] = a.words[d];
                return (this.length = a.length), this._strip();
            }),
            (o.prototype.ixor = function (f) {
                return i((this.negative | f.negative) === 0), this.iuxor(f);
            }),
            (o.prototype.xor = function (f) {
                return this.length > f.length ? this.clone().ixor(f) : f.clone().ixor(this);
            }),
            (o.prototype.uxor = function (f) {
                return this.length > f.length ? this.clone().iuxor(f) : f.clone().iuxor(this);
            }),
            (o.prototype.inotn = function (f) {
                i(typeof f == "number" && f >= 0);
                var a = Math.ceil(f / 26) | 0,
                    c = f % 26;
                this._expand(a), c > 0 && a--;
                for (var d = 0; d < a; d++) this.words[d] = ~this.words[d] & 67108863;
                return c > 0 && (this.words[d] = ~this.words[d] & (67108863 >> (26 - c))), this._strip();
            }),
            (o.prototype.notn = function (f) {
                return this.clone().inotn(f);
            }),
            (o.prototype.setn = function (f, a) {
                i(typeof f == "number" && f >= 0);
                var c = (f / 26) | 0,
                    d = f % 26;
                return this._expand(c + 1), a ? (this.words[c] = this.words[c] | (1 << d)) : (this.words[c] = this.words[c] & ~(1 << d)), this._strip();
            }),
            (o.prototype.iadd = function (f) {
                var a;
                if (this.negative !== 0 && f.negative === 0) return (this.negative = 0), (a = this.isub(f)), (this.negative ^= 1), this._normSign();
                if (this.negative === 0 && f.negative !== 0) return (f.negative = 0), (a = this.isub(f)), (f.negative = 1), a._normSign();
                var c, d;
                this.length > f.length ? ((c = this), (d = f)) : ((c = f), (d = this));
                for (var m = 0, x = 0; x < d.length; x++) (a = (c.words[x] | 0) + (d.words[x] | 0) + m), (this.words[x] = a & 67108863), (m = a >>> 26);
                for (; m !== 0 && x < c.length; x++) (a = (c.words[x] | 0) + m), (this.words[x] = a & 67108863), (m = a >>> 26);
                if (((this.length = c.length), m !== 0)) (this.words[this.length] = m), this.length++;
                else if (c !== this) for (; x < c.length; x++) this.words[x] = c.words[x];
                return this;
            }),
            (o.prototype.add = function (f) {
                var a;
                return f.negative !== 0 && this.negative === 0
                    ? ((f.negative = 0), (a = this.sub(f)), (f.negative ^= 1), a)
                    : f.negative === 0 && this.negative !== 0
                    ? ((this.negative = 0), (a = f.sub(this)), (this.negative = 1), a)
                    : this.length > f.length
                    ? this.clone().iadd(f)
                    : f.clone().iadd(this);
            }),
            (o.prototype.isub = function (f) {
                if (f.negative !== 0) {
                    f.negative = 0;
                    var a = this.iadd(f);
                    return (f.negative = 1), a._normSign();
                } else if (this.negative !== 0) return (this.negative = 0), this.iadd(f), (this.negative = 1), this._normSign();
                var c = this.cmp(f);
                if (c === 0) return (this.negative = 0), (this.length = 1), (this.words[0] = 0), this;
                var d, m;
                c > 0 ? ((d = this), (m = f)) : ((d = f), (m = this));
                for (var x = 0, M = 0; M < m.length; M++) (a = (d.words[M] | 0) - (m.words[M] | 0) + x), (x = a >> 26), (this.words[M] = a & 67108863);
                for (; x !== 0 && M < d.length; M++) (a = (d.words[M] | 0) + x), (x = a >> 26), (this.words[M] = a & 67108863);
                if (x === 0 && M < d.length && d !== this) for (; M < d.length; M++) this.words[M] = d.words[M];
                return (this.length = Math.max(this.length, M)), d !== this && (this.negative = 1), this._strip();
            }),
            (o.prototype.sub = function (f) {
                return this.clone().isub(f);
            });
        function U(b, f, a) {
            a.negative = f.negative ^ b.negative;
            var c = (b.length + f.length) | 0;
            (a.length = c), (c = (c - 1) | 0);
            var d = b.words[0] | 0,
                m = f.words[0] | 0,
                x = d * m,
                M = x & 67108863,
                l = (x / 67108864) | 0;
            a.words[0] = M;
            for (var s = 1; s < c; s++) {
                for (var g = l >>> 26, k = l & 67108863, u = Math.min(s, f.length - 1), E = Math.max(0, s - b.length + 1); E <= u; E++) {
                    var _ = (s - E) | 0;
                    (d = b.words[_] | 0), (m = f.words[E] | 0), (x = d * m + k), (g += (x / 67108864) | 0), (k = x & 67108863);
                }
                (a.words[s] = k | 0), (l = g | 0);
            }
            return l !== 0 ? (a.words[s] = l | 0) : a.length--, a._strip();
        }
        var J = function (f, a, c) {
            var d = f.words,
                m = a.words,
                x = c.words,
                M = 0,
                l,
                s,
                g,
                k = d[0] | 0,
                u = k & 8191,
                E = k >>> 13,
                _ = d[1] | 0,
                B = _ & 8191,
                R = _ >>> 13,
                T = d[2] | 0,
                P = T & 8191,
                O = T >>> 13,
                Ct = d[3] | 0,
                D = Ct & 8191,
                q = Ct >>> 13,
                De = d[4] | 0,
                X = De & 8191,
                Z = De >>> 13,
                Fe = d[5] | 0,
                $ = Fe & 8191,
                tt = Fe >>> 13,
                Te = d[6] | 0,
                et = Te & 8191,
                rt = Te >>> 13,
                Ue = d[7] | 0,
                it = Ue & 8191,
                nt = Ue >>> 13,
                ke = d[8] | 0,
                ft = ke & 8191,
                ot = ke >>> 13,
                qe = d[9] | 0,
                st = qe & 8191,
                at = qe >>> 13,
                Ke = m[0] | 0,
                ut = Ke & 8191,
                ht = Ke >>> 13,
                He = m[1] | 0,
                ct = He & 8191,
                lt = He >>> 13,
                Le = m[2] | 0,
                dt = Le & 8191,
                pt = Le >>> 13,
                ze = m[3] | 0,
                vt = ze & 8191,
                gt = ze >>> 13,
                je = m[4] | 0,
                mt = je & 8191,
                At = je >>> 13,
                Qe = m[5] | 0,
                bt = Qe & 8191,
                yt = Qe >>> 13,
                Je = m[6] | 0,
                wt = Je & 8191,
                xt = Je >>> 13,
                Ge = m[7] | 0,
                Mt = Ge & 8191,
                Et = Ge >>> 13,
                Ye = m[8] | 0,
                St = Ye & 8191,
                Nt = Ye >>> 13,
                Ve = m[9] | 0,
                It = Ve & 8191,
                _t = Ve >>> 13;
            (c.negative = f.negative ^ a.negative),
                (c.length = 19),
                (l = Math.imul(u, ut)),
                (s = Math.imul(u, ht)),
                (s = (s + Math.imul(E, ut)) | 0),
                (g = Math.imul(E, ht));
            var Me = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (Me >>> 26)) | 0),
                (Me &= 67108863),
                (l = Math.imul(B, ut)),
                (s = Math.imul(B, ht)),
                (s = (s + Math.imul(R, ut)) | 0),
                (g = Math.imul(R, ht)),
                (l = (l + Math.imul(u, ct)) | 0),
                (s = (s + Math.imul(u, lt)) | 0),
                (s = (s + Math.imul(E, ct)) | 0),
                (g = (g + Math.imul(E, lt)) | 0);
            var Ee = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (Ee >>> 26)) | 0),
                (Ee &= 67108863),
                (l = Math.imul(P, ut)),
                (s = Math.imul(P, ht)),
                (s = (s + Math.imul(O, ut)) | 0),
                (g = Math.imul(O, ht)),
                (l = (l + Math.imul(B, ct)) | 0),
                (s = (s + Math.imul(B, lt)) | 0),
                (s = (s + Math.imul(R, ct)) | 0),
                (g = (g + Math.imul(R, lt)) | 0),
                (l = (l + Math.imul(u, dt)) | 0),
                (s = (s + Math.imul(u, pt)) | 0),
                (s = (s + Math.imul(E, dt)) | 0),
                (g = (g + Math.imul(E, pt)) | 0);
            var Se = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (Se >>> 26)) | 0),
                (Se &= 67108863),
                (l = Math.imul(D, ut)),
                (s = Math.imul(D, ht)),
                (s = (s + Math.imul(q, ut)) | 0),
                (g = Math.imul(q, ht)),
                (l = (l + Math.imul(P, ct)) | 0),
                (s = (s + Math.imul(P, lt)) | 0),
                (s = (s + Math.imul(O, ct)) | 0),
                (g = (g + Math.imul(O, lt)) | 0),
                (l = (l + Math.imul(B, dt)) | 0),
                (s = (s + Math.imul(B, pt)) | 0),
                (s = (s + Math.imul(R, dt)) | 0),
                (g = (g + Math.imul(R, pt)) | 0),
                (l = (l + Math.imul(u, vt)) | 0),
                (s = (s + Math.imul(u, gt)) | 0),
                (s = (s + Math.imul(E, vt)) | 0),
                (g = (g + Math.imul(E, gt)) | 0);
            var Ne = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (Ne >>> 26)) | 0),
                (Ne &= 67108863),
                (l = Math.imul(X, ut)),
                (s = Math.imul(X, ht)),
                (s = (s + Math.imul(Z, ut)) | 0),
                (g = Math.imul(Z, ht)),
                (l = (l + Math.imul(D, ct)) | 0),
                (s = (s + Math.imul(D, lt)) | 0),
                (s = (s + Math.imul(q, ct)) | 0),
                (g = (g + Math.imul(q, lt)) | 0),
                (l = (l + Math.imul(P, dt)) | 0),
                (s = (s + Math.imul(P, pt)) | 0),
                (s = (s + Math.imul(O, dt)) | 0),
                (g = (g + Math.imul(O, pt)) | 0),
                (l = (l + Math.imul(B, vt)) | 0),
                (s = (s + Math.imul(B, gt)) | 0),
                (s = (s + Math.imul(R, vt)) | 0),
                (g = (g + Math.imul(R, gt)) | 0),
                (l = (l + Math.imul(u, mt)) | 0),
                (s = (s + Math.imul(u, At)) | 0),
                (s = (s + Math.imul(E, mt)) | 0),
                (g = (g + Math.imul(E, At)) | 0);
            var Ie = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (Ie >>> 26)) | 0),
                (Ie &= 67108863),
                (l = Math.imul($, ut)),
                (s = Math.imul($, ht)),
                (s = (s + Math.imul(tt, ut)) | 0),
                (g = Math.imul(tt, ht)),
                (l = (l + Math.imul(X, ct)) | 0),
                (s = (s + Math.imul(X, lt)) | 0),
                (s = (s + Math.imul(Z, ct)) | 0),
                (g = (g + Math.imul(Z, lt)) | 0),
                (l = (l + Math.imul(D, dt)) | 0),
                (s = (s + Math.imul(D, pt)) | 0),
                (s = (s + Math.imul(q, dt)) | 0),
                (g = (g + Math.imul(q, pt)) | 0),
                (l = (l + Math.imul(P, vt)) | 0),
                (s = (s + Math.imul(P, gt)) | 0),
                (s = (s + Math.imul(O, vt)) | 0),
                (g = (g + Math.imul(O, gt)) | 0),
                (l = (l + Math.imul(B, mt)) | 0),
                (s = (s + Math.imul(B, At)) | 0),
                (s = (s + Math.imul(R, mt)) | 0),
                (g = (g + Math.imul(R, At)) | 0),
                (l = (l + Math.imul(u, bt)) | 0),
                (s = (s + Math.imul(u, yt)) | 0),
                (s = (s + Math.imul(E, bt)) | 0),
                (g = (g + Math.imul(E, yt)) | 0);
            var $r = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + ($r >>> 26)) | 0),
                ($r &= 67108863),
                (l = Math.imul(et, ut)),
                (s = Math.imul(et, ht)),
                (s = (s + Math.imul(rt, ut)) | 0),
                (g = Math.imul(rt, ht)),
                (l = (l + Math.imul($, ct)) | 0),
                (s = (s + Math.imul($, lt)) | 0),
                (s = (s + Math.imul(tt, ct)) | 0),
                (g = (g + Math.imul(tt, lt)) | 0),
                (l = (l + Math.imul(X, dt)) | 0),
                (s = (s + Math.imul(X, pt)) | 0),
                (s = (s + Math.imul(Z, dt)) | 0),
                (g = (g + Math.imul(Z, pt)) | 0),
                (l = (l + Math.imul(D, vt)) | 0),
                (s = (s + Math.imul(D, gt)) | 0),
                (s = (s + Math.imul(q, vt)) | 0),
                (g = (g + Math.imul(q, gt)) | 0),
                (l = (l + Math.imul(P, mt)) | 0),
                (s = (s + Math.imul(P, At)) | 0),
                (s = (s + Math.imul(O, mt)) | 0),
                (g = (g + Math.imul(O, At)) | 0),
                (l = (l + Math.imul(B, bt)) | 0),
                (s = (s + Math.imul(B, yt)) | 0),
                (s = (s + Math.imul(R, bt)) | 0),
                (g = (g + Math.imul(R, yt)) | 0),
                (l = (l + Math.imul(u, wt)) | 0),
                (s = (s + Math.imul(u, xt)) | 0),
                (s = (s + Math.imul(E, wt)) | 0),
                (g = (g + Math.imul(E, xt)) | 0);
            var ti = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ti >>> 26)) | 0),
                (ti &= 67108863),
                (l = Math.imul(it, ut)),
                (s = Math.imul(it, ht)),
                (s = (s + Math.imul(nt, ut)) | 0),
                (g = Math.imul(nt, ht)),
                (l = (l + Math.imul(et, ct)) | 0),
                (s = (s + Math.imul(et, lt)) | 0),
                (s = (s + Math.imul(rt, ct)) | 0),
                (g = (g + Math.imul(rt, lt)) | 0),
                (l = (l + Math.imul($, dt)) | 0),
                (s = (s + Math.imul($, pt)) | 0),
                (s = (s + Math.imul(tt, dt)) | 0),
                (g = (g + Math.imul(tt, pt)) | 0),
                (l = (l + Math.imul(X, vt)) | 0),
                (s = (s + Math.imul(X, gt)) | 0),
                (s = (s + Math.imul(Z, vt)) | 0),
                (g = (g + Math.imul(Z, gt)) | 0),
                (l = (l + Math.imul(D, mt)) | 0),
                (s = (s + Math.imul(D, At)) | 0),
                (s = (s + Math.imul(q, mt)) | 0),
                (g = (g + Math.imul(q, At)) | 0),
                (l = (l + Math.imul(P, bt)) | 0),
                (s = (s + Math.imul(P, yt)) | 0),
                (s = (s + Math.imul(O, bt)) | 0),
                (g = (g + Math.imul(O, yt)) | 0),
                (l = (l + Math.imul(B, wt)) | 0),
                (s = (s + Math.imul(B, xt)) | 0),
                (s = (s + Math.imul(R, wt)) | 0),
                (g = (g + Math.imul(R, xt)) | 0),
                (l = (l + Math.imul(u, Mt)) | 0),
                (s = (s + Math.imul(u, Et)) | 0),
                (s = (s + Math.imul(E, Mt)) | 0),
                (g = (g + Math.imul(E, Et)) | 0);
            var ei = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ei >>> 26)) | 0),
                (ei &= 67108863),
                (l = Math.imul(ft, ut)),
                (s = Math.imul(ft, ht)),
                (s = (s + Math.imul(ot, ut)) | 0),
                (g = Math.imul(ot, ht)),
                (l = (l + Math.imul(it, ct)) | 0),
                (s = (s + Math.imul(it, lt)) | 0),
                (s = (s + Math.imul(nt, ct)) | 0),
                (g = (g + Math.imul(nt, lt)) | 0),
                (l = (l + Math.imul(et, dt)) | 0),
                (s = (s + Math.imul(et, pt)) | 0),
                (s = (s + Math.imul(rt, dt)) | 0),
                (g = (g + Math.imul(rt, pt)) | 0),
                (l = (l + Math.imul($, vt)) | 0),
                (s = (s + Math.imul($, gt)) | 0),
                (s = (s + Math.imul(tt, vt)) | 0),
                (g = (g + Math.imul(tt, gt)) | 0),
                (l = (l + Math.imul(X, mt)) | 0),
                (s = (s + Math.imul(X, At)) | 0),
                (s = (s + Math.imul(Z, mt)) | 0),
                (g = (g + Math.imul(Z, At)) | 0),
                (l = (l + Math.imul(D, bt)) | 0),
                (s = (s + Math.imul(D, yt)) | 0),
                (s = (s + Math.imul(q, bt)) | 0),
                (g = (g + Math.imul(q, yt)) | 0),
                (l = (l + Math.imul(P, wt)) | 0),
                (s = (s + Math.imul(P, xt)) | 0),
                (s = (s + Math.imul(O, wt)) | 0),
                (g = (g + Math.imul(O, xt)) | 0),
                (l = (l + Math.imul(B, Mt)) | 0),
                (s = (s + Math.imul(B, Et)) | 0),
                (s = (s + Math.imul(R, Mt)) | 0),
                (g = (g + Math.imul(R, Et)) | 0),
                (l = (l + Math.imul(u, St)) | 0),
                (s = (s + Math.imul(u, Nt)) | 0),
                (s = (s + Math.imul(E, St)) | 0),
                (g = (g + Math.imul(E, Nt)) | 0);
            var ri = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ri >>> 26)) | 0),
                (ri &= 67108863),
                (l = Math.imul(st, ut)),
                (s = Math.imul(st, ht)),
                (s = (s + Math.imul(at, ut)) | 0),
                (g = Math.imul(at, ht)),
                (l = (l + Math.imul(ft, ct)) | 0),
                (s = (s + Math.imul(ft, lt)) | 0),
                (s = (s + Math.imul(ot, ct)) | 0),
                (g = (g + Math.imul(ot, lt)) | 0),
                (l = (l + Math.imul(it, dt)) | 0),
                (s = (s + Math.imul(it, pt)) | 0),
                (s = (s + Math.imul(nt, dt)) | 0),
                (g = (g + Math.imul(nt, pt)) | 0),
                (l = (l + Math.imul(et, vt)) | 0),
                (s = (s + Math.imul(et, gt)) | 0),
                (s = (s + Math.imul(rt, vt)) | 0),
                (g = (g + Math.imul(rt, gt)) | 0),
                (l = (l + Math.imul($, mt)) | 0),
                (s = (s + Math.imul($, At)) | 0),
                (s = (s + Math.imul(tt, mt)) | 0),
                (g = (g + Math.imul(tt, At)) | 0),
                (l = (l + Math.imul(X, bt)) | 0),
                (s = (s + Math.imul(X, yt)) | 0),
                (s = (s + Math.imul(Z, bt)) | 0),
                (g = (g + Math.imul(Z, yt)) | 0),
                (l = (l + Math.imul(D, wt)) | 0),
                (s = (s + Math.imul(D, xt)) | 0),
                (s = (s + Math.imul(q, wt)) | 0),
                (g = (g + Math.imul(q, xt)) | 0),
                (l = (l + Math.imul(P, Mt)) | 0),
                (s = (s + Math.imul(P, Et)) | 0),
                (s = (s + Math.imul(O, Mt)) | 0),
                (g = (g + Math.imul(O, Et)) | 0),
                (l = (l + Math.imul(B, St)) | 0),
                (s = (s + Math.imul(B, Nt)) | 0),
                (s = (s + Math.imul(R, St)) | 0),
                (g = (g + Math.imul(R, Nt)) | 0),
                (l = (l + Math.imul(u, It)) | 0),
                (s = (s + Math.imul(u, _t)) | 0),
                (s = (s + Math.imul(E, It)) | 0),
                (g = (g + Math.imul(E, _t)) | 0);
            var ii = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ii >>> 26)) | 0),
                (ii &= 67108863),
                (l = Math.imul(st, ct)),
                (s = Math.imul(st, lt)),
                (s = (s + Math.imul(at, ct)) | 0),
                (g = Math.imul(at, lt)),
                (l = (l + Math.imul(ft, dt)) | 0),
                (s = (s + Math.imul(ft, pt)) | 0),
                (s = (s + Math.imul(ot, dt)) | 0),
                (g = (g + Math.imul(ot, pt)) | 0),
                (l = (l + Math.imul(it, vt)) | 0),
                (s = (s + Math.imul(it, gt)) | 0),
                (s = (s + Math.imul(nt, vt)) | 0),
                (g = (g + Math.imul(nt, gt)) | 0),
                (l = (l + Math.imul(et, mt)) | 0),
                (s = (s + Math.imul(et, At)) | 0),
                (s = (s + Math.imul(rt, mt)) | 0),
                (g = (g + Math.imul(rt, At)) | 0),
                (l = (l + Math.imul($, bt)) | 0),
                (s = (s + Math.imul($, yt)) | 0),
                (s = (s + Math.imul(tt, bt)) | 0),
                (g = (g + Math.imul(tt, yt)) | 0),
                (l = (l + Math.imul(X, wt)) | 0),
                (s = (s + Math.imul(X, xt)) | 0),
                (s = (s + Math.imul(Z, wt)) | 0),
                (g = (g + Math.imul(Z, xt)) | 0),
                (l = (l + Math.imul(D, Mt)) | 0),
                (s = (s + Math.imul(D, Et)) | 0),
                (s = (s + Math.imul(q, Mt)) | 0),
                (g = (g + Math.imul(q, Et)) | 0),
                (l = (l + Math.imul(P, St)) | 0),
                (s = (s + Math.imul(P, Nt)) | 0),
                (s = (s + Math.imul(O, St)) | 0),
                (g = (g + Math.imul(O, Nt)) | 0),
                (l = (l + Math.imul(B, It)) | 0),
                (s = (s + Math.imul(B, _t)) | 0),
                (s = (s + Math.imul(R, It)) | 0),
                (g = (g + Math.imul(R, _t)) | 0);
            var ni = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ni >>> 26)) | 0),
                (ni &= 67108863),
                (l = Math.imul(st, dt)),
                (s = Math.imul(st, pt)),
                (s = (s + Math.imul(at, dt)) | 0),
                (g = Math.imul(at, pt)),
                (l = (l + Math.imul(ft, vt)) | 0),
                (s = (s + Math.imul(ft, gt)) | 0),
                (s = (s + Math.imul(ot, vt)) | 0),
                (g = (g + Math.imul(ot, gt)) | 0),
                (l = (l + Math.imul(it, mt)) | 0),
                (s = (s + Math.imul(it, At)) | 0),
                (s = (s + Math.imul(nt, mt)) | 0),
                (g = (g + Math.imul(nt, At)) | 0),
                (l = (l + Math.imul(et, bt)) | 0),
                (s = (s + Math.imul(et, yt)) | 0),
                (s = (s + Math.imul(rt, bt)) | 0),
                (g = (g + Math.imul(rt, yt)) | 0),
                (l = (l + Math.imul($, wt)) | 0),
                (s = (s + Math.imul($, xt)) | 0),
                (s = (s + Math.imul(tt, wt)) | 0),
                (g = (g + Math.imul(tt, xt)) | 0),
                (l = (l + Math.imul(X, Mt)) | 0),
                (s = (s + Math.imul(X, Et)) | 0),
                (s = (s + Math.imul(Z, Mt)) | 0),
                (g = (g + Math.imul(Z, Et)) | 0),
                (l = (l + Math.imul(D, St)) | 0),
                (s = (s + Math.imul(D, Nt)) | 0),
                (s = (s + Math.imul(q, St)) | 0),
                (g = (g + Math.imul(q, Nt)) | 0),
                (l = (l + Math.imul(P, It)) | 0),
                (s = (s + Math.imul(P, _t)) | 0),
                (s = (s + Math.imul(O, It)) | 0),
                (g = (g + Math.imul(O, _t)) | 0);
            var fi = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (fi >>> 26)) | 0),
                (fi &= 67108863),
                (l = Math.imul(st, vt)),
                (s = Math.imul(st, gt)),
                (s = (s + Math.imul(at, vt)) | 0),
                (g = Math.imul(at, gt)),
                (l = (l + Math.imul(ft, mt)) | 0),
                (s = (s + Math.imul(ft, At)) | 0),
                (s = (s + Math.imul(ot, mt)) | 0),
                (g = (g + Math.imul(ot, At)) | 0),
                (l = (l + Math.imul(it, bt)) | 0),
                (s = (s + Math.imul(it, yt)) | 0),
                (s = (s + Math.imul(nt, bt)) | 0),
                (g = (g + Math.imul(nt, yt)) | 0),
                (l = (l + Math.imul(et, wt)) | 0),
                (s = (s + Math.imul(et, xt)) | 0),
                (s = (s + Math.imul(rt, wt)) | 0),
                (g = (g + Math.imul(rt, xt)) | 0),
                (l = (l + Math.imul($, Mt)) | 0),
                (s = (s + Math.imul($, Et)) | 0),
                (s = (s + Math.imul(tt, Mt)) | 0),
                (g = (g + Math.imul(tt, Et)) | 0),
                (l = (l + Math.imul(X, St)) | 0),
                (s = (s + Math.imul(X, Nt)) | 0),
                (s = (s + Math.imul(Z, St)) | 0),
                (g = (g + Math.imul(Z, Nt)) | 0),
                (l = (l + Math.imul(D, It)) | 0),
                (s = (s + Math.imul(D, _t)) | 0),
                (s = (s + Math.imul(q, It)) | 0),
                (g = (g + Math.imul(q, _t)) | 0);
            var oi = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (oi >>> 26)) | 0),
                (oi &= 67108863),
                (l = Math.imul(st, mt)),
                (s = Math.imul(st, At)),
                (s = (s + Math.imul(at, mt)) | 0),
                (g = Math.imul(at, At)),
                (l = (l + Math.imul(ft, bt)) | 0),
                (s = (s + Math.imul(ft, yt)) | 0),
                (s = (s + Math.imul(ot, bt)) | 0),
                (g = (g + Math.imul(ot, yt)) | 0),
                (l = (l + Math.imul(it, wt)) | 0),
                (s = (s + Math.imul(it, xt)) | 0),
                (s = (s + Math.imul(nt, wt)) | 0),
                (g = (g + Math.imul(nt, xt)) | 0),
                (l = (l + Math.imul(et, Mt)) | 0),
                (s = (s + Math.imul(et, Et)) | 0),
                (s = (s + Math.imul(rt, Mt)) | 0),
                (g = (g + Math.imul(rt, Et)) | 0),
                (l = (l + Math.imul($, St)) | 0),
                (s = (s + Math.imul($, Nt)) | 0),
                (s = (s + Math.imul(tt, St)) | 0),
                (g = (g + Math.imul(tt, Nt)) | 0),
                (l = (l + Math.imul(X, It)) | 0),
                (s = (s + Math.imul(X, _t)) | 0),
                (s = (s + Math.imul(Z, It)) | 0),
                (g = (g + Math.imul(Z, _t)) | 0);
            var si = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (si >>> 26)) | 0),
                (si &= 67108863),
                (l = Math.imul(st, bt)),
                (s = Math.imul(st, yt)),
                (s = (s + Math.imul(at, bt)) | 0),
                (g = Math.imul(at, yt)),
                (l = (l + Math.imul(ft, wt)) | 0),
                (s = (s + Math.imul(ft, xt)) | 0),
                (s = (s + Math.imul(ot, wt)) | 0),
                (g = (g + Math.imul(ot, xt)) | 0),
                (l = (l + Math.imul(it, Mt)) | 0),
                (s = (s + Math.imul(it, Et)) | 0),
                (s = (s + Math.imul(nt, Mt)) | 0),
                (g = (g + Math.imul(nt, Et)) | 0),
                (l = (l + Math.imul(et, St)) | 0),
                (s = (s + Math.imul(et, Nt)) | 0),
                (s = (s + Math.imul(rt, St)) | 0),
                (g = (g + Math.imul(rt, Nt)) | 0),
                (l = (l + Math.imul($, It)) | 0),
                (s = (s + Math.imul($, _t)) | 0),
                (s = (s + Math.imul(tt, It)) | 0),
                (g = (g + Math.imul(tt, _t)) | 0);
            var ai = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ai >>> 26)) | 0),
                (ai &= 67108863),
                (l = Math.imul(st, wt)),
                (s = Math.imul(st, xt)),
                (s = (s + Math.imul(at, wt)) | 0),
                (g = Math.imul(at, xt)),
                (l = (l + Math.imul(ft, Mt)) | 0),
                (s = (s + Math.imul(ft, Et)) | 0),
                (s = (s + Math.imul(ot, Mt)) | 0),
                (g = (g + Math.imul(ot, Et)) | 0),
                (l = (l + Math.imul(it, St)) | 0),
                (s = (s + Math.imul(it, Nt)) | 0),
                (s = (s + Math.imul(nt, St)) | 0),
                (g = (g + Math.imul(nt, Nt)) | 0),
                (l = (l + Math.imul(et, It)) | 0),
                (s = (s + Math.imul(et, _t)) | 0),
                (s = (s + Math.imul(rt, It)) | 0),
                (g = (g + Math.imul(rt, _t)) | 0);
            var ui = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ui >>> 26)) | 0),
                (ui &= 67108863),
                (l = Math.imul(st, Mt)),
                (s = Math.imul(st, Et)),
                (s = (s + Math.imul(at, Mt)) | 0),
                (g = Math.imul(at, Et)),
                (l = (l + Math.imul(ft, St)) | 0),
                (s = (s + Math.imul(ft, Nt)) | 0),
                (s = (s + Math.imul(ot, St)) | 0),
                (g = (g + Math.imul(ot, Nt)) | 0),
                (l = (l + Math.imul(it, It)) | 0),
                (s = (s + Math.imul(it, _t)) | 0),
                (s = (s + Math.imul(nt, It)) | 0),
                (g = (g + Math.imul(nt, _t)) | 0);
            var hi = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (hi >>> 26)) | 0),
                (hi &= 67108863),
                (l = Math.imul(st, St)),
                (s = Math.imul(st, Nt)),
                (s = (s + Math.imul(at, St)) | 0),
                (g = Math.imul(at, Nt)),
                (l = (l + Math.imul(ft, It)) | 0),
                (s = (s + Math.imul(ft, _t)) | 0),
                (s = (s + Math.imul(ot, It)) | 0),
                (g = (g + Math.imul(ot, _t)) | 0);
            var ci = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            (M = (((g + (s >>> 13)) | 0) + (ci >>> 26)) | 0),
                (ci &= 67108863),
                (l = Math.imul(st, It)),
                (s = Math.imul(st, _t)),
                (s = (s + Math.imul(at, It)) | 0),
                (g = Math.imul(at, _t));
            var li = (((M + l) | 0) + ((s & 8191) << 13)) | 0;
            return (
                (M = (((g + (s >>> 13)) | 0) + (li >>> 26)) | 0),
                (li &= 67108863),
                (x[0] = Me),
                (x[1] = Ee),
                (x[2] = Se),
                (x[3] = Ne),
                (x[4] = Ie),
                (x[5] = $r),
                (x[6] = ti),
                (x[7] = ei),
                (x[8] = ri),
                (x[9] = ii),
                (x[10] = ni),
                (x[11] = fi),
                (x[12] = oi),
                (x[13] = si),
                (x[14] = ai),
                (x[15] = ui),
                (x[16] = hi),
                (x[17] = ci),
                (x[18] = li),
                M !== 0 && ((x[19] = M), c.length++),
                c
            );
        };
        Math.imul || (J = U);
        function Bt(b, f, a) {
            (a.negative = f.negative ^ b.negative), (a.length = b.length + f.length);
            for (var c = 0, d = 0, m = 0; m < a.length - 1; m++) {
                var x = d;
                d = 0;
                for (var M = c & 67108863, l = Math.min(m, f.length - 1), s = Math.max(0, m - b.length + 1); s <= l; s++) {
                    var g = m - s,
                        k = b.words[g] | 0,
                        u = f.words[s] | 0,
                        E = k * u,
                        _ = E & 67108863;
                    (x = (x + ((E / 67108864) | 0)) | 0), (_ = (_ + M) | 0), (M = _ & 67108863), (x = (x + (_ >>> 26)) | 0), (d += x >>> 26), (x &= 67108863);
                }
                (a.words[m] = M), (c = x), (x = d);
            }
            return c !== 0 ? (a.words[m] = c) : a.length--, a._strip();
        }
        function G(b, f, a) {
            return Bt(b, f, a);
        }
        (o.prototype.mulTo = function (f, a) {
            var c,
                d = this.length + f.length;
            return (
                this.length === 10 && f.length === 10
                    ? (c = J(this, f, a))
                    : d < 63
                    ? (c = U(this, f, a))
                    : d < 1024
                    ? (c = Bt(this, f, a))
                    : (c = G(this, f, a)),
                c
            );
        }),
            (o.prototype.mul = function (f) {
                var a = new o(null);
                return (a.words = new Array(this.length + f.length)), this.mulTo(f, a);
            }),
            (o.prototype.mulf = function (f) {
                var a = new o(null);
                return (a.words = new Array(this.length + f.length)), G(this, f, a);
            }),
            (o.prototype.imul = function (f) {
                return this.clone().mulTo(f, this);
            }),
            (o.prototype.imuln = function (f) {
                var a = f < 0;
                a && (f = -f), i(typeof f == "number"), i(f < 67108864);
                for (var c = 0, d = 0; d < this.length; d++) {
                    var m = (this.words[d] | 0) * f,
                        x = (m & 67108863) + (c & 67108863);
                    (c >>= 26), (c += (m / 67108864) | 0), (c += x >>> 26), (this.words[d] = x & 67108863);
                }
                return c !== 0 && ((this.words[d] = c), this.length++), a ? this.ineg() : this;
            }),
            (o.prototype.muln = function (f) {
                return this.clone().imuln(f);
            }),
            (o.prototype.sqr = function () {
                return this.mul(this);
            }),
            (o.prototype.isqr = function () {
                return this.imul(this.clone());
            }),
            (o.prototype.pow = function (f) {
                var a = F(f);
                if (a.length === 0) return new o(1);
                for (var c = this, d = 0; d < a.length && a[d] === 0; d++, c = c.sqr());
                if (++d < a.length) for (var m = c.sqr(); d < a.length; d++, m = m.sqr()) a[d] !== 0 && (c = c.mul(m));
                return c;
            }),
            (o.prototype.iushln = function (f) {
                i(typeof f == "number" && f >= 0);
                var a = f % 26,
                    c = (f - a) / 26,
                    d = (67108863 >>> (26 - a)) << (26 - a),
                    m;
                if (a !== 0) {
                    var x = 0;
                    for (m = 0; m < this.length; m++) {
                        var M = this.words[m] & d,
                            l = ((this.words[m] | 0) - M) << a;
                        (this.words[m] = l | x), (x = M >>> (26 - a));
                    }
                    x && ((this.words[m] = x), this.length++);
                }
                if (c !== 0) {
                    for (m = this.length - 1; m >= 0; m--) this.words[m + c] = this.words[m];
                    for (m = 0; m < c; m++) this.words[m] = 0;
                    this.length += c;
                }
                return this._strip();
            }),
            (o.prototype.ishln = function (f) {
                return i(this.negative === 0), this.iushln(f);
            }),
            (o.prototype.iushrn = function (f, a, c) {
                i(typeof f == "number" && f >= 0);
                var d;
                a ? (d = (a - (a % 26)) / 26) : (d = 0);
                var m = f % 26,
                    x = Math.min((f - m) / 26, this.length),
                    M = 67108863 ^ ((67108863 >>> m) << m),
                    l = c;
                if (((d -= x), (d = Math.max(0, d)), l)) {
                    for (var s = 0; s < x; s++) l.words[s] = this.words[s];
                    l.length = x;
                }
                if (x !== 0)
                    if (this.length > x) for (this.length -= x, s = 0; s < this.length; s++) this.words[s] = this.words[s + x];
                    else (this.words[0] = 0), (this.length = 1);
                var g = 0;
                for (s = this.length - 1; s >= 0 && (g !== 0 || s >= d); s--) {
                    var k = this.words[s] | 0;
                    (this.words[s] = (g << (26 - m)) | (k >>> m)), (g = k & M);
                }
                return l && g !== 0 && (l.words[l.length++] = g), this.length === 0 && ((this.words[0] = 0), (this.length = 1)), this._strip();
            }),
            (o.prototype.ishrn = function (f, a, c) {
                return i(this.negative === 0), this.iushrn(f, a, c);
            }),
            (o.prototype.shln = function (f) {
                return this.clone().ishln(f);
            }),
            (o.prototype.ushln = function (f) {
                return this.clone().iushln(f);
            }),
            (o.prototype.shrn = function (f) {
                return this.clone().ishrn(f);
            }),
            (o.prototype.ushrn = function (f) {
                return this.clone().iushrn(f);
            }),
            (o.prototype.testn = function (f) {
                i(typeof f == "number" && f >= 0);
                var a = f % 26,
                    c = (f - a) / 26,
                    d = 1 << a;
                if (this.length <= c) return !1;
                var m = this.words[c];
                return !!(m & d);
            }),
            (o.prototype.imaskn = function (f) {
                i(typeof f == "number" && f >= 0);
                var a = f % 26,
                    c = (f - a) / 26;
                if ((i(this.negative === 0, "imaskn works only with positive numbers"), this.length <= c)) return this;
                if ((a !== 0 && c++, (this.length = Math.min(c, this.length)), a !== 0)) {
                    var d = 67108863 ^ ((67108863 >>> a) << a);
                    this.words[this.length - 1] &= d;
                }
                return this._strip();
            }),
            (o.prototype.maskn = function (f) {
                return this.clone().imaskn(f);
            }),
            (o.prototype.iaddn = function (f) {
                return (
                    i(typeof f == "number"),
                    i(f < 67108864),
                    f < 0
                        ? this.isubn(-f)
                        : this.negative !== 0
                        ? this.length === 1 && (this.words[0] | 0) <= f
                            ? ((this.words[0] = f - (this.words[0] | 0)), (this.negative = 0), this)
                            : ((this.negative = 0), this.isubn(f), (this.negative = 1), this)
                        : this._iaddn(f)
                );
            }),
            (o.prototype._iaddn = function (f) {
                this.words[0] += f;
                for (var a = 0; a < this.length && this.words[a] >= 67108864; a++)
                    (this.words[a] -= 67108864), a === this.length - 1 ? (this.words[a + 1] = 1) : this.words[a + 1]++;
                return (this.length = Math.max(this.length, a + 1)), this;
            }),
            (o.prototype.isubn = function (f) {
                if ((i(typeof f == "number"), i(f < 67108864), f < 0)) return this.iaddn(-f);
                if (this.negative !== 0) return (this.negative = 0), this.iaddn(f), (this.negative = 1), this;
                if (((this.words[0] -= f), this.length === 1 && this.words[0] < 0)) (this.words[0] = -this.words[0]), (this.negative = 1);
                else for (var a = 0; a < this.length && this.words[a] < 0; a++) (this.words[a] += 67108864), (this.words[a + 1] -= 1);
                return this._strip();
            }),
            (o.prototype.addn = function (f) {
                return this.clone().iaddn(f);
            }),
            (o.prototype.subn = function (f) {
                return this.clone().isubn(f);
            }),
            (o.prototype.iabs = function () {
                return (this.negative = 0), this;
            }),
            (o.prototype.abs = function () {
                return this.clone().iabs();
            }),
            (o.prototype._ishlnsubmul = function (f, a, c) {
                var d = f.length + c,
                    m;
                this._expand(d);
                var x,
                    M = 0;
                for (m = 0; m < f.length; m++) {
                    x = (this.words[m + c] | 0) + M;
                    var l = (f.words[m] | 0) * a;
                    (x -= l & 67108863), (M = (x >> 26) - ((l / 67108864) | 0)), (this.words[m + c] = x & 67108863);
                }
                for (; m < this.length - c; m++) (x = (this.words[m + c] | 0) + M), (M = x >> 26), (this.words[m + c] = x & 67108863);
                if (M === 0) return this._strip();
                for (i(M === -1), M = 0, m = 0; m < this.length; m++) (x = -(this.words[m] | 0) + M), (M = x >> 26), (this.words[m] = x & 67108863);
                return (this.negative = 1), this._strip();
            }),
            (o.prototype._wordDiv = function (f, a) {
                var c = this.length - f.length,
                    d = this.clone(),
                    m = f,
                    x = m.words[m.length - 1] | 0,
                    M = this._countBits(x);
                (c = 26 - M), c !== 0 && ((m = m.ushln(c)), d.iushln(c), (x = m.words[m.length - 1] | 0));
                var l = d.length - m.length,
                    s;
                if (a !== "mod") {
                    (s = new o(null)), (s.length = l + 1), (s.words = new Array(s.length));
                    for (var g = 0; g < s.length; g++) s.words[g] = 0;
                }
                var k = d.clone()._ishlnsubmul(m, 1, l);
                k.negative === 0 && ((d = k), s && (s.words[l] = 1));
                for (var u = l - 1; u >= 0; u--) {
                    var E = (d.words[m.length + u] | 0) * 67108864 + (d.words[m.length + u - 1] | 0);
                    for (E = Math.min((E / x) | 0, 67108863), d._ishlnsubmul(m, E, u); d.negative !== 0; )
                        E--, (d.negative = 0), d._ishlnsubmul(m, 1, u), d.isZero() || (d.negative ^= 1);
                    s && (s.words[u] = E);
                }
                return s && s._strip(), d._strip(), a !== "div" && c !== 0 && d.iushrn(c), { div: s || null, mod: d };
            }),
            (o.prototype.divmod = function (f, a, c) {
                if ((i(!f.isZero()), this.isZero())) return { div: new o(0), mod: new o(0) };
                var d, m, x;
                return this.negative !== 0 && f.negative === 0
                    ? ((x = this.neg().divmod(f, a)),
                      a !== "mod" && (d = x.div.neg()),
                      a !== "div" && ((m = x.mod.neg()), c && m.negative !== 0 && m.iadd(f)),
                      { div: d, mod: m })
                    : this.negative === 0 && f.negative !== 0
                    ? ((x = this.divmod(f.neg(), a)), a !== "mod" && (d = x.div.neg()), { div: d, mod: x.mod })
                    : this.negative & f.negative
                    ? ((x = this.neg().divmod(f.neg(), a)), a !== "div" && ((m = x.mod.neg()), c && m.negative !== 0 && m.isub(f)), { div: x.div, mod: m })
                    : f.length > this.length || this.cmp(f) < 0
                    ? { div: new o(0), mod: this }
                    : f.length === 1
                    ? a === "div"
                        ? { div: this.divn(f.words[0]), mod: null }
                        : a === "mod"
                        ? { div: null, mod: new o(this.modrn(f.words[0])) }
                        : { div: this.divn(f.words[0]), mod: new o(this.modrn(f.words[0])) }
                    : this._wordDiv(f, a);
            }),
            (o.prototype.div = function (f) {
                return this.divmod(f, "div", !1).div;
            }),
            (o.prototype.mod = function (f) {
                return this.divmod(f, "mod", !1).mod;
            }),
            (o.prototype.umod = function (f) {
                return this.divmod(f, "mod", !0).mod;
            }),
            (o.prototype.divRound = function (f) {
                var a = this.divmod(f);
                if (a.mod.isZero()) return a.div;
                var c = a.div.negative !== 0 ? a.mod.isub(f) : a.mod,
                    d = f.ushrn(1),
                    m = f.andln(1),
                    x = c.cmp(d);
                return x < 0 || (m === 1 && x === 0) ? a.div : a.div.negative !== 0 ? a.div.isubn(1) : a.div.iaddn(1);
            }),
            (o.prototype.modrn = function (f) {
                var a = f < 0;
                a && (f = -f), i(f <= 67108863);
                for (var c = (1 << 26) % f, d = 0, m = this.length - 1; m >= 0; m--) d = (c * d + (this.words[m] | 0)) % f;
                return a ? -d : d;
            }),
            (o.prototype.modn = function (f) {
                return this.modrn(f);
            }),
            (o.prototype.idivn = function (f) {
                var a = f < 0;
                a && (f = -f), i(f <= 67108863);
                for (var c = 0, d = this.length - 1; d >= 0; d--) {
                    var m = (this.words[d] | 0) + c * 67108864;
                    (this.words[d] = (m / f) | 0), (c = m % f);
                }
                return this._strip(), a ? this.ineg() : this;
            }),
            (o.prototype.divn = function (f) {
                return this.clone().idivn(f);
            }),
            (o.prototype.egcd = function (f) {
                i(f.negative === 0), i(!f.isZero());
                var a = this,
                    c = f.clone();
                a.negative !== 0 ? (a = a.umod(f)) : (a = a.clone());
                for (var d = new o(1), m = new o(0), x = new o(0), M = new o(1), l = 0; a.isEven() && c.isEven(); ) a.iushrn(1), c.iushrn(1), ++l;
                for (var s = c.clone(), g = a.clone(); !a.isZero(); ) {
                    for (var k = 0, u = 1; !(a.words[0] & u) && k < 26; ++k, u <<= 1);
                    if (k > 0) for (a.iushrn(k); k-- > 0; ) (d.isOdd() || m.isOdd()) && (d.iadd(s), m.isub(g)), d.iushrn(1), m.iushrn(1);
                    for (var E = 0, _ = 1; !(c.words[0] & _) && E < 26; ++E, _ <<= 1);
                    if (E > 0) for (c.iushrn(E); E-- > 0; ) (x.isOdd() || M.isOdd()) && (x.iadd(s), M.isub(g)), x.iushrn(1), M.iushrn(1);
                    a.cmp(c) >= 0 ? (a.isub(c), d.isub(x), m.isub(M)) : (c.isub(a), x.isub(d), M.isub(m));
                }
                return { a: x, b: M, gcd: c.iushln(l) };
            }),
            (o.prototype._invmp = function (f) {
                i(f.negative === 0), i(!f.isZero());
                var a = this,
                    c = f.clone();
                a.negative !== 0 ? (a = a.umod(f)) : (a = a.clone());
                for (var d = new o(1), m = new o(0), x = c.clone(); a.cmpn(1) > 0 && c.cmpn(1) > 0; ) {
                    for (var M = 0, l = 1; !(a.words[0] & l) && M < 26; ++M, l <<= 1);
                    if (M > 0) for (a.iushrn(M); M-- > 0; ) d.isOdd() && d.iadd(x), d.iushrn(1);
                    for (var s = 0, g = 1; !(c.words[0] & g) && s < 26; ++s, g <<= 1);
                    if (s > 0) for (c.iushrn(s); s-- > 0; ) m.isOdd() && m.iadd(x), m.iushrn(1);
                    a.cmp(c) >= 0 ? (a.isub(c), d.isub(m)) : (c.isub(a), m.isub(d));
                }
                var k;
                return a.cmpn(1) === 0 ? (k = d) : (k = m), k.cmpn(0) < 0 && k.iadd(f), k;
            }),
            (o.prototype.gcd = function (f) {
                if (this.isZero()) return f.abs();
                if (f.isZero()) return this.abs();
                var a = this.clone(),
                    c = f.clone();
                (a.negative = 0), (c.negative = 0);
                for (var d = 0; a.isEven() && c.isEven(); d++) a.iushrn(1), c.iushrn(1);
                do {
                    for (; a.isEven(); ) a.iushrn(1);
                    for (; c.isEven(); ) c.iushrn(1);
                    var m = a.cmp(c);
                    if (m < 0) {
                        var x = a;
                        (a = c), (c = x);
                    } else if (m === 0 || c.cmpn(1) === 0) break;
                    a.isub(c);
                } while (!0);
                return c.iushln(d);
            }),
            (o.prototype.invm = function (f) {
                return this.egcd(f).a.umod(f);
            }),
            (o.prototype.isEven = function () {
                return (this.words[0] & 1) === 0;
            }),
            (o.prototype.isOdd = function () {
                return (this.words[0] & 1) === 1;
            }),
            (o.prototype.andln = function (f) {
                return this.words[0] & f;
            }),
            (o.prototype.bincn = function (f) {
                i(typeof f == "number");
                var a = f % 26,
                    c = (f - a) / 26,
                    d = 1 << a;
                if (this.length <= c) return this._expand(c + 1), (this.words[c] |= d), this;
                for (var m = d, x = c; m !== 0 && x < this.length; x++) {
                    var M = this.words[x] | 0;
                    (M += m), (m = M >>> 26), (M &= 67108863), (this.words[x] = M);
                }
                return m !== 0 && ((this.words[x] = m), this.length++), this;
            }),
            (o.prototype.isZero = function () {
                return this.length === 1 && this.words[0] === 0;
            }),
            (o.prototype.cmpn = function (f) {
                var a = f < 0;
                if (this.negative !== 0 && !a) return -1;
                if (this.negative === 0 && a) return 1;
                this._strip();
                var c;
                if (this.length > 1) c = 1;
                else {
                    a && (f = -f), i(f <= 67108863, "Number is too big");
                    var d = this.words[0] | 0;
                    c = d === f ? 0 : d < f ? -1 : 1;
                }
                return this.negative !== 0 ? -c | 0 : c;
            }),
            (o.prototype.cmp = function (f) {
                if (this.negative !== 0 && f.negative === 0) return -1;
                if (this.negative === 0 && f.negative !== 0) return 1;
                var a = this.ucmp(f);
                return this.negative !== 0 ? -a | 0 : a;
            }),
            (o.prototype.ucmp = function (f) {
                if (this.length > f.length) return 1;
                if (this.length < f.length) return -1;
                for (var a = 0, c = this.length - 1; c >= 0; c--) {
                    var d = this.words[c] | 0,
                        m = f.words[c] | 0;
                    if (d !== m) {
                        d < m ? (a = -1) : d > m && (a = 1);
                        break;
                    }
                }
                return a;
            }),
            (o.prototype.gtn = function (f) {
                return this.cmpn(f) === 1;
            }),
            (o.prototype.gt = function (f) {
                return this.cmp(f) === 1;
            }),
            (o.prototype.gten = function (f) {
                return this.cmpn(f) >= 0;
            }),
            (o.prototype.gte = function (f) {
                return this.cmp(f) >= 0;
            }),
            (o.prototype.ltn = function (f) {
                return this.cmpn(f) === -1;
            }),
            (o.prototype.lt = function (f) {
                return this.cmp(f) === -1;
            }),
            (o.prototype.lten = function (f) {
                return this.cmpn(f) <= 0;
            }),
            (o.prototype.lte = function (f) {
                return this.cmp(f) <= 0;
            }),
            (o.prototype.eqn = function (f) {
                return this.cmpn(f) === 0;
            }),
            (o.prototype.eq = function (f) {
                return this.cmp(f) === 0;
            }),
            (o.red = function (f) {
                return new Y(f);
            }),
            (o.prototype.toRed = function (f) {
                return (
                    i(!this.red, "Already a number in reduction context"),
                    i(this.negative === 0, "red works only with positives"),
                    f.convertTo(this)._forceRed(f)
                );
            }),
            (o.prototype.fromRed = function () {
                return i(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
            }),
            (o.prototype._forceRed = function (f) {
                return (this.red = f), this;
            }),
            (o.prototype.forceRed = function (f) {
                return i(!this.red, "Already a number in reduction context"), this._forceRed(f);
            }),
            (o.prototype.redAdd = function (f) {
                return i(this.red, "redAdd works only with red numbers"), this.red.add(this, f);
            }),
            (o.prototype.redIAdd = function (f) {
                return i(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, f);
            }),
            (o.prototype.redSub = function (f) {
                return i(this.red, "redSub works only with red numbers"), this.red.sub(this, f);
            }),
            (o.prototype.redISub = function (f) {
                return i(this.red, "redISub works only with red numbers"), this.red.isub(this, f);
            }),
            (o.prototype.redShl = function (f) {
                return i(this.red, "redShl works only with red numbers"), this.red.shl(this, f);
            }),
            (o.prototype.redMul = function (f) {
                return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, f), this.red.mul(this, f);
            }),
            (o.prototype.redIMul = function (f) {
                return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, f), this.red.imul(this, f);
            }),
            (o.prototype.redSqr = function () {
                return i(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
            }),
            (o.prototype.redISqr = function () {
                return i(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
            }),
            (o.prototype.redSqrt = function () {
                return i(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
            }),
            (o.prototype.redInvm = function () {
                return i(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
            }),
            (o.prototype.redNeg = function () {
                return i(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
            }),
            (o.prototype.redPow = function (f) {
                return i(this.red && !f.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, f);
            });
        var H = { k256: null, p224: null, p192: null, p25519: null };
        function L(b, f) {
            (this.name = b), (this.p = new o(f, 16)), (this.n = this.p.bitLength()), (this.k = new o(1).iushln(this.n).isub(this.p)), (this.tmp = this._tmp());
        }
        (L.prototype._tmp = function () {
            var f = new o(null);
            return (f.words = new Array(Math.ceil(this.n / 13))), f;
        }),
            (L.prototype.ireduce = function (f) {
                var a = f,
                    c;
                do this.split(a, this.tmp), (a = this.imulK(a)), (a = a.iadd(this.tmp)), (c = a.bitLength());
                while (c > this.n);
                var d = c < this.n ? -1 : a.ucmp(this.p);
                return d === 0 ? ((a.words[0] = 0), (a.length = 1)) : d > 0 ? a.isub(this.p) : a.strip !== void 0 ? a.strip() : a._strip(), a;
            }),
            (L.prototype.split = function (f, a) {
                f.iushrn(this.n, 0, a);
            }),
            (L.prototype.imulK = function (f) {
                return f.imul(this.k);
            });
        function Pt() {
            L.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        n(Pt, L),
            (Pt.prototype.split = function (f, a) {
                for (var c = 4194303, d = Math.min(f.length, 9), m = 0; m < d; m++) a.words[m] = f.words[m];
                if (((a.length = d), f.length <= 9)) {
                    (f.words[0] = 0), (f.length = 1);
                    return;
                }
                var x = f.words[9];
                for (a.words[a.length++] = x & c, m = 10; m < f.length; m++) {
                    var M = f.words[m] | 0;
                    (f.words[m - 10] = ((M & c) << 4) | (x >>> 22)), (x = M);
                }
                (x >>>= 22), (f.words[m - 10] = x), x === 0 && f.length > 10 ? (f.length -= 10) : (f.length -= 9);
            }),
            (Pt.prototype.imulK = function (f) {
                (f.words[f.length] = 0), (f.words[f.length + 1] = 0), (f.length += 2);
                for (var a = 0, c = 0; c < f.length; c++) {
                    var d = f.words[c] | 0;
                    (a += d * 977), (f.words[c] = a & 67108863), (a = d * 64 + ((a / 67108864) | 0));
                }
                return f.words[f.length - 1] === 0 && (f.length--, f.words[f.length - 1] === 0 && f.length--), f;
            });
        function W() {
            L.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        n(W, L);
        function Rt() {
            L.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        n(Rt, L);
        function Vt() {
            L.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        n(Vt, L),
            (Vt.prototype.imulK = function (f) {
                for (var a = 0, c = 0; c < f.length; c++) {
                    var d = (f.words[c] | 0) * 19 + a,
                        m = d & 67108863;
                    (d >>>= 26), (f.words[c] = m), (a = d);
                }
                return a !== 0 && (f.words[f.length++] = a), f;
            }),
            (o._prime = function (f) {
                if (H[f]) return H[f];
                var a;
                if (f === "k256") a = new Pt();
                else if (f === "p224") a = new W();
                else if (f === "p192") a = new Rt();
                else if (f === "p25519") a = new Vt();
                else throw new Error("Unknown prime " + f);
                return (H[f] = a), a;
            });
        function Y(b) {
            if (typeof b == "string") {
                var f = o._prime(b);
                (this.m = f.p), (this.prime = f);
            } else i(b.gtn(1), "modulus must be greater than 1"), (this.m = b), (this.prime = null);
        }
        (Y.prototype._verify1 = function (f) {
            i(f.negative === 0, "red works only with positives"), i(f.red, "red works only with red numbers");
        }),
            (Y.prototype._verify2 = function (f, a) {
                i((f.negative | a.negative) === 0, "red works only with positives"), i(f.red && f.red === a.red, "red works only with red numbers");
            }),
            (Y.prototype.imod = function (f) {
                return this.prime ? this.prime.ireduce(f)._forceRed(this) : (w(f, f.umod(this.m)._forceRed(this)), f);
            }),
            (Y.prototype.neg = function (f) {
                return f.isZero() ? f.clone() : this.m.sub(f)._forceRed(this);
            }),
            (Y.prototype.add = function (f, a) {
                this._verify2(f, a);
                var c = f.add(a);
                return c.cmp(this.m) >= 0 && c.isub(this.m), c._forceRed(this);
            }),
            (Y.prototype.iadd = function (f, a) {
                this._verify2(f, a);
                var c = f.iadd(a);
                return c.cmp(this.m) >= 0 && c.isub(this.m), c;
            }),
            (Y.prototype.sub = function (f, a) {
                this._verify2(f, a);
                var c = f.sub(a);
                return c.cmpn(0) < 0 && c.iadd(this.m), c._forceRed(this);
            }),
            (Y.prototype.isub = function (f, a) {
                this._verify2(f, a);
                var c = f.isub(a);
                return c.cmpn(0) < 0 && c.iadd(this.m), c;
            }),
            (Y.prototype.shl = function (f, a) {
                return this._verify1(f), this.imod(f.ushln(a));
            }),
            (Y.prototype.imul = function (f, a) {
                return this._verify2(f, a), this.imod(f.imul(a));
            }),
            (Y.prototype.mul = function (f, a) {
                return this._verify2(f, a), this.imod(f.mul(a));
            }),
            (Y.prototype.isqr = function (f) {
                return this.imul(f, f.clone());
            }),
            (Y.prototype.sqr = function (f) {
                return this.mul(f, f);
            }),
            (Y.prototype.sqrt = function (f) {
                if (f.isZero()) return f.clone();
                var a = this.m.andln(3);
                if ((i(a % 2 === 1), a === 3)) {
                    var c = this.m.add(new o(1)).iushrn(2);
                    return this.pow(f, c);
                }
                for (var d = this.m.subn(1), m = 0; !d.isZero() && d.andln(1) === 0; ) m++, d.iushrn(1);
                i(!d.isZero());
                var x = new o(1).toRed(this),
                    M = x.redNeg(),
                    l = this.m.subn(1).iushrn(1),
                    s = this.m.bitLength();
                for (s = new o(2 * s * s).toRed(this); this.pow(s, l).cmp(M) !== 0; ) s.redIAdd(M);
                for (var g = this.pow(s, d), k = this.pow(f, d.addn(1).iushrn(1)), u = this.pow(f, d), E = m; u.cmp(x) !== 0; ) {
                    for (var _ = u, B = 0; _.cmp(x) !== 0; B++) _ = _.redSqr();
                    i(B < E);
                    var R = this.pow(g, new o(1).iushln(E - B - 1));
                    (k = k.redMul(R)), (g = R.redSqr()), (u = u.redMul(g)), (E = B);
                }
                return k;
            }),
            (Y.prototype.invm = function (f) {
                var a = f._invmp(this.m);
                return a.negative !== 0 ? ((a.negative = 0), this.imod(a).redNeg()) : this.imod(a);
            }),
            (Y.prototype.pow = function (f, a) {
                if (a.isZero()) return new o(1).toRed(this);
                if (a.cmpn(1) === 0) return f.clone();
                var c = 4,
                    d = new Array(1 << c);
                (d[0] = new o(1).toRed(this)), (d[1] = f);
                for (var m = 2; m < d.length; m++) d[m] = this.mul(d[m - 1], f);
                var x = d[0],
                    M = 0,
                    l = 0,
                    s = a.bitLength() % 26;
                for (s === 0 && (s = 26), m = a.length - 1; m >= 0; m--) {
                    for (var g = a.words[m], k = s - 1; k >= 0; k--) {
                        var u = (g >> k) & 1;
                        if ((x !== d[0] && (x = this.sqr(x)), u === 0 && M === 0)) {
                            l = 0;
                            continue;
                        }
                        (M <<= 1), (M |= u), l++, !(l !== c && (m !== 0 || k !== 0)) && ((x = this.mul(x, d[M])), (l = 0), (M = 0));
                    }
                    s = 26;
                }
                return x;
            }),
            (Y.prototype.convertTo = function (f) {
                var a = f.umod(this.m);
                return a === f ? a.clone() : a;
            }),
            (Y.prototype.convertFrom = function (f) {
                var a = f.clone();
                return (a.red = null), a;
            }),
            (o.mont = function (f) {
                return new Wt(f);
            });
        function Wt(b) {
            Y.call(this, b),
                (this.shift = this.m.bitLength()),
                this.shift % 26 !== 0 && (this.shift += 26 - (this.shift % 26)),
                (this.r = new o(1).iushln(this.shift)),
                (this.r2 = this.imod(this.r.sqr())),
                (this.rinv = this.r._invmp(this.m)),
                (this.minv = this.rinv.mul(this.r).isubn(1).div(this.m)),
                (this.minv = this.minv.umod(this.r)),
                (this.minv = this.r.sub(this.minv));
        }
        n(Wt, Y),
            (Wt.prototype.convertTo = function (f) {
                return this.imod(f.ushln(this.shift));
            }),
            (Wt.prototype.convertFrom = function (f) {
                var a = this.imod(f.mul(this.rinv));
                return (a.red = null), a;
            }),
            (Wt.prototype.imul = function (f, a) {
                if (f.isZero() || a.isZero()) return (f.words[0] = 0), (f.length = 1), f;
                var c = f.imul(a),
                    d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
                    m = c.isub(d).iushrn(this.shift),
                    x = m;
                return m.cmp(this.m) >= 0 ? (x = m.isub(this.m)) : m.cmpn(0) < 0 && (x = m.iadd(this.m)), x._forceRed(this);
            }),
            (Wt.prototype.mul = function (f, a) {
                if (f.isZero() || a.isZero()) return new o(0)._forceRed(this);
                var c = f.mul(a),
                    d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
                    m = c.isub(d).iushrn(this.shift),
                    x = m;
                return m.cmp(this.m) >= 0 ? (x = m.isub(this.m)) : m.cmpn(0) < 0 && (x = m.iadd(this.m)), x._forceRed(this);
            }),
            (Wt.prototype.invm = function (f) {
                var a = this.imod(f._invmp(this.m).mul(this.r2));
                return a._forceRed(this);
            });
    })(e, Tn$1);
})(Gn);
var K$3 = Gn.exports;
const Yn = "bignumber/5.7.0";
var Fr$1 = K$3.BN;
const Ae$1 = new z$6(Yn),
    Ni = {},
    Vn = 9007199254740991;
function Ts$1(e) {
    return (
        e != null &&
        (V$3.isBigNumber(e) ||
            (typeof e == "number" && e % 1 === 0) ||
            (typeof e == "string" && !!e.match(/^-?[0-9]+$/)) ||
            Jt$2(e) ||
            typeof e == "bigint" ||
            nr$2(e))
    );
}
let Wn = !1;
let V$3 = class V {
    constructor(t, r) {
        t !== Ni && Ae$1.throwError("cannot call constructor directly; use BigNumber.from", z$6.errors.UNSUPPORTED_OPERATION, { operation: "new (BigNumber)" }),
            (this._hex = r),
            (this._isBigNumber = !0),
            Object.freeze(this);
    }
    fromTwos(t) {
        return zt$2(j$6(this).fromTwos(t));
    }
    toTwos(t) {
        return zt$2(j$6(this).toTwos(t));
    }
    abs() {
        return this._hex[0] === "-" ? V.from(this._hex.substring(1)) : this;
    }
    add(t) {
        return zt$2(j$6(this).add(j$6(t)));
    }
    sub(t) {
        return zt$2(j$6(this).sub(j$6(t)));
    }
    div(t) {
        return V.from(t).isZero() && Zt$2("division-by-zero", "div"), zt$2(j$6(this).div(j$6(t)));
    }
    mul(t) {
        return zt$2(j$6(this).mul(j$6(t)));
    }
    mod(t) {
        const r = j$6(t);
        return r.isNeg() && Zt$2("division-by-zero", "mod"), zt$2(j$6(this).umod(r));
    }
    pow(t) {
        const r = j$6(t);
        return r.isNeg() && Zt$2("negative-power", "pow"), zt$2(j$6(this).pow(r));
    }
    and(t) {
        const r = j$6(t);
        return (this.isNegative() || r.isNeg()) && Zt$2("unbound-bitwise-result", "and"), zt$2(j$6(this).and(r));
    }
    or(t) {
        const r = j$6(t);
        return (this.isNegative() || r.isNeg()) && Zt$2("unbound-bitwise-result", "or"), zt$2(j$6(this).or(r));
    }
    xor(t) {
        const r = j$6(t);
        return (this.isNegative() || r.isNeg()) && Zt$2("unbound-bitwise-result", "xor"), zt$2(j$6(this).xor(r));
    }
    mask(t) {
        return (this.isNegative() || t < 0) && Zt$2("negative-width", "mask"), zt$2(j$6(this).maskn(t));
    }
    shl(t) {
        return (this.isNegative() || t < 0) && Zt$2("negative-width", "shl"), zt$2(j$6(this).shln(t));
    }
    shr(t) {
        return (this.isNegative() || t < 0) && Zt$2("negative-width", "shr"), zt$2(j$6(this).shrn(t));
    }
    eq(t) {
        return j$6(this).eq(j$6(t));
    }
    lt(t) {
        return j$6(this).lt(j$6(t));
    }
    lte(t) {
        return j$6(this).lte(j$6(t));
    }
    gt(t) {
        return j$6(this).gt(j$6(t));
    }
    gte(t) {
        return j$6(this).gte(j$6(t));
    }
    isNegative() {
        return this._hex[0] === "-";
    }
    isZero() {
        return j$6(this).isZero();
    }
    toNumber() {
        try {
            return j$6(this).toNumber();
        } catch {
            Zt$2("overflow", "toNumber", this.toString());
        }
        return null;
    }
    toBigInt() {
        try {
            return BigInt(this.toString());
        } catch {}
        return Ae$1.throwError("this platform does not support BigInt", z$6.errors.UNSUPPORTED_OPERATION, { value: this.toString() });
    }
    toString() {
        return (
            arguments.length > 0 &&
                (arguments[0] === 10
                    ? Wn || ((Wn = !0), Ae$1.warn("BigNumber.toString does not accept any parameters; base-10 is assumed"))
                    : arguments[0] === 16
                    ? Ae$1.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", z$6.errors.UNEXPECTED_ARGUMENT, {})
                    : Ae$1.throwError("BigNumber.toString does not accept parameters", z$6.errors.UNEXPECTED_ARGUMENT, {})),
            j$6(this).toString(10)
        );
    }
    toHexString() {
        return this._hex;
    }
    toJSON(t) {
        return { type: "BigNumber", hex: this.toHexString() };
    }
    static from(t) {
        if (t instanceof V) return t;
        if (typeof t == "string")
            return t.match(/^-?0x[0-9a-f]+$/i)
                ? new V(Ni, mr$2(t))
                : t.match(/^-?[0-9]+$/)
                ? new V(Ni, mr$2(new Fr$1(t)))
                : Ae$1.throwArgumentError("invalid BigNumber string", "value", t);
        if (typeof t == "number")
            return t % 1 && Zt$2("underflow", "BigNumber.from", t), (t >= Vn || t <= -Vn) && Zt$2("overflow", "BigNumber.from", t), V.from(String(t));
        const r = t;
        if (typeof r == "bigint") return V.from(r.toString());
        if (nr$2(r)) return V.from(Kt$2(r));
        if (r)
            if (r.toHexString) {
                const i = r.toHexString();
                if (typeof i == "string") return V.from(i);
            } else {
                let i = r._hex;
                if ((i == null && r.type === "BigNumber" && (i = r.hex), typeof i == "string" && (Jt$2(i) || (i[0] === "-" && Jt$2(i.substring(1))))))
                    return V.from(i);
            }
        return Ae$1.throwArgumentError("invalid BigNumber value", "value", t);
    }
    static isBigNumber(t) {
        return !!(t && t._isBigNumber);
    }
};
function mr$2(e) {
    if (typeof e != "string") return mr$2(e.toString(16));
    if (e[0] === "-")
        return (e = e.substring(1)), e[0] === "-" && Ae$1.throwArgumentError("invalid hex", "value", e), (e = mr$2(e)), e === "0x00" ? e : "-" + e;
    if ((e.substring(0, 2) !== "0x" && (e = "0x" + e), e === "0x")) return "0x00";
    for (e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && e.substring(0, 4) === "0x00"; ) e = "0x" + e.substring(4);
    return e;
}
function zt$2(e) {
    return V$3.from(mr$2(e));
}
function j$6(e) {
    const t = V$3.from(e).toHexString();
    return t[0] === "-" ? new Fr$1("-" + t.substring(3), 16) : new Fr$1(t.substring(2), 16);
}
function Zt$2(e, t, r) {
    const i = { fault: e, operation: t };
    return r != null && (i.value = r), Ae$1.throwError(e, z$6.errors.NUMERIC_FAULT, i);
}
function Us$1(e) {
    return new Fr$1(e, 36).toString(16);
}
const Ht$2 = new z$6(Yn),
    Ar$1 = {},
    Xn = V$3.from(0),
    Zn = V$3.from(-1);
function $n(e, t, r, i) {
    const n = { fault: t, operation: r };
    return i !== void 0 && (n.value = i), Ht$2.throwError(e, z$6.errors.NUMERIC_FAULT, n);
}
let br$1 = "0";
for (; br$1.length < 256; ) br$1 += br$1;
function Ii(e) {
    if (typeof e != "number")
        try {
            e = V$3.from(e).toNumber();
        } catch {}
    return typeof e == "number" && e >= 0 && e <= 256 && !(e % 1) ? "1" + br$1.substring(0, e) : Ht$2.throwArgumentError("invalid decimal size", "decimals", e);
}
function _i(e, t) {
    t == null && (t = 0);
    const r = Ii(t);
    e = V$3.from(e);
    const i = e.lt(Xn);
    i && (e = e.mul(Zn));
    let n = e.mod(r).toString();
    for (; n.length < r.length - 1; ) n = "0" + n;
    n = n.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    const o = e.div(r).toString();
    return r.length === 1 ? (e = o) : (e = o + "." + n), i && (e = "-" + e), e;
}
function be$3(e, t) {
    t == null && (t = 0);
    const r = Ii(t);
    (typeof e != "string" || !e.match(/^-?[0-9.]+$/)) && Ht$2.throwArgumentError("invalid decimal value", "value", e);
    const i = e.substring(0, 1) === "-";
    i && (e = e.substring(1)), e === "." && Ht$2.throwArgumentError("missing value", "value", e);
    const n = e.split(".");
    n.length > 2 && Ht$2.throwArgumentError("too many decimal points", "value", e);
    let o = n[0],
        h = n[1];
    for (o || (o = "0"), h || (h = "0"); h[h.length - 1] === "0"; ) h = h.substring(0, h.length - 1);
    for (h.length > r.length - 1 && $n("fractional component exceeds decimals", "underflow", "parseFixed"), h === "" && (h = "0"); h.length < r.length - 1; )
        h += "0";
    const p = V$3.from(o),
        A = V$3.from(h);
    let v = p.mul(r).add(A);
    return i && (v = v.mul(Zn)), v;
}
let vr$1 = class vr {
    constructor(t, r, i, n) {
        t !== Ar$1 &&
            Ht$2.throwError("cannot use FixedFormat constructor; use FixedFormat.from", z$6.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" }),
            (this.signed = r),
            (this.width = i),
            (this.decimals = n),
            (this.name = (r ? "" : "u") + "fixed" + String(i) + "x" + String(n)),
            (this._multiplier = Ii(n)),
            Object.freeze(this);
    }
    static from(t) {
        if (t instanceof vr) return t;
        typeof t == "number" && (t = `fixed128x${t}`);
        let r = !0,
            i = 128,
            n = 18;
        if (typeof t == "string") {
            if (t !== "fixed")
                if (t === "ufixed") r = !1;
                else {
                    const o = t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    o || Ht$2.throwArgumentError("invalid fixed format", "format", t), (r = o[1] !== "u"), (i = parseInt(o[2])), (n = parseInt(o[3]));
                }
        } else if (t) {
            const o = (h, p, A) =>
                t[h] == null ? A : (typeof t[h] !== p && Ht$2.throwArgumentError("invalid fixed format (" + h + " not " + p + ")", "format." + h, t[h]), t[h]);
            (r = o("signed", "boolean", r)), (i = o("width", "number", i)), (n = o("decimals", "number", n));
        }
        return (
            i % 8 && Ht$2.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", i),
            n > 80 && Ht$2.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", n),
            new vr(Ar$1, r, i, n)
        );
    }
};
let Ut$2 = class Ut {
    constructor(t, r, i, n) {
        t !== Ar$1 &&
            Ht$2.throwError("cannot use FixedNumber constructor; use FixedNumber.from", z$6.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" }),
            (this.format = n),
            (this._hex = r),
            (this._value = i),
            (this._isFixedNumber = !0),
            Object.freeze(this);
    }
    _checkFormat(t) {
        this.format.name !== t.format.name && Ht$2.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", t);
    }
    addUnsafe(t) {
        this._checkFormat(t);
        const r = be$3(this._value, this.format.decimals),
            i = be$3(t._value, t.format.decimals);
        return Ut.fromValue(r.add(i), this.format.decimals, this.format);
    }
    subUnsafe(t) {
        this._checkFormat(t);
        const r = be$3(this._value, this.format.decimals),
            i = be$3(t._value, t.format.decimals);
        return Ut.fromValue(r.sub(i), this.format.decimals, this.format);
    }
    mulUnsafe(t) {
        this._checkFormat(t);
        const r = be$3(this._value, this.format.decimals),
            i = be$3(t._value, t.format.decimals);
        return Ut.fromValue(r.mul(i).div(this.format._multiplier), this.format.decimals, this.format);
    }
    divUnsafe(t) {
        this._checkFormat(t);
        const r = be$3(this._value, this.format.decimals),
            i = be$3(t._value, t.format.decimals);
        return Ut.fromValue(r.mul(this.format._multiplier).div(i), this.format.decimals, this.format);
    }
    floor() {
        const t = this.toString().split(".");
        t.length === 1 && t.push("0");
        let r = Ut.from(t[0], this.format);
        const i = !t[1].match(/^(0*)$/);
        return this.isNegative() && i && (r = r.subUnsafe(tf.toFormat(r.format))), r;
    }
    ceiling() {
        const t = this.toString().split(".");
        t.length === 1 && t.push("0");
        let r = Ut.from(t[0], this.format);
        const i = !t[1].match(/^(0*)$/);
        return !this.isNegative() && i && (r = r.addUnsafe(tf.toFormat(r.format))), r;
    }
    round(t) {
        t == null && (t = 0);
        const r = this.toString().split(".");
        if ((r.length === 1 && r.push("0"), (t < 0 || t > 80 || t % 1) && Ht$2.throwArgumentError("invalid decimal count", "decimals", t), r[1].length <= t))
            return this;
        const i = Ut.from("1" + br$1.substring(0, t), this.format),
            n = ks$1.toFormat(this.format);
        return this.mulUnsafe(i).addUnsafe(n).floor().divUnsafe(i);
    }
    isZero() {
        return this._value === "0.0" || this._value === "0";
    }
    isNegative() {
        return this._value[0] === "-";
    }
    toString() {
        return this._value;
    }
    toHexString(t) {
        if (t == null) return this._hex;
        t % 8 && Ht$2.throwArgumentError("invalid byte width", "width", t);
        const r = V$3.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString();
        return oe$4(r, t / 8);
    }
    toUnsafeFloat() {
        return parseFloat(this.toString());
    }
    toFormat(t) {
        return Ut.fromString(this._value, t);
    }
    static fromValue(t, r, i) {
        return (
            i == null && r != null && !Ts$1(r) && ((i = r), (r = null)), r == null && (r = 0), i == null && (i = "fixed"), Ut.fromString(_i(t, r), vr$1.from(i))
        );
    }
    static fromString(t, r) {
        r == null && (r = "fixed");
        const i = vr$1.from(r),
            n = be$3(t, i.decimals);
        !i.signed && n.lt(Xn) && $n("unsigned value cannot be negative", "overflow", "value", t);
        let o = null;
        i.signed ? (o = n.toTwos(i.width).toHexString()) : ((o = n.toHexString()), (o = oe$4(o, i.width / 8)));
        const h = _i(n, i.decimals);
        return new Ut(Ar$1, o, h, i);
    }
    static fromBytes(t, r) {
        r == null && (r = "fixed");
        const i = vr$1.from(r);
        if (Ot$2(t).length > i.width / 8) throw new Error("overflow");
        let n = V$3.from(t);
        i.signed && (n = n.fromTwos(i.width));
        const o = n.toTwos((i.signed ? 0 : 1) + i.width).toHexString(),
            h = _i(n, i.decimals);
        return new Ut(Ar$1, o, h, i);
    }
    static from(t, r) {
        if (typeof t == "string") return Ut.fromString(t, r);
        if (nr$2(t)) return Ut.fromBytes(t, r);
        try {
            return Ut.fromValue(t, 0, r);
        } catch (i) {
            if (i.code !== z$6.errors.INVALID_ARGUMENT) throw i;
        }
        return Ht$2.throwArgumentError("invalid FixedNumber value", "value", t);
    }
    static isFixedNumber(t) {
        return !!(t && t._isFixedNumber);
    }
};
const tf = Ut$2.from(1),
    ks$1 = Ut$2.from("0.5"),
    qs$2 = "strings/5.7.0",
    ef = new z$6(qs$2);
var Tr$1;
(function (e) {
    (e.current = ""), (e.NFC = "NFC"), (e.NFD = "NFD"), (e.NFKC = "NFKC"), (e.NFKD = "NFKD");
})(Tr$1 || (Tr$1 = {}));
var fr$1;
(function (e) {
    (e.UNEXPECTED_CONTINUE = "unexpected continuation byte"),
        (e.BAD_PREFIX = "bad codepoint prefix"),
        (e.OVERRUN = "string overrun"),
        (e.MISSING_CONTINUE = "missing continuation byte"),
        (e.OUT_OF_RANGE = "out of UTF-8 range"),
        (e.UTF16_SURROGATE = "UTF-16 surrogate"),
        (e.OVERLONG = "overlong representation");
})(fr$1 || (fr$1 = {}));
function Bi$1(e, t = Tr$1.current) {
    t != Tr$1.current && (ef.checkNormalize(), (e = e.normalize(t)));
    let r = [];
    for (let i = 0; i < e.length; i++) {
        const n = e.charCodeAt(i);
        if (n < 128) r.push(n);
        else if (n < 2048) r.push((n >> 6) | 192), r.push((n & 63) | 128);
        else if ((n & 64512) == 55296) {
            i++;
            const o = e.charCodeAt(i);
            if (i >= e.length || (o & 64512) !== 56320) throw new Error("invalid utf-8 string");
            const h = 65536 + ((n & 1023) << 10) + (o & 1023);
            r.push((h >> 18) | 240), r.push(((h >> 12) & 63) | 128), r.push(((h >> 6) & 63) | 128), r.push((h & 63) | 128);
        } else r.push((n >> 12) | 224), r.push(((n >> 6) & 63) | 128), r.push((n & 63) | 128);
    }
    return Ot$2(r);
}
function Ls$1(e) {
    if (e.length % 4 !== 0) throw new Error("bad data");
    let t = [];
    for (let r = 0; r < e.length; r += 4) t.push(parseInt(e.substring(r, r + 4), 16));
    return t;
}
function Ci(e, t) {
    t ||
        (t = function (n) {
            return [parseInt(n, 16)];
        });
    let r = 0,
        i = {};
    return (
        e.split(",").forEach((n) => {
            let o = n.split(":");
            (r += parseInt(o[0], 16)), (i[r] = t(o[1]));
        }),
        i
    );
}
function nf(e) {
    let t = 0;
    return e.split(",").map((r) => {
        let i = r.split("-");
        i.length === 1 ? (i[1] = "0") : i[1] === "" && (i[1] = "1");
        let n = t + parseInt(i[0], 16);
        return (t = parseInt(i[1], 16)), { l: n, h: t };
    });
}
nf(
    "221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"
),
    "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e) => parseInt(e, 16)),
    Ci(
        "b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"
    ),
    Ci(
        "179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"
    ),
    Ci(
        "df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",
        Ls$1
    ),
    nf(
        "80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001"
    );
function zs$1(e) {
    e = atob(e);
    const t = [];
    for (let r = 0; r < e.length; r++) t.push(e.charCodeAt(r));
    return Ot$2(t);
}
function of(e, t) {
    t == null && (t = 1);
    const r = [],
        i = r.forEach,
        n = function (o, h) {
            i.call(o, function (p) {
                h > 0 && Array.isArray(p) ? n(p, h - 1) : r.push(p);
            });
        };
    return n(e, t), r;
}
function js$1(e) {
    const t = {};
    for (let r = 0; r < e.length; r++) {
        const i = e[r];
        t[i[0]] = i[1];
    }
    return t;
}
function Qs$1(e) {
    let t = 0;
    function r() {
        return (e[t++] << 8) | e[t++];
    }
    let i = r(),
        n = 1,
        o = [0, 1];
    for (let H = 1; H < i; H++) o.push((n += r()));
    let h = r(),
        p = t;
    t += h;
    let A = 0,
        v = 0;
    function w() {
        return A == 0 && ((v = (v << 8) | e[t++]), (A = 8)), (v >> --A) & 1;
    }
    const y = 31,
        S = Math.pow(2, y),
        I = S >>> 1,
        N = I >> 1,
        C = S - 1;
    let F = 0;
    for (let H = 0; H < y; H++) F = (F << 1) | w();
    let U = [],
        J = 0,
        Bt = S;
    for (;;) {
        let H = Math.floor(((F - J + 1) * n - 1) / Bt),
            L = 0,
            Pt = i;
        for (; Pt - L > 1; ) {
            let Vt = (L + Pt) >>> 1;
            H < o[Vt] ? (Pt = Vt) : (L = Vt);
        }
        if (L == 0) break;
        U.push(L);
        let W = J + Math.floor((Bt * o[L]) / n),
            Rt = J + Math.floor((Bt * o[L + 1]) / n) - 1;
        for (; !((W ^ Rt) & I); ) (F = ((F << 1) & C) | w()), (W = (W << 1) & C), (Rt = ((Rt << 1) & C) | 1);
        for (; W & ~Rt & N; ) (F = (F & I) | ((F << 1) & (C >>> 1)) | w()), (W = (W << 1) ^ I), (Rt = ((Rt ^ I) << 1) | I | 1);
        (J = W), (Bt = 1 + Rt - W);
    }
    let G = i - 4;
    return U.map((H) => {
        switch (H - G) {
            case 3:
                return G + 65792 + ((e[p++] << 16) | (e[p++] << 8) | e[p++]);
            case 2:
                return G + 256 + ((e[p++] << 8) | e[p++]);
            case 1:
                return G + e[p++];
            default:
                return H - 1;
        }
    });
}
function Js$1(e) {
    let t = 0;
    return () => e[t++];
}
function Gs$1(e) {
    return Js$1(Qs$1(e));
}
function Ys$1(e) {
    return e & 1 ? ~e >> 1 : e >> 1;
}
function Vs$1(e, t) {
    let r = Array(e);
    for (let i = 0; i < e; i++) r[i] = 1 + t();
    return r;
}
function sf(e, t) {
    let r = Array(e);
    for (let i = 0, n = -1; i < e; i++) r[i] = n += 1 + t();
    return r;
}
function Ws$1(e, t) {
    let r = Array(e);
    for (let i = 0, n = 0; i < e; i++) r[i] = n += Ys$1(t());
    return r;
}
function Ur(e, t) {
    let r = sf(e(), e),
        i = e(),
        n = sf(i, e),
        o = Vs$1(i, e);
    for (let h = 0; h < i; h++) for (let p = 0; p < o[h]; p++) r.push(n[h] + p);
    return t ? r.map((h) => t[h]) : r;
}
function Xs$1(e) {
    let t = [];
    for (;;) {
        let r = e();
        if (r == 0) break;
        t.push($s$1(r, e));
    }
    for (;;) {
        let r = e() - 1;
        if (r < 0) break;
        t.push(t0(r, e));
    }
    return js$1(of(t));
}
function Zs$1(e) {
    let t = [];
    for (;;) {
        let r = e();
        if (r == 0) break;
        t.push(r);
    }
    return t;
}
function af(e, t, r) {
    let i = Array(e)
        .fill(void 0)
        .map(() => []);
    for (let n = 0; n < t; n++) Ws$1(e, r).forEach((o, h) => i[h].push(o));
    return i;
}
function $s$1(e, t) {
    let r = 1 + t(),
        i = t(),
        n = Zs$1(t),
        o = af(n.length, 1 + e, t);
    return of(
        o.map((h, p) => {
            const A = h[0],
                v = h.slice(1);
            return Array(n[p])
                .fill(void 0)
                .map((w, y) => {
                    let S = y * i;
                    return [A + y * r, v.map((I) => I + S)];
                });
        })
    );
}
function t0(e, t) {
    let r = 1 + t();
    return af(r, 1 + e, t).map((n) => [n[0], n.slice(1)]);
}
function e0(e) {
    let t = Ur(e).sort((i, n) => i - n);
    return r();
    function r() {
        let i = [];
        for (;;) {
            let v = Ur(e, t);
            if (v.length == 0) break;
            i.push({ set: new Set(v), node: r() });
        }
        i.sort((v, w) => w.set.size - v.set.size);
        let n = e(),
            o = n % 3;
        n = (n / 3) | 0;
        let h = !!(n & 1);
        n >>= 1;
        let p = n == 1,
            A = n == 2;
        return { branches: i, valid: o, fe0f: h, save: p, check: A };
    }
}
function r0() {
    return Gs$1(
        zs$1(
            ""
        )
    );
}
const kr$1 = r0();
new Set(Ur(kr$1)), new Set(Ur(kr$1)), Xs$1(kr$1), e0(kr$1);
const i0 = new Uint8Array(32);
i0.fill(0);
const n0 = `Ethereum Signed Message:
`;
function uf(e) {
    return typeof e == "string" && (e = Bi$1(e)), Si(Cs$1([Bi$1(n0), Bi$1(String(e.length)), e]));
}
const o0 = "address/5.7.0",
    yr$1 = new z$6(o0);
function hf(e) {
    Jt$2(e, 20) || yr$1.throwArgumentError("invalid address", "address", e), (e = e.toLowerCase());
    const t = e.substring(2).split(""),
        r = new Uint8Array(40);
    for (let n = 0; n < 40; n++) r[n] = t[n].charCodeAt(0);
    const i = Ot$2(Si(r));
    for (let n = 0; n < 40; n += 2) i[n >> 1] >> 4 >= 8 && (t[n] = t[n].toUpperCase()), (i[n >> 1] & 15) >= 8 && (t[n + 1] = t[n + 1].toUpperCase());
    return "0x" + t.join("");
}
const s0 = 9007199254740991;
function a0(e) {
    return Math.log10 ? Math.log10(e) : Math.log(e) / Math.LN10;
}
const Ri = {};
for (let e = 0; e < 10; e++) Ri[String(e)] = String(e);
for (let e = 0; e < 26; e++) Ri[String.fromCharCode(65 + e)] = String(10 + e);
const cf = Math.floor(a0(s0));
function u0(e) {
    (e = e.toUpperCase()), (e = e.substring(4) + e.substring(0, 2) + "00");
    let t = e
        .split("")
        .map((i) => Ri[i])
        .join("");
    for (; t.length >= cf; ) {
        let i = t.substring(0, cf);
        t = (parseInt(i, 10) % 97) + t.substring(i.length);
    }
    let r = String(98 - (parseInt(t, 10) % 97));
    for (; r.length < 2; ) r = "0" + r;
    return r;
}
function h0(e) {
    let t = null;
    if ((typeof e != "string" && yr$1.throwArgumentError("invalid address", "address", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)))
        e.substring(0, 2) !== "0x" && (e = "0x" + e),
            (t = hf(e)),
            e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && yr$1.throwArgumentError("bad address checksum", "address", e);
    else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        for (e.substring(2, 4) !== u0(e) && yr$1.throwArgumentError("bad icap checksum", "address", e), t = Us$1(e.substring(4)); t.length < 40; ) t = "0" + t;
        t = hf("0x" + t);
    } else yr$1.throwArgumentError("invalid address", "address", e);
    return t;
}
function wr$1(e, t, r) {
    Object.defineProperty(e, t, { enumerable: !0, value: r, writable: !1 });
}
const l0 = new Uint8Array(32);
l0.fill(0), V$3.from(-1);
const d0 = V$3.from(0),
    p0 = V$3.from(1);
V$3.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), oe$4(p0.toHexString(), 32), oe$4(d0.toHexString(), 32);
var se$2 = {},
    Q$4 = {},
    xr$1 = lf;
function lf(e, t) {
    if (!e) throw new Error(t || "Assertion failed");
}
lf.equal = function (t, r, i) {
    if (t != r) throw new Error(i || "Assertion failed: " + t + " != " + r);
};
var Oi = { exports: {} };
typeof Object.create == "function"
    ? (Oi.exports = function (t, r) {
          r && ((t.super_ = r), (t.prototype = Object.create(r.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } })));
      })
    : (Oi.exports = function (t, r) {
          if (r) {
              t.super_ = r;
              var i = function () {};
              (i.prototype = r.prototype), (t.prototype = new i()), (t.prototype.constructor = t);
          }
      });
var v0 = xr$1,
    g0 = Oi.exports;
Q$4.inherits = g0;
function m0(e, t) {
    return (e.charCodeAt(t) & 64512) !== 55296 || t < 0 || t + 1 >= e.length ? !1 : (e.charCodeAt(t + 1) & 64512) === 56320;
}
function A0(e, t) {
    if (Array.isArray(e)) return e.slice();
    if (!e) return [];
    var r = [];
    if (typeof e == "string")
        if (t) {
            if (t === "hex")
                for (e = e.replace(/[^a-z0-9]+/gi, ""), e.length % 2 !== 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16));
        } else
            for (var i = 0, n = 0; n < e.length; n++) {
                var o = e.charCodeAt(n);
                o < 128
                    ? (r[i++] = o)
                    : o < 2048
                    ? ((r[i++] = (o >> 6) | 192), (r[i++] = (o & 63) | 128))
                    : m0(e, n)
                    ? ((o = 65536 + ((o & 1023) << 10) + (e.charCodeAt(++n) & 1023)),
                      (r[i++] = (o >> 18) | 240),
                      (r[i++] = ((o >> 12) & 63) | 128),
                      (r[i++] = ((o >> 6) & 63) | 128),
                      (r[i++] = (o & 63) | 128))
                    : ((r[i++] = (o >> 12) | 224), (r[i++] = ((o >> 6) & 63) | 128), (r[i++] = (o & 63) | 128));
            }
    else for (n = 0; n < e.length; n++) r[n] = e[n] | 0;
    return r;
}
Q$4.toArray = A0;
function b0(e) {
    for (var t = "", r = 0; r < e.length; r++) t += pf(e[r].toString(16));
    return t;
}
Q$4.toHex = b0;
function df(e) {
    var t = (e >>> 24) | ((e >>> 8) & 65280) | ((e << 8) & 16711680) | ((e & 255) << 24);
    return t >>> 0;
}
Q$4.htonl = df;
function y0(e, t) {
    for (var r = "", i = 0; i < e.length; i++) {
        var n = e[i];
        t === "little" && (n = df(n)), (r += vf(n.toString(16)));
    }
    return r;
}
Q$4.toHex32 = y0;
function pf(e) {
    return e.length === 1 ? "0" + e : e;
}
Q$4.zero2 = pf;
function vf(e) {
    return e.length === 7
        ? "0" + e
        : e.length === 6
        ? "00" + e
        : e.length === 5
        ? "000" + e
        : e.length === 4
        ? "0000" + e
        : e.length === 3
        ? "00000" + e
        : e.length === 2
        ? "000000" + e
        : e.length === 1
        ? "0000000" + e
        : e;
}
Q$4.zero8 = vf;
function w0(e, t, r, i) {
    var n = r - t;
    v0(n % 4 === 0);
    for (var o = new Array(n / 4), h = 0, p = t; h < o.length; h++, p += 4) {
        var A;
        i === "big" ? (A = (e[p] << 24) | (e[p + 1] << 16) | (e[p + 2] << 8) | e[p + 3]) : (A = (e[p + 3] << 24) | (e[p + 2] << 16) | (e[p + 1] << 8) | e[p]),
            (o[h] = A >>> 0);
    }
    return o;
}
Q$4.join32 = w0;
function x0(e, t) {
    for (var r = new Array(e.length * 4), i = 0, n = 0; i < e.length; i++, n += 4) {
        var o = e[i];
        t === "big"
            ? ((r[n] = o >>> 24), (r[n + 1] = (o >>> 16) & 255), (r[n + 2] = (o >>> 8) & 255), (r[n + 3] = o & 255))
            : ((r[n + 3] = o >>> 24), (r[n + 2] = (o >>> 16) & 255), (r[n + 1] = (o >>> 8) & 255), (r[n] = o & 255));
    }
    return r;
}
Q$4.split32 = x0;
function M0(e, t) {
    return (e >>> t) | (e << (32 - t));
}
Q$4.rotr32 = M0;
function E0(e, t) {
    return (e << t) | (e >>> (32 - t));
}
Q$4.rotl32 = E0;
function S0(e, t) {
    return (e + t) >>> 0;
}
Q$4.sum32 = S0;
function N0(e, t, r) {
    return (e + t + r) >>> 0;
}
Q$4.sum32_3 = N0;
function I0(e, t, r, i) {
    return (e + t + r + i) >>> 0;
}
Q$4.sum32_4 = I0;
function _0(e, t, r, i, n) {
    return (e + t + r + i + n) >>> 0;
}
Q$4.sum32_5 = _0;
function B0(e, t, r, i) {
    var n = e[t],
        o = e[t + 1],
        h = (i + o) >>> 0,
        p = (h < i ? 1 : 0) + r + n;
    (e[t] = p >>> 0), (e[t + 1] = h);
}
Q$4.sum64 = B0;
function C0(e, t, r, i) {
    var n = (t + i) >>> 0,
        o = (n < t ? 1 : 0) + e + r;
    return o >>> 0;
}
Q$4.sum64_hi = C0;
function R0(e, t, r, i) {
    var n = t + i;
    return n >>> 0;
}
Q$4.sum64_lo = R0;
function O0(e, t, r, i, n, o, h, p) {
    var A = 0,
        v = t;
    (v = (v + i) >>> 0), (A += v < t ? 1 : 0), (v = (v + o) >>> 0), (A += v < o ? 1 : 0), (v = (v + p) >>> 0), (A += v < p ? 1 : 0);
    var w = e + r + n + h + A;
    return w >>> 0;
}
Q$4.sum64_4_hi = O0;
function P0(e, t, r, i, n, o, h, p) {
    var A = t + i + o + p;
    return A >>> 0;
}
Q$4.sum64_4_lo = P0;
function D0(e, t, r, i, n, o, h, p, A, v) {
    var w = 0,
        y = t;
    (y = (y + i) >>> 0),
        (w += y < t ? 1 : 0),
        (y = (y + o) >>> 0),
        (w += y < o ? 1 : 0),
        (y = (y + p) >>> 0),
        (w += y < p ? 1 : 0),
        (y = (y + v) >>> 0),
        (w += y < v ? 1 : 0);
    var S = e + r + n + h + A + w;
    return S >>> 0;
}
Q$4.sum64_5_hi = D0;
function F0(e, t, r, i, n, o, h, p, A, v) {
    var w = t + i + o + p + v;
    return w >>> 0;
}
Q$4.sum64_5_lo = F0;
function T0(e, t, r) {
    var i = (t << (32 - r)) | (e >>> r);
    return i >>> 0;
}
Q$4.rotr64_hi = T0;
function U0(e, t, r) {
    var i = (e << (32 - r)) | (t >>> r);
    return i >>> 0;
}
Q$4.rotr64_lo = U0;
function k0(e, t, r) {
    return e >>> r;
}
Q$4.shr64_hi = k0;
function q0(e, t, r) {
    var i = (e << (32 - r)) | (t >>> r);
    return i >>> 0;
}
Q$4.shr64_lo = q0;
var or$1 = {},
    gf = Q$4,
    K0 = xr$1;
function qr$1() {
    (this.pending = null),
        (this.pendingTotal = 0),
        (this.blockSize = this.constructor.blockSize),
        (this.outSize = this.constructor.outSize),
        (this.hmacStrength = this.constructor.hmacStrength),
        (this.padLength = this.constructor.padLength / 8),
        (this.endian = "big"),
        (this._delta8 = this.blockSize / 8),
        (this._delta32 = this.blockSize / 32);
}
(or$1.BlockHash = qr$1),
    (qr$1.prototype.update = function (t, r) {
        if (
            ((t = gf.toArray(t, r)),
            this.pending ? (this.pending = this.pending.concat(t)) : (this.pending = t),
            (this.pendingTotal += t.length),
            this.pending.length >= this._delta8)
        ) {
            t = this.pending;
            var i = t.length % this._delta8;
            (this.pending = t.slice(t.length - i, t.length)),
                this.pending.length === 0 && (this.pending = null),
                (t = gf.join32(t, 0, t.length - i, this.endian));
            for (var n = 0; n < t.length; n += this._delta32) this._update(t, n, n + this._delta32);
        }
        return this;
    }),
    (qr$1.prototype.digest = function (t) {
        return this.update(this._pad()), K0(this.pending === null), this._digest(t);
    }),
    (qr$1.prototype._pad = function () {
        var t = this.pendingTotal,
            r = this._delta8,
            i = r - ((t + this.padLength) % r),
            n = new Array(i + this.padLength);
        n[0] = 128;
        for (var o = 1; o < i; o++) n[o] = 0;
        if (((t <<= 3), this.endian === "big")) {
            for (var h = 8; h < this.padLength; h++) n[o++] = 0;
            (n[o++] = 0),
                (n[o++] = 0),
                (n[o++] = 0),
                (n[o++] = 0),
                (n[o++] = (t >>> 24) & 255),
                (n[o++] = (t >>> 16) & 255),
                (n[o++] = (t >>> 8) & 255),
                (n[o++] = t & 255);
        } else
            for (
                n[o++] = t & 255,
                    n[o++] = (t >>> 8) & 255,
                    n[o++] = (t >>> 16) & 255,
                    n[o++] = (t >>> 24) & 255,
                    n[o++] = 0,
                    n[o++] = 0,
                    n[o++] = 0,
                    n[o++] = 0,
                    h = 8;
                h < this.padLength;
                h++
            )
                n[o++] = 0;
        return n;
    });
var sr$2 = {},
    ae$3 = {},
    H0 = Q$4,
    ue$1 = H0.rotr32;
function L0(e, t, r, i) {
    if (e === 0) return mf(t, r, i);
    if (e === 1 || e === 3) return bf(t, r, i);
    if (e === 2) return Af(t, r, i);
}
ae$3.ft_1 = L0;
function mf(e, t, r) {
    return (e & t) ^ (~e & r);
}
ae$3.ch32 = mf;
function Af(e, t, r) {
    return (e & t) ^ (e & r) ^ (t & r);
}
ae$3.maj32 = Af;
function bf(e, t, r) {
    return e ^ t ^ r;
}
ae$3.p32 = bf;
function z0(e) {
    return ue$1(e, 2) ^ ue$1(e, 13) ^ ue$1(e, 22);
}
ae$3.s0_256 = z0;
function j0(e) {
    return ue$1(e, 6) ^ ue$1(e, 11) ^ ue$1(e, 25);
}
ae$3.s1_256 = j0;
function Q0(e) {
    return ue$1(e, 7) ^ ue$1(e, 18) ^ (e >>> 3);
}
ae$3.g0_256 = Q0;
function J0(e) {
    return ue$1(e, 17) ^ ue$1(e, 19) ^ (e >>> 10);
}
ae$3.g1_256 = J0;
var ar$1 = Q$4,
    G0 = or$1,
    Y0 = ae$3,
    Pi = ar$1.rotl32,
    Mr$1 = ar$1.sum32,
    V0 = ar$1.sum32_5,
    W0 = Y0.ft_1,
    yf = G0.BlockHash,
    X0 = [1518500249, 1859775393, 2400959708, 3395469782];
function he$1() {
    if (!(this instanceof he$1)) return new he$1();
    yf.call(this), (this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]), (this.W = new Array(80));
}
ar$1.inherits(he$1, yf);
var Z0 = he$1;
(he$1.blockSize = 512),
    (he$1.outSize = 160),
    (he$1.hmacStrength = 80),
    (he$1.padLength = 64),
    (he$1.prototype._update = function (t, r) {
        for (var i = this.W, n = 0; n < 16; n++) i[n] = t[r + n];
        for (; n < i.length; n++) i[n] = Pi(i[n - 3] ^ i[n - 8] ^ i[n - 14] ^ i[n - 16], 1);
        var o = this.h[0],
            h = this.h[1],
            p = this.h[2],
            A = this.h[3],
            v = this.h[4];
        for (n = 0; n < i.length; n++) {
            var w = ~~(n / 20),
                y = V0(Pi(o, 5), W0(w, h, p, A), v, i[n], X0[w]);
            (v = A), (A = p), (p = Pi(h, 30)), (h = o), (o = y);
        }
        (this.h[0] = Mr$1(this.h[0], o)),
            (this.h[1] = Mr$1(this.h[1], h)),
            (this.h[2] = Mr$1(this.h[2], p)),
            (this.h[3] = Mr$1(this.h[3], A)),
            (this.h[4] = Mr$1(this.h[4], v));
    }),
    (he$1.prototype._digest = function (t) {
        return t === "hex" ? ar$1.toHex32(this.h, "big") : ar$1.split32(this.h, "big");
    });
var ur$1 = Q$4,
    $0 = or$1,
    hr$2 = ae$3,
    ta = xr$1,
    ie$1 = ur$1.sum32,
    ea = ur$1.sum32_4,
    ra = ur$1.sum32_5,
    ia = hr$2.ch32,
    na = hr$2.maj32,
    fa = hr$2.s0_256,
    oa = hr$2.s1_256,
    sa = hr$2.g0_256,
    aa = hr$2.g1_256,
    wf = $0.BlockHash,
    ua = [
        1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388,
        2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349,
        2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350,
        2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877,
        958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298,
    ];
function ce$1() {
    if (!(this instanceof ce$1)) return new ce$1();
    wf.call(this),
        (this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]),
        (this.k = ua),
        (this.W = new Array(64));
}
ur$1.inherits(ce$1, wf);
var xf = ce$1;
(ce$1.blockSize = 512),
    (ce$1.outSize = 256),
    (ce$1.hmacStrength = 192),
    (ce$1.padLength = 64),
    (ce$1.prototype._update = function (t, r) {
        for (var i = this.W, n = 0; n < 16; n++) i[n] = t[r + n];
        for (; n < i.length; n++) i[n] = ea(aa(i[n - 2]), i[n - 7], sa(i[n - 15]), i[n - 16]);
        var o = this.h[0],
            h = this.h[1],
            p = this.h[2],
            A = this.h[3],
            v = this.h[4],
            w = this.h[5],
            y = this.h[6],
            S = this.h[7];
        for (ta(this.k.length === i.length), n = 0; n < i.length; n++) {
            var I = ra(S, oa(v), ia(v, w, y), this.k[n], i[n]),
                N = ie$1(fa(o), na(o, h, p));
            (S = y), (y = w), (w = v), (v = ie$1(A, I)), (A = p), (p = h), (h = o), (o = ie$1(I, N));
        }
        (this.h[0] = ie$1(this.h[0], o)),
            (this.h[1] = ie$1(this.h[1], h)),
            (this.h[2] = ie$1(this.h[2], p)),
            (this.h[3] = ie$1(this.h[3], A)),
            (this.h[4] = ie$1(this.h[4], v)),
            (this.h[5] = ie$1(this.h[5], w)),
            (this.h[6] = ie$1(this.h[6], y)),
            (this.h[7] = ie$1(this.h[7], S));
    }),
    (ce$1.prototype._digest = function (t) {
        return t === "hex" ? ur$1.toHex32(this.h, "big") : ur$1.split32(this.h, "big");
    });
var Di$1 = Q$4,
    Mf = xf;
function ye$2() {
    if (!(this instanceof ye$2)) return new ye$2();
    Mf.call(this), (this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]);
}
Di$1.inherits(ye$2, Mf);
var ha = ye$2;
(ye$2.blockSize = 512),
    (ye$2.outSize = 224),
    (ye$2.hmacStrength = 192),
    (ye$2.padLength = 64),
    (ye$2.prototype._digest = function (t) {
        return t === "hex" ? Di$1.toHex32(this.h.slice(0, 7), "big") : Di$1.split32(this.h.slice(0, 7), "big");
    });
var jt$2 = Q$4,
    ca = or$1,
    la = xr$1,
    le$1 = jt$2.rotr64_hi,
    de$1 = jt$2.rotr64_lo,
    Ef = jt$2.shr64_hi,
    Sf = jt$2.shr64_lo,
    Be$1 = jt$2.sum64,
    Fi$1 = jt$2.sum64_hi,
    Ti = jt$2.sum64_lo,
    da = jt$2.sum64_4_hi,
    pa = jt$2.sum64_4_lo,
    va = jt$2.sum64_5_hi,
    ga = jt$2.sum64_5_lo,
    Nf = ca.BlockHash,
    ma = [
        1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265,
        2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994,
        1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078,
        2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882,
        3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993,
        3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390,
        1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657,
        3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616,
        1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899,
        1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249,
        3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992,
        116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298,
        365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591,
    ];
function ne$3() {
    if (!(this instanceof ne$3)) return new ne$3();
    Nf.call(this),
        (this.h = [
            1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199,
            528734635, 4215389547, 1541459225, 327033209,
        ]),
        (this.k = ma),
        (this.W = new Array(160));
}
jt$2.inherits(ne$3, Nf);
var If = ne$3;
(ne$3.blockSize = 1024),
    (ne$3.outSize = 512),
    (ne$3.hmacStrength = 192),
    (ne$3.padLength = 128),
    (ne$3.prototype._prepareBlock = function (t, r) {
        for (var i = this.W, n = 0; n < 32; n++) i[n] = t[r + n];
        for (; n < i.length; n += 2) {
            var o = _a(i[n - 4], i[n - 3]),
                h = Ba(i[n - 4], i[n - 3]),
                p = i[n - 14],
                A = i[n - 13],
                v = Na$1(i[n - 30], i[n - 29]),
                w = Ia(i[n - 30], i[n - 29]),
                y = i[n - 32],
                S = i[n - 31];
            (i[n] = da(o, h, p, A, v, w, y, S)), (i[n + 1] = pa(o, h, p, A, v, w, y, S));
        }
    }),
    (ne$3.prototype._update = function (t, r) {
        this._prepareBlock(t, r);
        var i = this.W,
            n = this.h[0],
            o = this.h[1],
            h = this.h[2],
            p = this.h[3],
            A = this.h[4],
            v = this.h[5],
            w = this.h[6],
            y = this.h[7],
            S = this.h[8],
            I = this.h[9],
            N = this.h[10],
            C = this.h[11],
            F = this.h[12],
            U = this.h[13],
            J = this.h[14],
            Bt = this.h[15];
        la(this.k.length === i.length);
        for (var G = 0; G < i.length; G += 2) {
            var H = J,
                L = Bt,
                Pt = Ea(S, I),
                W = Sa$1(S, I),
                Rt = Aa(S, I, N, C, F),
                Vt = ba$1(S, I, N, C, F, U),
                Y = this.k[G],
                Wt = this.k[G + 1],
                b = i[G],
                f = i[G + 1],
                a = va(H, L, Pt, W, Rt, Vt, Y, Wt, b, f),
                c = ga(H, L, Pt, W, Rt, Vt, Y, Wt, b, f);
            (H = xa(n, o)), (L = Ma(n, o)), (Pt = ya$1(n, o, h, p, A)), (W = wa(n, o, h, p, A, v));
            var d = Fi$1(H, L, Pt, W),
                m = Ti(H, L, Pt, W);
            (J = F),
                (Bt = U),
                (F = N),
                (U = C),
                (N = S),
                (C = I),
                (S = Fi$1(w, y, a, c)),
                (I = Ti(y, y, a, c)),
                (w = A),
                (y = v),
                (A = h),
                (v = p),
                (h = n),
                (p = o),
                (n = Fi$1(a, c, d, m)),
                (o = Ti(a, c, d, m));
        }
        Be$1(this.h, 0, n, o),
            Be$1(this.h, 2, h, p),
            Be$1(this.h, 4, A, v),
            Be$1(this.h, 6, w, y),
            Be$1(this.h, 8, S, I),
            Be$1(this.h, 10, N, C),
            Be$1(this.h, 12, F, U),
            Be$1(this.h, 14, J, Bt);
    }),
    (ne$3.prototype._digest = function (t) {
        return t === "hex" ? jt$2.toHex32(this.h, "big") : jt$2.split32(this.h, "big");
    });
function Aa(e, t, r, i, n) {
    var o = (e & r) ^ (~e & n);
    return o < 0 && (o += 4294967296), o;
}
function ba$1(e, t, r, i, n, o) {
    var h = (t & i) ^ (~t & o);
    return h < 0 && (h += 4294967296), h;
}
function ya$1(e, t, r, i, n) {
    var o = (e & r) ^ (e & n) ^ (r & n);
    return o < 0 && (o += 4294967296), o;
}
function wa(e, t, r, i, n, o) {
    var h = (t & i) ^ (t & o) ^ (i & o);
    return h < 0 && (h += 4294967296), h;
}
function xa(e, t) {
    var r = le$1(e, t, 28),
        i = le$1(t, e, 2),
        n = le$1(t, e, 7),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function Ma(e, t) {
    var r = de$1(e, t, 28),
        i = de$1(t, e, 2),
        n = de$1(t, e, 7),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function Ea(e, t) {
    var r = le$1(e, t, 14),
        i = le$1(e, t, 18),
        n = le$1(t, e, 9),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function Sa$1(e, t) {
    var r = de$1(e, t, 14),
        i = de$1(e, t, 18),
        n = de$1(t, e, 9),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function Na$1(e, t) {
    var r = le$1(e, t, 1),
        i = le$1(e, t, 8),
        n = Ef(e, t, 7),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function Ia(e, t) {
    var r = de$1(e, t, 1),
        i = de$1(e, t, 8),
        n = Sf(e, t, 7),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function _a(e, t) {
    var r = le$1(e, t, 19),
        i = le$1(t, e, 29),
        n = Ef(e, t, 6),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
function Ba(e, t) {
    var r = de$1(e, t, 19),
        i = de$1(t, e, 29),
        n = Sf(e, t, 6),
        o = r ^ i ^ n;
    return o < 0 && (o += 4294967296), o;
}
var Ui$1 = Q$4,
    _f = If;
function we$3() {
    if (!(this instanceof we$3)) return new we$3();
    _f.call(this),
        (this.h = [
            3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025,
            3675008525, 1694076839, 1203062813, 3204075428,
        ]);
}
Ui$1.inherits(we$3, _f);
var Ca = we$3;
(we$3.blockSize = 1024),
    (we$3.outSize = 384),
    (we$3.hmacStrength = 192),
    (we$3.padLength = 128),
    (we$3.prototype._digest = function (t) {
        return t === "hex" ? Ui$1.toHex32(this.h.slice(0, 12), "big") : Ui$1.split32(this.h.slice(0, 12), "big");
    }),
    (sr$2.sha1 = Z0),
    (sr$2.sha224 = ha),
    (sr$2.sha256 = xf),
    (sr$2.sha384 = Ca),
    (sr$2.sha512 = If);
var Bf = {},
    Xe$1 = Q$4,
    Ra$1 = or$1,
    Kr = Xe$1.rotl32,
    Cf = Xe$1.sum32,
    Er$1 = Xe$1.sum32_3,
    Rf = Xe$1.sum32_4,
    Of = Ra$1.BlockHash;
function pe() {
    if (!(this instanceof pe)) return new pe();
    Of.call(this), (this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]), (this.endian = "little");
}
Xe$1.inherits(pe, Of),
    (Bf.ripemd160 = pe),
    (pe.blockSize = 512),
    (pe.outSize = 160),
    (pe.hmacStrength = 192),
    (pe.padLength = 64),
    (pe.prototype._update = function (t, r) {
        for (var i = this.h[0], n = this.h[1], o = this.h[2], h = this.h[3], p = this.h[4], A = i, v = n, w = o, y = h, S = p, I = 0; I < 80; I++) {
            var N = Cf(Kr(Rf(i, Pf(I, n, o, h), t[Da$1[I] + r], Oa$1(I)), Ta$1[I]), p);
            (i = p),
                (p = h),
                (h = Kr(o, 10)),
                (o = n),
                (n = N),
                (N = Cf(Kr(Rf(A, Pf(79 - I, v, w, y), t[Fa$1[I] + r], Pa(I)), Ua$1[I]), S)),
                (A = S),
                (S = y),
                (y = Kr(w, 10)),
                (w = v),
                (v = N);
        }
        (N = Er$1(this.h[1], o, y)),
            (this.h[1] = Er$1(this.h[2], h, S)),
            (this.h[2] = Er$1(this.h[3], p, A)),
            (this.h[3] = Er$1(this.h[4], i, v)),
            (this.h[4] = Er$1(this.h[0], n, w)),
            (this.h[0] = N);
    }),
    (pe.prototype._digest = function (t) {
        return t === "hex" ? Xe$1.toHex32(this.h, "little") : Xe$1.split32(this.h, "little");
    });
function Pf(e, t, r, i) {
    return e <= 15 ? t ^ r ^ i : e <= 31 ? (t & r) | (~t & i) : e <= 47 ? (t | ~r) ^ i : e <= 63 ? (t & i) | (r & ~i) : t ^ (r | ~i);
}
function Oa$1(e) {
    return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;
}
function Pa(e) {
    return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;
}
var Da$1 = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13,
        11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
    ],
    Fa$1 = [
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10,
        0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
    ],
    Ta$1 = [
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13,
        6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
    ],
    Ua$1 = [
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5,
        14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
    ],
    ka = Q$4,
    qa$1 = xr$1;
function cr$2(e, t, r) {
    if (!(this instanceof cr$2)) return new cr$2(e, t, r);
    (this.Hash = e), (this.blockSize = e.blockSize / 8), (this.outSize = e.outSize / 8), (this.inner = null), (this.outer = null), this._init(ka.toArray(t, r));
}
var Ka = cr$2;
(cr$2.prototype._init = function (t) {
    t.length > this.blockSize && (t = new this.Hash().update(t).digest()), qa$1(t.length <= this.blockSize);
    for (var r = t.length; r < this.blockSize; r++) t.push(0);
    for (r = 0; r < t.length; r++) t[r] ^= 54;
    for (this.inner = new this.Hash().update(t), r = 0; r < t.length; r++) t[r] ^= 106;
    this.outer = new this.Hash().update(t);
}),
    (cr$2.prototype.update = function (t, r) {
        return this.inner.update(t, r), this;
    }),
    (cr$2.prototype.digest = function (t) {
        return this.outer.update(this.inner.digest()), this.outer.digest(t);
    }),
    (function (e) {
        var t = e;
        (t.utils = Q$4),
            (t.common = or$1),
            (t.sha = sr$2),
            (t.ripemd = Bf),
            (t.hmac = Ka),
            (t.sha1 = t.sha.sha1),
            (t.sha256 = t.sha.sha256),
            (t.sha224 = t.sha.sha224),
            (t.sha384 = t.sha.sha384),
            (t.sha512 = t.sha.sha512),
            (t.ripemd160 = t.ripemd.ripemd160);
    })(se$2);
function lr$2(e, t, r) {
    return (
        (r = {
            path: t,
            exports: {},
            require: function (i, n) {
                return Ha$1(i, n ?? r.path);
            },
        }),
        e(r, r.exports),
        r.exports
    );
}
function Ha$1() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var ki = Df;
function Df(e, t) {
    if (!e) throw new Error(t || "Assertion failed");
}
Df.equal = function (t, r, i) {
    if (t != r) throw new Error(i || "Assertion failed: " + t + " != " + r);
};
var fe$2 = lr$2(function (e, t) {
        var r = t;
        function i(h, p) {
            if (Array.isArray(h)) return h.slice();
            if (!h) return [];
            var A = [];
            if (typeof h != "string") {
                for (var v = 0; v < h.length; v++) A[v] = h[v] | 0;
                return A;
            }
            if (p === "hex") {
                (h = h.replace(/[^a-z0-9]+/gi, "")), h.length % 2 !== 0 && (h = "0" + h);
                for (var v = 0; v < h.length; v += 2) A.push(parseInt(h[v] + h[v + 1], 16));
            } else
                for (var v = 0; v < h.length; v++) {
                    var w = h.charCodeAt(v),
                        y = w >> 8,
                        S = w & 255;
                    y ? A.push(y, S) : A.push(S);
                }
            return A;
        }
        r.toArray = i;
        function n(h) {
            return h.length === 1 ? "0" + h : h;
        }
        r.zero2 = n;
        function o(h) {
            for (var p = "", A = 0; A < h.length; A++) p += n(h[A].toString(16));
            return p;
        }
        (r.toHex = o),
            (r.encode = function (p, A) {
                return A === "hex" ? o(p) : p;
            });
    }),
    Gt$2 = lr$2(function (e, t) {
        var r = t;
        (r.assert = ki), (r.toArray = fe$2.toArray), (r.zero2 = fe$2.zero2), (r.toHex = fe$2.toHex), (r.encode = fe$2.encode);
        function i(A, v, w) {
            var y = new Array(Math.max(A.bitLength(), w) + 1);
            y.fill(0);
            for (var S = 1 << (v + 1), I = A.clone(), N = 0; N < y.length; N++) {
                var C,
                    F = I.andln(S - 1);
                I.isOdd() ? (F > (S >> 1) - 1 ? (C = (S >> 1) - F) : (C = F), I.isubn(C)) : (C = 0), (y[N] = C), I.iushrn(1);
            }
            return y;
        }
        r.getNAF = i;
        function n(A, v) {
            var w = [[], []];
            (A = A.clone()), (v = v.clone());
            for (var y = 0, S = 0, I; A.cmpn(-y) > 0 || v.cmpn(-S) > 0; ) {
                var N = (A.andln(3) + y) & 3,
                    C = (v.andln(3) + S) & 3;
                N === 3 && (N = -1), C === 3 && (C = -1);
                var F;
                N & 1 ? ((I = (A.andln(7) + y) & 7), (I === 3 || I === 5) && C === 2 ? (F = -N) : (F = N)) : (F = 0), w[0].push(F);
                var U;
                C & 1 ? ((I = (v.andln(7) + S) & 7), (I === 3 || I === 5) && N === 2 ? (U = -C) : (U = C)) : (U = 0),
                    w[1].push(U),
                    2 * y === F + 1 && (y = 1 - y),
                    2 * S === U + 1 && (S = 1 - S),
                    A.iushrn(1),
                    v.iushrn(1);
            }
            return w;
        }
        r.getJSF = n;
        function o(A, v, w) {
            var y = "_" + v;
            A.prototype[v] = function () {
                return this[y] !== void 0 ? this[y] : (this[y] = w.call(this));
            };
        }
        r.cachedProperty = o;
        function h(A) {
            return typeof A == "string" ? r.toArray(A, "hex") : A;
        }
        r.parseBytes = h;
        function p(A) {
            return new K$3(A, "hex", "le");
        }
        r.intFromLE = p;
    }),
    Hr$1 = Gt$2.getNAF,
    La$1 = Gt$2.getJSF,
    Lr$1 = Gt$2.assert;
function Ce$3(e, t) {
    (this.type = e),
        (this.p = new K$3(t.p, 16)),
        (this.red = t.prime ? K$3.red(t.prime) : K$3.mont(this.p)),
        (this.zero = new K$3(0).toRed(this.red)),
        (this.one = new K$3(1).toRed(this.red)),
        (this.two = new K$3(2).toRed(this.red)),
        (this.n = t.n && new K$3(t.n, 16)),
        (this.g = t.g && this.pointFromJSON(t.g, t.gRed)),
        (this._wnafT1 = new Array(4)),
        (this._wnafT2 = new Array(4)),
        (this._wnafT3 = new Array(4)),
        (this._wnafT4 = new Array(4)),
        (this._bitLength = this.n ? this.n.bitLength() : 0);
    var r = this.n && this.p.div(this.n);
    !r || r.cmpn(100) > 0 ? (this.redN = null) : ((this._maxwellTrick = !0), (this.redN = this.n.toRed(this.red)));
}
var Ze$1 = Ce$3;
(Ce$3.prototype.point = function () {
    throw new Error("Not implemented");
}),
    (Ce$3.prototype.validate = function () {
        throw new Error("Not implemented");
    }),
    (Ce$3.prototype._fixedNafMul = function (t, r) {
        Lr$1(t.precomputed);
        var i = t._getDoubles(),
            n = Hr$1(r, 1, this._bitLength),
            o = (1 << (i.step + 1)) - (i.step % 2 === 0 ? 2 : 1);
        o /= 3;
        var h = [],
            p,
            A;
        for (p = 0; p < n.length; p += i.step) {
            A = 0;
            for (var v = p + i.step - 1; v >= p; v--) A = (A << 1) + n[v];
            h.push(A);
        }
        for (var w = this.jpoint(null, null, null), y = this.jpoint(null, null, null), S = o; S > 0; S--) {
            for (p = 0; p < h.length; p++) (A = h[p]), A === S ? (y = y.mixedAdd(i.points[p])) : A === -S && (y = y.mixedAdd(i.points[p].neg()));
            w = w.add(y);
        }
        return w.toP();
    }),
    (Ce$3.prototype._wnafMul = function (t, r) {
        var i = 4,
            n = t._getNAFPoints(i);
        i = n.wnd;
        for (var o = n.points, h = Hr$1(r, i, this._bitLength), p = this.jpoint(null, null, null), A = h.length - 1; A >= 0; A--) {
            for (var v = 0; A >= 0 && h[A] === 0; A--) v++;
            if ((A >= 0 && v++, (p = p.dblp(v)), A < 0)) break;
            var w = h[A];
            Lr$1(w !== 0),
                t.type === "affine"
                    ? w > 0
                        ? (p = p.mixedAdd(o[(w - 1) >> 1]))
                        : (p = p.mixedAdd(o[(-w - 1) >> 1].neg()))
                    : w > 0
                    ? (p = p.add(o[(w - 1) >> 1]))
                    : (p = p.add(o[(-w - 1) >> 1].neg()));
        }
        return t.type === "affine" ? p.toP() : p;
    }),
    (Ce$3.prototype._wnafMulAdd = function (t, r, i, n, o) {
        var h = this._wnafT1,
            p = this._wnafT2,
            A = this._wnafT3,
            v = 0,
            w,
            y,
            S;
        for (w = 0; w < n; w++) {
            S = r[w];
            var I = S._getNAFPoints(t);
            (h[w] = I.wnd), (p[w] = I.points);
        }
        for (w = n - 1; w >= 1; w -= 2) {
            var N = w - 1,
                C = w;
            if (h[N] !== 1 || h[C] !== 1) {
                (A[N] = Hr$1(i[N], h[N], this._bitLength)),
                    (A[C] = Hr$1(i[C], h[C], this._bitLength)),
                    (v = Math.max(A[N].length, v)),
                    (v = Math.max(A[C].length, v));
                continue;
            }
            var F = [r[N], null, null, r[C]];
            r[N].y.cmp(r[C].y) === 0
                ? ((F[1] = r[N].add(r[C])), (F[2] = r[N].toJ().mixedAdd(r[C].neg())))
                : r[N].y.cmp(r[C].y.redNeg()) === 0
                ? ((F[1] = r[N].toJ().mixedAdd(r[C])), (F[2] = r[N].add(r[C].neg())))
                : ((F[1] = r[N].toJ().mixedAdd(r[C])), (F[2] = r[N].toJ().mixedAdd(r[C].neg())));
            var U = [-3, -1, -5, -7, 0, 7, 5, 1, 3],
                J = La$1(i[N], i[C]);
            for (v = Math.max(J[0].length, v), A[N] = new Array(v), A[C] = new Array(v), y = 0; y < v; y++) {
                var Bt = J[0][y] | 0,
                    G = J[1][y] | 0;
                (A[N][y] = U[(Bt + 1) * 3 + (G + 1)]), (A[C][y] = 0), (p[N] = F);
            }
        }
        var H = this.jpoint(null, null, null),
            L = this._wnafT4;
        for (w = v; w >= 0; w--) {
            for (var Pt = 0; w >= 0; ) {
                var W = !0;
                for (y = 0; y < n; y++) (L[y] = A[y][w] | 0), L[y] !== 0 && (W = !1);
                if (!W) break;
                Pt++, w--;
            }
            if ((w >= 0 && Pt++, (H = H.dblp(Pt)), w < 0)) break;
            for (y = 0; y < n; y++) {
                var Rt = L[y];
                Rt !== 0 &&
                    (Rt > 0 ? (S = p[y][(Rt - 1) >> 1]) : Rt < 0 && (S = p[y][(-Rt - 1) >> 1].neg()),
                    S.type === "affine" ? (H = H.mixedAdd(S)) : (H = H.add(S)));
            }
        }
        for (w = 0; w < n; w++) p[w] = null;
        return o ? H : H.toP();
    });
function $t$2(e, t) {
    (this.curve = e), (this.type = t), (this.precomputed = null);
}
(Ce$3.BasePoint = $t$2),
    ($t$2.prototype.eq = function () {
        throw new Error("Not implemented");
    }),
    ($t$2.prototype.validate = function () {
        return this.curve.validate(this);
    }),
    (Ce$3.prototype.decodePoint = function (t, r) {
        t = Gt$2.toArray(t, r);
        var i = this.p.byteLength();
        if ((t[0] === 4 || t[0] === 6 || t[0] === 7) && t.length - 1 === 2 * i) {
            t[0] === 6 ? Lr$1(t[t.length - 1] % 2 === 0) : t[0] === 7 && Lr$1(t[t.length - 1] % 2 === 1);
            var n = this.point(t.slice(1, 1 + i), t.slice(1 + i, 1 + 2 * i));
            return n;
        } else if ((t[0] === 2 || t[0] === 3) && t.length - 1 === i) return this.pointFromX(t.slice(1, 1 + i), t[0] === 3);
        throw new Error("Unknown point format");
    }),
    ($t$2.prototype.encodeCompressed = function (t) {
        return this.encode(t, !0);
    }),
    ($t$2.prototype._encode = function (t) {
        var r = this.curve.p.byteLength(),
            i = this.getX().toArray("be", r);
        return t ? [this.getY().isEven() ? 2 : 3].concat(i) : [4].concat(i, this.getY().toArray("be", r));
    }),
    ($t$2.prototype.encode = function (t, r) {
        return Gt$2.encode(this._encode(r), t);
    }),
    ($t$2.prototype.precompute = function (t) {
        if (this.precomputed) return this;
        var r = { doubles: null, naf: null, beta: null };
        return (r.naf = this._getNAFPoints(8)), (r.doubles = this._getDoubles(4, t)), (r.beta = this._getBeta()), (this.precomputed = r), this;
    }),
    ($t$2.prototype._hasDoubles = function (t) {
        if (!this.precomputed) return !1;
        var r = this.precomputed.doubles;
        return r ? r.points.length >= Math.ceil((t.bitLength() + 1) / r.step) : !1;
    }),
    ($t$2.prototype._getDoubles = function (t, r) {
        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
        for (var i = [this], n = this, o = 0; o < r; o += t) {
            for (var h = 0; h < t; h++) n = n.dbl();
            i.push(n);
        }
        return { step: t, points: i };
    }),
    ($t$2.prototype._getNAFPoints = function (t) {
        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
        for (var r = [this], i = (1 << t) - 1, n = i === 1 ? null : this.dbl(), o = 1; o < i; o++) r[o] = r[o - 1].add(n);
        return { wnd: t, points: r };
    }),
    ($t$2.prototype._getBeta = function () {
        return null;
    }),
    ($t$2.prototype.dblp = function (t) {
        for (var r = this, i = 0; i < t; i++) r = r.dbl();
        return r;
    });
var qi = lr$2(function (e) {
        typeof Object.create == "function"
            ? (e.exports = function (r, i) {
                  i &&
                      ((r.super_ = i),
                      (r.prototype = Object.create(i.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } })));
              })
            : (e.exports = function (r, i) {
                  if (i) {
                      r.super_ = i;
                      var n = function () {};
                      (n.prototype = i.prototype), (r.prototype = new n()), (r.prototype.constructor = r);
                  }
              });
    }),
    za = Gt$2.assert;
function te$3(e) {
    Ze$1.call(this, "short", e),
        (this.a = new K$3(e.a, 16).toRed(this.red)),
        (this.b = new K$3(e.b, 16).toRed(this.red)),
        (this.tinv = this.two.redInvm()),
        (this.zeroA = this.a.fromRed().cmpn(0) === 0),
        (this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0),
        (this.endo = this._getEndomorphism(e)),
        (this._endoWnafT1 = new Array(4)),
        (this._endoWnafT2 = new Array(4));
}
qi(te$3, Ze$1);
var ja = te$3;
(te$3.prototype._getEndomorphism = function (t) {
    if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
        var r, i;
        if (t.beta) r = new K$3(t.beta, 16).toRed(this.red);
        else {
            var n = this._getEndoRoots(this.p);
            (r = n[0].cmp(n[1]) < 0 ? n[0] : n[1]), (r = r.toRed(this.red));
        }
        if (t.lambda) i = new K$3(t.lambda, 16);
        else {
            var o = this._getEndoRoots(this.n);
            this.g.mul(o[0]).x.cmp(this.g.x.redMul(r)) === 0 ? (i = o[0]) : ((i = o[1]), za(this.g.mul(i).x.cmp(this.g.x.redMul(r)) === 0));
        }
        var h;
        return (
            t.basis
                ? (h = t.basis.map(function (p) {
                      return { a: new K$3(p.a, 16), b: new K$3(p.b, 16) };
                  }))
                : (h = this._getEndoBasis(i)),
            { beta: r, lambda: i, basis: h }
        );
    }
}),
    (te$3.prototype._getEndoRoots = function (t) {
        var r = t === this.p ? this.red : K$3.mont(t),
            i = new K$3(2).toRed(r).redInvm(),
            n = i.redNeg(),
            o = new K$3(3).toRed(r).redNeg().redSqrt().redMul(i),
            h = n.redAdd(o).fromRed(),
            p = n.redSub(o).fromRed();
        return [h, p];
    }),
    (te$3.prototype._getEndoBasis = function (t) {
        for (
            var r = this.n.ushrn(Math.floor(this.n.bitLength() / 2)),
                i = t,
                n = this.n.clone(),
                o = new K$3(1),
                h = new K$3(0),
                p = new K$3(0),
                A = new K$3(1),
                v,
                w,
                y,
                S,
                I,
                N,
                C,
                F = 0,
                U,
                J;
            i.cmpn(0) !== 0;

        ) {
            var Bt = n.div(i);
            (U = n.sub(Bt.mul(i))), (J = p.sub(Bt.mul(o)));
            var G = A.sub(Bt.mul(h));
            if (!y && U.cmp(r) < 0) (v = C.neg()), (w = o), (y = U.neg()), (S = J);
            else if (y && ++F === 2) break;
            (C = U), (n = i), (i = U), (p = o), (o = J), (A = h), (h = G);
        }
        (I = U.neg()), (N = J);
        var H = y.sqr().add(S.sqr()),
            L = I.sqr().add(N.sqr());
        return (
            L.cmp(H) >= 0 && ((I = v), (N = w)),
            y.negative && ((y = y.neg()), (S = S.neg())),
            I.negative && ((I = I.neg()), (N = N.neg())),
            [
                { a: y, b: S },
                { a: I, b: N },
            ]
        );
    }),
    (te$3.prototype._endoSplit = function (t) {
        var r = this.endo.basis,
            i = r[0],
            n = r[1],
            o = n.b.mul(t).divRound(this.n),
            h = i.b.neg().mul(t).divRound(this.n),
            p = o.mul(i.a),
            A = h.mul(n.a),
            v = o.mul(i.b),
            w = h.mul(n.b),
            y = t.sub(p).sub(A),
            S = v.add(w).neg();
        return { k1: y, k2: S };
    }),
    (te$3.prototype.pointFromX = function (t, r) {
        (t = new K$3(t, 16)), t.red || (t = t.toRed(this.red));
        var i = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),
            n = i.redSqrt();
        if (n.redSqr().redSub(i).cmp(this.zero) !== 0) throw new Error("invalid point");
        var o = n.fromRed().isOdd();
        return ((r && !o) || (!r && o)) && (n = n.redNeg()), this.point(t, n);
    }),
    (te$3.prototype.validate = function (t) {
        if (t.inf) return !0;
        var r = t.x,
            i = t.y,
            n = this.a.redMul(r),
            o = r.redSqr().redMul(r).redIAdd(n).redIAdd(this.b);
        return i.redSqr().redISub(o).cmpn(0) === 0;
    }),
    (te$3.prototype._endoWnafMulAdd = function (t, r, i) {
        for (var n = this._endoWnafT1, o = this._endoWnafT2, h = 0; h < t.length; h++) {
            var p = this._endoSplit(r[h]),
                A = t[h],
                v = A._getBeta();
            p.k1.negative && (p.k1.ineg(), (A = A.neg(!0))),
                p.k2.negative && (p.k2.ineg(), (v = v.neg(!0))),
                (n[h * 2] = A),
                (n[h * 2 + 1] = v),
                (o[h * 2] = p.k1),
                (o[h * 2 + 1] = p.k2);
        }
        for (var w = this._wnafMulAdd(1, n, o, h * 2, i), y = 0; y < h * 2; y++) (n[y] = null), (o[y] = null);
        return w;
    });
function Ft$1(e, t, r, i) {
    Ze$1.BasePoint.call(this, e, "affine"),
        t === null && r === null
            ? ((this.x = null), (this.y = null), (this.inf = !0))
            : ((this.x = new K$3(t, 16)),
              (this.y = new K$3(r, 16)),
              i && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)),
              this.x.red || (this.x = this.x.toRed(this.curve.red)),
              this.y.red || (this.y = this.y.toRed(this.curve.red)),
              (this.inf = !1));
}
qi(Ft$1, Ze$1.BasePoint),
    (te$3.prototype.point = function (t, r, i) {
        return new Ft$1(this, t, r, i);
    }),
    (te$3.prototype.pointFromJSON = function (t, r) {
        return Ft$1.fromJSON(this, t, r);
    }),
    (Ft$1.prototype._getBeta = function () {
        if (this.curve.endo) {
            var t = this.precomputed;
            if (t && t.beta) return t.beta;
            var r = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (t) {
                var i = this.curve,
                    n = function (o) {
                        return i.point(o.x.redMul(i.endo.beta), o.y);
                    };
                (t.beta = r),
                    (r.precomputed = {
                        beta: null,
                        naf: t.naf && { wnd: t.naf.wnd, points: t.naf.points.map(n) },
                        doubles: t.doubles && { step: t.doubles.step, points: t.doubles.points.map(n) },
                    });
            }
            return r;
        }
    }),
    (Ft$1.prototype.toJSON = function () {
        return this.precomputed
            ? [
                  this.x,
                  this.y,
                  this.precomputed && {
                      doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) },
                      naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) },
                  },
              ]
            : [this.x, this.y];
    }),
    (Ft$1.fromJSON = function (t, r, i) {
        typeof r == "string" && (r = JSON.parse(r));
        var n = t.point(r[0], r[1], i);
        if (!r[2]) return n;
        function o(p) {
            return t.point(p[0], p[1], i);
        }
        var h = r[2];
        return (
            (n.precomputed = {
                beta: null,
                doubles: h.doubles && { step: h.doubles.step, points: [n].concat(h.doubles.points.map(o)) },
                naf: h.naf && { wnd: h.naf.wnd, points: [n].concat(h.naf.points.map(o)) },
            }),
            n
        );
    }),
    (Ft$1.prototype.inspect = function () {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    }),
    (Ft$1.prototype.isInfinity = function () {
        return this.inf;
    }),
    (Ft$1.prototype.add = function (t) {
        if (this.inf) return t;
        if (t.inf) return this;
        if (this.eq(t)) return this.dbl();
        if (this.neg().eq(t)) return this.curve.point(null, null);
        if (this.x.cmp(t.x) === 0) return this.curve.point(null, null);
        var r = this.y.redSub(t.y);
        r.cmpn(0) !== 0 && (r = r.redMul(this.x.redSub(t.x).redInvm()));
        var i = r.redSqr().redISub(this.x).redISub(t.x),
            n = r.redMul(this.x.redSub(i)).redISub(this.y);
        return this.curve.point(i, n);
    }),
    (Ft$1.prototype.dbl = function () {
        if (this.inf) return this;
        var t = this.y.redAdd(this.y);
        if (t.cmpn(0) === 0) return this.curve.point(null, null);
        var r = this.curve.a,
            i = this.x.redSqr(),
            n = t.redInvm(),
            o = i.redAdd(i).redIAdd(i).redIAdd(r).redMul(n),
            h = o.redSqr().redISub(this.x.redAdd(this.x)),
            p = o.redMul(this.x.redSub(h)).redISub(this.y);
        return this.curve.point(h, p);
    }),
    (Ft$1.prototype.getX = function () {
        return this.x.fromRed();
    }),
    (Ft$1.prototype.getY = function () {
        return this.y.fromRed();
    }),
    (Ft$1.prototype.mul = function (t) {
        return (
            (t = new K$3(t, 16)),
            this.isInfinity()
                ? this
                : this._hasDoubles(t)
                ? this.curve._fixedNafMul(this, t)
                : this.curve.endo
                ? this.curve._endoWnafMulAdd([this], [t])
                : this.curve._wnafMul(this, t)
        );
    }),
    (Ft$1.prototype.mulAdd = function (t, r, i) {
        var n = [this, r],
            o = [t, i];
        return this.curve.endo ? this.curve._endoWnafMulAdd(n, o) : this.curve._wnafMulAdd(1, n, o, 2);
    }),
    (Ft$1.prototype.jmulAdd = function (t, r, i) {
        var n = [this, r],
            o = [t, i];
        return this.curve.endo ? this.curve._endoWnafMulAdd(n, o, !0) : this.curve._wnafMulAdd(1, n, o, 2, !0);
    }),
    (Ft$1.prototype.eq = function (t) {
        return this === t || (this.inf === t.inf && (this.inf || (this.x.cmp(t.x) === 0 && this.y.cmp(t.y) === 0)));
    }),
    (Ft$1.prototype.neg = function (t) {
        if (this.inf) return this;
        var r = this.curve.point(this.x, this.y.redNeg());
        if (t && this.precomputed) {
            var i = this.precomputed,
                n = function (o) {
                    return o.neg();
                };
            r.precomputed = {
                naf: i.naf && { wnd: i.naf.wnd, points: i.naf.points.map(n) },
                doubles: i.doubles && { step: i.doubles.step, points: i.doubles.points.map(n) },
            };
        }
        return r;
    }),
    (Ft$1.prototype.toJ = function () {
        if (this.inf) return this.curve.jpoint(null, null, null);
        var t = this.curve.jpoint(this.x, this.y, this.curve.one);
        return t;
    });
function Tt$3(e, t, r, i) {
    Ze$1.BasePoint.call(this, e, "jacobian"),
        t === null && r === null && i === null
            ? ((this.x = this.curve.one), (this.y = this.curve.one), (this.z = new K$3(0)))
            : ((this.x = new K$3(t, 16)), (this.y = new K$3(r, 16)), (this.z = new K$3(i, 16))),
        this.x.red || (this.x = this.x.toRed(this.curve.red)),
        this.y.red || (this.y = this.y.toRed(this.curve.red)),
        this.z.red || (this.z = this.z.toRed(this.curve.red)),
        (this.zOne = this.z === this.curve.one);
}
qi(Tt$3, Ze$1.BasePoint),
    (te$3.prototype.jpoint = function (t, r, i) {
        return new Tt$3(this, t, r, i);
    }),
    (Tt$3.prototype.toP = function () {
        if (this.isInfinity()) return this.curve.point(null, null);
        var t = this.z.redInvm(),
            r = t.redSqr(),
            i = this.x.redMul(r),
            n = this.y.redMul(r).redMul(t);
        return this.curve.point(i, n);
    }),
    (Tt$3.prototype.neg = function () {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    }),
    (Tt$3.prototype.add = function (t) {
        if (this.isInfinity()) return t;
        if (t.isInfinity()) return this;
        var r = t.z.redSqr(),
            i = this.z.redSqr(),
            n = this.x.redMul(r),
            o = t.x.redMul(i),
            h = this.y.redMul(r.redMul(t.z)),
            p = t.y.redMul(i.redMul(this.z)),
            A = n.redSub(o),
            v = h.redSub(p);
        if (A.cmpn(0) === 0) return v.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
        var w = A.redSqr(),
            y = w.redMul(A),
            S = n.redMul(w),
            I = v.redSqr().redIAdd(y).redISub(S).redISub(S),
            N = v.redMul(S.redISub(I)).redISub(h.redMul(y)),
            C = this.z.redMul(t.z).redMul(A);
        return this.curve.jpoint(I, N, C);
    }),
    (Tt$3.prototype.mixedAdd = function (t) {
        if (this.isInfinity()) return t.toJ();
        if (t.isInfinity()) return this;
        var r = this.z.redSqr(),
            i = this.x,
            n = t.x.redMul(r),
            o = this.y,
            h = t.y.redMul(r).redMul(this.z),
            p = i.redSub(n),
            A = o.redSub(h);
        if (p.cmpn(0) === 0) return A.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
        var v = p.redSqr(),
            w = v.redMul(p),
            y = i.redMul(v),
            S = A.redSqr().redIAdd(w).redISub(y).redISub(y),
            I = A.redMul(y.redISub(S)).redISub(o.redMul(w)),
            N = this.z.redMul(p);
        return this.curve.jpoint(S, I, N);
    }),
    (Tt$3.prototype.dblp = function (t) {
        if (t === 0) return this;
        if (this.isInfinity()) return this;
        if (!t) return this.dbl();
        var r;
        if (this.curve.zeroA || this.curve.threeA) {
            var i = this;
            for (r = 0; r < t; r++) i = i.dbl();
            return i;
        }
        var n = this.curve.a,
            o = this.curve.tinv,
            h = this.x,
            p = this.y,
            A = this.z,
            v = A.redSqr().redSqr(),
            w = p.redAdd(p);
        for (r = 0; r < t; r++) {
            var y = h.redSqr(),
                S = w.redSqr(),
                I = S.redSqr(),
                N = y.redAdd(y).redIAdd(y).redIAdd(n.redMul(v)),
                C = h.redMul(S),
                F = N.redSqr().redISub(C.redAdd(C)),
                U = C.redISub(F),
                J = N.redMul(U);
            J = J.redIAdd(J).redISub(I);
            var Bt = w.redMul(A);
            r + 1 < t && (v = v.redMul(I)), (h = F), (A = Bt), (w = J);
        }
        return this.curve.jpoint(h, w.redMul(o), A);
    }),
    (Tt$3.prototype.dbl = function () {
        return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    }),
    (Tt$3.prototype._zeroDbl = function () {
        var t, r, i;
        if (this.zOne) {
            var n = this.x.redSqr(),
                o = this.y.redSqr(),
                h = o.redSqr(),
                p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);
            p = p.redIAdd(p);
            var A = n.redAdd(n).redIAdd(n),
                v = A.redSqr().redISub(p).redISub(p),
                w = h.redIAdd(h);
            (w = w.redIAdd(w)), (w = w.redIAdd(w)), (t = v), (r = A.redMul(p.redISub(v)).redISub(w)), (i = this.y.redAdd(this.y));
        } else {
            var y = this.x.redSqr(),
                S = this.y.redSqr(),
                I = S.redSqr(),
                N = this.x.redAdd(S).redSqr().redISub(y).redISub(I);
            N = N.redIAdd(N);
            var C = y.redAdd(y).redIAdd(y),
                F = C.redSqr(),
                U = I.redIAdd(I);
            (U = U.redIAdd(U)),
                (U = U.redIAdd(U)),
                (t = F.redISub(N).redISub(N)),
                (r = C.redMul(N.redISub(t)).redISub(U)),
                (i = this.y.redMul(this.z)),
                (i = i.redIAdd(i));
        }
        return this.curve.jpoint(t, r, i);
    }),
    (Tt$3.prototype._threeDbl = function () {
        var t, r, i;
        if (this.zOne) {
            var n = this.x.redSqr(),
                o = this.y.redSqr(),
                h = o.redSqr(),
                p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);
            p = p.redIAdd(p);
            var A = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),
                v = A.redSqr().redISub(p).redISub(p);
            t = v;
            var w = h.redIAdd(h);
            (w = w.redIAdd(w)), (w = w.redIAdd(w)), (r = A.redMul(p.redISub(v)).redISub(w)), (i = this.y.redAdd(this.y));
        } else {
            var y = this.z.redSqr(),
                S = this.y.redSqr(),
                I = this.x.redMul(S),
                N = this.x.redSub(y).redMul(this.x.redAdd(y));
            N = N.redAdd(N).redIAdd(N);
            var C = I.redIAdd(I);
            C = C.redIAdd(C);
            var F = C.redAdd(C);
            (t = N.redSqr().redISub(F)), (i = this.y.redAdd(this.z).redSqr().redISub(S).redISub(y));
            var U = S.redSqr();
            (U = U.redIAdd(U)), (U = U.redIAdd(U)), (U = U.redIAdd(U)), (r = N.redMul(C.redISub(t)).redISub(U));
        }
        return this.curve.jpoint(t, r, i);
    }),
    (Tt$3.prototype._dbl = function () {
        var t = this.curve.a,
            r = this.x,
            i = this.y,
            n = this.z,
            o = n.redSqr().redSqr(),
            h = r.redSqr(),
            p = i.redSqr(),
            A = h.redAdd(h).redIAdd(h).redIAdd(t.redMul(o)),
            v = r.redAdd(r);
        v = v.redIAdd(v);
        var w = v.redMul(p),
            y = A.redSqr().redISub(w.redAdd(w)),
            S = w.redISub(y),
            I = p.redSqr();
        (I = I.redIAdd(I)), (I = I.redIAdd(I)), (I = I.redIAdd(I));
        var N = A.redMul(S).redISub(I),
            C = i.redAdd(i).redMul(n);
        return this.curve.jpoint(y, N, C);
    }),
    (Tt$3.prototype.trpl = function () {
        if (!this.curve.zeroA) return this.dbl().add(this);
        var t = this.x.redSqr(),
            r = this.y.redSqr(),
            i = this.z.redSqr(),
            n = r.redSqr(),
            o = t.redAdd(t).redIAdd(t),
            h = o.redSqr(),
            p = this.x.redAdd(r).redSqr().redISub(t).redISub(n);
        (p = p.redIAdd(p)), (p = p.redAdd(p).redIAdd(p)), (p = p.redISub(h));
        var A = p.redSqr(),
            v = n.redIAdd(n);
        (v = v.redIAdd(v)), (v = v.redIAdd(v)), (v = v.redIAdd(v));
        var w = o.redIAdd(p).redSqr().redISub(h).redISub(A).redISub(v),
            y = r.redMul(w);
        (y = y.redIAdd(y)), (y = y.redIAdd(y));
        var S = this.x.redMul(A).redISub(y);
        (S = S.redIAdd(S)), (S = S.redIAdd(S));
        var I = this.y.redMul(w.redMul(v.redISub(w)).redISub(p.redMul(A)));
        (I = I.redIAdd(I)), (I = I.redIAdd(I)), (I = I.redIAdd(I));
        var N = this.z.redAdd(p).redSqr().redISub(i).redISub(A);
        return this.curve.jpoint(S, I, N);
    }),
    (Tt$3.prototype.mul = function (t, r) {
        return (t = new K$3(t, r)), this.curve._wnafMul(this, t);
    }),
    (Tt$3.prototype.eq = function (t) {
        if (t.type === "affine") return this.eq(t.toJ());
        if (this === t) return !0;
        var r = this.z.redSqr(),
            i = t.z.redSqr();
        if (this.x.redMul(i).redISub(t.x.redMul(r)).cmpn(0) !== 0) return !1;
        var n = r.redMul(this.z),
            o = i.redMul(t.z);
        return this.y.redMul(o).redISub(t.y.redMul(n)).cmpn(0) === 0;
    }),
    (Tt$3.prototype.eqXToP = function (t) {
        var r = this.z.redSqr(),
            i = t.toRed(this.curve.red).redMul(r);
        if (this.x.cmp(i) === 0) return !0;
        for (var n = t.clone(), o = this.curve.redN.redMul(r); ; ) {
            if ((n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0)) return !1;
            if ((i.redIAdd(o), this.x.cmp(i) === 0)) return !0;
        }
    }),
    (Tt$3.prototype.inspect = function () {
        return this.isInfinity()
            ? "<EC JPoint Infinity>"
            : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    }),
    (Tt$3.prototype.isInfinity = function () {
        return this.z.cmpn(0) === 0;
    });
var zr$1 = lr$2(function (e, t) {
        var r = t;
        (r.base = Ze$1), (r.short = ja), (r.mont = null), (r.edwards = null);
    }),
    jr = lr$2(function (e, t) {
        var r = t,
            i = Gt$2.assert;
        function n(p) {
            p.type === "short" ? (this.curve = new zr$1.short(p)) : p.type === "edwards" ? (this.curve = new zr$1.edwards(p)) : (this.curve = new zr$1.mont(p)),
                (this.g = this.curve.g),
                (this.n = this.curve.n),
                (this.hash = p.hash),
                i(this.g.validate(), "Invalid curve"),
                i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        r.PresetCurve = n;
        function o(p, A) {
            Object.defineProperty(r, p, {
                configurable: !0,
                enumerable: !0,
                get: function () {
                    var v = new n(A);
                    return Object.defineProperty(r, p, { configurable: !0, enumerable: !0, value: v }), v;
                },
            });
        }
        o("p192", {
            type: "short",
            prime: "p192",
            p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
            b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
            n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
            hash: se$2.sha256,
            gRed: !1,
            g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"],
        }),
            o("p224", {
                type: "short",
                prime: "p224",
                p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                hash: se$2.sha256,
                gRed: !1,
                g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"],
            }),
            o("p256", {
                type: "short",
                prime: null,
                p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                hash: se$2.sha256,
                gRed: !1,
                g: [
                    "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                    "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5",
                ],
            }),
            o("p384", {
                type: "short",
                prime: null,
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                hash: se$2.sha384,
                gRed: !1,
                g: [
                    "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
                    "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f",
                ],
            }),
            o("p521", {
                type: "short",
                prime: null,
                p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                hash: se$2.sha512,
                gRed: !1,
                g: [
                    "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                    "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650",
                ],
            }),
            o("curve25519", {
                type: "mont",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "76d06",
                b: "1",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: se$2.sha256,
                gRed: !1,
                g: ["9"],
            }),
            o("ed25519", {
                type: "edwards",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "-1",
                c: "1",
                d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: se$2.sha256,
                gRed: !1,
                g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"],
            });
        var h;
        try {
            h = null.crash();
        } catch {
            h = void 0;
        }
        o("secp256k1", {
            type: "short",
            prime: "k256",
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
            a: "0",
            b: "7",
            n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
            h: "1",
            hash: se$2.sha256,
            beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
            lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
            basis: [
                { a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" },
                { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" },
            ],
            gRed: !1,
            g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", h],
        });
    });
function Re$1(e) {
    if (!(this instanceof Re$1)) return new Re$1(e);
    (this.hash = e.hash),
        (this.predResist = !!e.predResist),
        (this.outLen = this.hash.outSize),
        (this.minEntropy = e.minEntropy || this.hash.hmacStrength),
        (this._reseed = null),
        (this.reseedInterval = null),
        (this.K = null),
        (this.V = null);
    var t = fe$2.toArray(e.entropy, e.entropyEnc || "hex"),
        r = fe$2.toArray(e.nonce, e.nonceEnc || "hex"),
        i = fe$2.toArray(e.pers, e.persEnc || "hex");
    ki(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, i);
}
var Ff = Re$1;
(Re$1.prototype._init = function (t, r, i) {
    var n = t.concat(r).concat(i);
    (this.K = new Array(this.outLen / 8)), (this.V = new Array(this.outLen / 8));
    for (var o = 0; o < this.V.length; o++) (this.K[o] = 0), (this.V[o] = 1);
    this._update(n), (this._reseed = 1), (this.reseedInterval = 281474976710656);
}),
    (Re$1.prototype._hmac = function () {
        return new se$2.hmac(this.hash, this.K);
    }),
    (Re$1.prototype._update = function (t) {
        var r = this._hmac().update(this.V).update([0]);
        t && (r = r.update(t)),
            (this.K = r.digest()),
            (this.V = this._hmac().update(this.V).digest()),
            t && ((this.K = this._hmac().update(this.V).update([1]).update(t).digest()), (this.V = this._hmac().update(this.V).digest()));
    }),
    (Re$1.prototype.reseed = function (t, r, i, n) {
        typeof r != "string" && ((n = i), (i = r), (r = null)),
            (t = fe$2.toArray(t, r)),
            (i = fe$2.toArray(i, n)),
            ki(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"),
            this._update(t.concat(i || [])),
            (this._reseed = 1);
    }),
    (Re$1.prototype.generate = function (t, r, i, n) {
        if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
        typeof r != "string" && ((n = i), (i = r), (r = null)), i && ((i = fe$2.toArray(i, n || "hex")), this._update(i));
        for (var o = []; o.length < t; ) (this.V = this._hmac().update(this.V).digest()), (o = o.concat(this.V));
        var h = o.slice(0, t);
        return this._update(i), this._reseed++, fe$2.encode(h, r);
    });
var Ki = Gt$2.assert;
function kt$1(e, t) {
    (this.ec = e), (this.priv = null), (this.pub = null), t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
}
var Hi = kt$1;
(kt$1.fromPublic = function (t, r, i) {
    return r instanceof kt$1 ? r : new kt$1(t, { pub: r, pubEnc: i });
}),
    (kt$1.fromPrivate = function (t, r, i) {
        return r instanceof kt$1 ? r : new kt$1(t, { priv: r, privEnc: i });
    }),
    (kt$1.prototype.validate = function () {
        var t = this.getPublic();
        return t.isInfinity()
            ? { result: !1, reason: "Invalid public key" }
            : t.validate()
            ? t.mul(this.ec.curve.n).isInfinity()
                ? { result: !0, reason: null }
                : { result: !1, reason: "Public key * N != O" }
            : { result: !1, reason: "Public key is not a point" };
    }),
    (kt$1.prototype.getPublic = function (t, r) {
        return typeof t == "string" && ((r = t), (t = null)), this.pub || (this.pub = this.ec.g.mul(this.priv)), r ? this.pub.encode(r, t) : this.pub;
    }),
    (kt$1.prototype.getPrivate = function (t) {
        return t === "hex" ? this.priv.toString(16, 2) : this.priv;
    }),
    (kt$1.prototype._importPrivate = function (t, r) {
        (this.priv = new K$3(t, r || 16)), (this.priv = this.priv.umod(this.ec.curve.n));
    }),
    (kt$1.prototype._importPublic = function (t, r) {
        if (t.x || t.y) {
            this.ec.curve.type === "mont"
                ? Ki(t.x, "Need x coordinate")
                : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && Ki(t.x && t.y, "Need both x and y coordinate"),
                (this.pub = this.ec.curve.point(t.x, t.y));
            return;
        }
        this.pub = this.ec.curve.decodePoint(t, r);
    }),
    (kt$1.prototype.derive = function (t) {
        return t.validate() || Ki(t.validate(), "public point not validated"), t.mul(this.priv).getX();
    }),
    (kt$1.prototype.sign = function (t, r, i) {
        return this.ec.sign(t, this, r, i);
    }),
    (kt$1.prototype.verify = function (t, r) {
        return this.ec.verify(t, r, this);
    }),
    (kt$1.prototype.inspect = function () {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    });
var Qa = Gt$2.assert;
function Qr$1(e, t) {
    if (e instanceof Qr$1) return e;
    this._importDER(e, t) ||
        (Qa(e.r && e.s, "Signature without r or s"),
        (this.r = new K$3(e.r, 16)),
        (this.s = new K$3(e.s, 16)),
        e.recoveryParam === void 0 ? (this.recoveryParam = null) : (this.recoveryParam = e.recoveryParam));
}
var Jr$1 = Qr$1;
function Ja() {
    this.place = 0;
}
function Li(e, t) {
    var r = e[t.place++];
    if (!(r & 128)) return r;
    var i = r & 15;
    if (i === 0 || i > 4) return !1;
    for (var n = 0, o = 0, h = t.place; o < i; o++, h++) (n <<= 8), (n |= e[h]), (n >>>= 0);
    return n <= 127 ? !1 : ((t.place = h), n);
}
function Tf(e) {
    for (var t = 0, r = e.length - 1; !e[t] && !(e[t + 1] & 128) && t < r; ) t++;
    return t === 0 ? e : e.slice(t);
}
Qr$1.prototype._importDER = function (t, r) {
    t = Gt$2.toArray(t, r);
    var i = new Ja();
    if (t[i.place++] !== 48) return !1;
    var n = Li(t, i);
    if (n === !1 || n + i.place !== t.length || t[i.place++] !== 2) return !1;
    var o = Li(t, i);
    if (o === !1) return !1;
    var h = t.slice(i.place, o + i.place);
    if (((i.place += o), t[i.place++] !== 2)) return !1;
    var p = Li(t, i);
    if (p === !1 || t.length !== p + i.place) return !1;
    var A = t.slice(i.place, p + i.place);
    if (h[0] === 0)
        if (h[1] & 128) h = h.slice(1);
        else return !1;
    if (A[0] === 0)
        if (A[1] & 128) A = A.slice(1);
        else return !1;
    return (this.r = new K$3(h)), (this.s = new K$3(A)), (this.recoveryParam = null), !0;
};
function zi(e, t) {
    if (t < 128) {
        e.push(t);
        return;
    }
    var r = 1 + ((Math.log(t) / Math.LN2) >>> 3);
    for (e.push(r | 128); --r; ) e.push((t >>> (r << 3)) & 255);
    e.push(t);
}
Qr$1.prototype.toDER = function (t) {
    var r = this.r.toArray(),
        i = this.s.toArray();
    for (r[0] & 128 && (r = [0].concat(r)), i[0] & 128 && (i = [0].concat(i)), r = Tf(r), i = Tf(i); !i[0] && !(i[1] & 128); ) i = i.slice(1);
    var n = [2];
    zi(n, r.length), (n = n.concat(r)), n.push(2), zi(n, i.length);
    var o = n.concat(i),
        h = [48];
    return zi(h, o.length), (h = h.concat(o)), Gt$2.encode(h, t);
};
var Ga = function () {
        throw new Error("unsupported");
    },
    Uf = Gt$2.assert;
function ee$2(e) {
    if (!(this instanceof ee$2)) return new ee$2(e);
    typeof e == "string" && (Uf(Object.prototype.hasOwnProperty.call(jr, e), "Unknown curve " + e), (e = jr[e])),
        e instanceof jr.PresetCurve && (e = { curve: e }),
        (this.curve = e.curve.curve),
        (this.n = this.curve.n),
        (this.nh = this.n.ushrn(1)),
        (this.g = this.curve.g),
        (this.g = e.curve.g),
        this.g.precompute(e.curve.n.bitLength() + 1),
        (this.hash = e.hash || e.curve.hash);
}
var Ya = ee$2;
(ee$2.prototype.keyPair = function (t) {
    return new Hi(this, t);
}),
    (ee$2.prototype.keyFromPrivate = function (t, r) {
        return Hi.fromPrivate(this, t, r);
    }),
    (ee$2.prototype.keyFromPublic = function (t, r) {
        return Hi.fromPublic(this, t, r);
    }),
    (ee$2.prototype.genKeyPair = function (t) {
        t || (t = {});
        for (
            var r = new Ff({
                    hash: this.hash,
                    pers: t.pers,
                    persEnc: t.persEnc || "utf8",
                    entropy: t.entropy || Ga(this.hash.hmacStrength),
                    entropyEnc: (t.entropy && t.entropyEnc) || "utf8",
                    nonce: this.n.toArray(),
                }),
                i = this.n.byteLength(),
                n = this.n.sub(new K$3(2));
            ;

        ) {
            var o = new K$3(r.generate(i));
            if (!(o.cmp(n) > 0)) return o.iaddn(1), this.keyFromPrivate(o);
        }
    }),
    (ee$2.prototype._truncateToN = function (t, r) {
        var i = t.byteLength() * 8 - this.n.bitLength();
        return i > 0 && (t = t.ushrn(i)), !r && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;
    }),
    (ee$2.prototype.sign = function (t, r, i, n) {
        typeof i == "object" && ((n = i), (i = null)), n || (n = {}), (r = this.keyFromPrivate(r, i)), (t = this._truncateToN(new K$3(t, 16)));
        for (
            var o = this.n.byteLength(),
                h = r.getPrivate().toArray("be", o),
                p = t.toArray("be", o),
                A = new Ff({ hash: this.hash, entropy: h, nonce: p, pers: n.pers, persEnc: n.persEnc || "utf8" }),
                v = this.n.sub(new K$3(1)),
                w = 0;
            ;
            w++
        ) {
            var y = n.k ? n.k(w) : new K$3(A.generate(this.n.byteLength()));
            if (((y = this._truncateToN(y, !0)), !(y.cmpn(1) <= 0 || y.cmp(v) >= 0))) {
                var S = this.g.mul(y);
                if (!S.isInfinity()) {
                    var I = S.getX(),
                        N = I.umod(this.n);
                    if (N.cmpn(0) !== 0) {
                        var C = y.invm(this.n).mul(N.mul(r.getPrivate()).iadd(t));
                        if (((C = C.umod(this.n)), C.cmpn(0) !== 0)) {
                            var F = (S.getY().isOdd() ? 1 : 0) | (I.cmp(N) !== 0 ? 2 : 0);
                            return n.canonical && C.cmp(this.nh) > 0 && ((C = this.n.sub(C)), (F ^= 1)), new Jr$1({ r: N, s: C, recoveryParam: F });
                        }
                    }
                }
            }
        }
    }),
    (ee$2.prototype.verify = function (t, r, i, n) {
        (t = this._truncateToN(new K$3(t, 16))), (i = this.keyFromPublic(i, n)), (r = new Jr$1(r, "hex"));
        var o = r.r,
            h = r.s;
        if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0 || h.cmpn(1) < 0 || h.cmp(this.n) >= 0) return !1;
        var p = h.invm(this.n),
            A = p.mul(t).umod(this.n),
            v = p.mul(o).umod(this.n),
            w;
        return this.curve._maxwellTrick
            ? ((w = this.g.jmulAdd(A, i.getPublic(), v)), w.isInfinity() ? !1 : w.eqXToP(o))
            : ((w = this.g.mulAdd(A, i.getPublic(), v)), w.isInfinity() ? !1 : w.getX().umod(this.n).cmp(o) === 0);
    }),
    (ee$2.prototype.recoverPubKey = function (e, t, r, i) {
        Uf((3 & r) === r, "The recovery param is more than two bits"), (t = new Jr$1(t, i));
        var n = this.n,
            o = new K$3(e),
            h = t.r,
            p = t.s,
            A = r & 1,
            v = r >> 1;
        if (h.cmp(this.curve.p.umod(this.curve.n)) >= 0 && v) throw new Error("Unable to find sencond key candinate");
        v ? (h = this.curve.pointFromX(h.add(this.curve.n), A)) : (h = this.curve.pointFromX(h, A));
        var w = t.r.invm(n),
            y = n.sub(o).mul(w).umod(n),
            S = p.mul(w).umod(n);
        return this.g.mulAdd(y, h, S);
    }),
    (ee$2.prototype.getKeyRecoveryParam = function (e, t, r, i) {
        if (((t = new Jr$1(t, i)), t.recoveryParam !== null)) return t.recoveryParam;
        for (var n = 0; n < 4; n++) {
            var o;
            try {
                o = this.recoverPubKey(e, t, n);
            } catch {
                continue;
            }
            if (o.eq(r)) return n;
        }
        throw new Error("Unable to find valid recovery factor");
    });
var Va = lr$2(function (e, t) {
        var r = t;
        (r.version = "6.5.4"),
            (r.utils = Gt$2),
            (r.rand = function () {
                throw new Error("unsupported");
            }),
            (r.curve = zr$1),
            (r.curves = jr),
            (r.ec = Ya),
            (r.eddsa = null);
    }),
    Wa = Va.ec;
const Xa = "signing-key/5.7.0",
    ji = new z$6(Xa);
let Qi = null;
function ve$2() {
    return Qi || (Qi = new Wa("secp256k1")), Qi;
}
class Za {
    constructor(t) {
        wr$1(this, "curve", "secp256k1"),
            wr$1(this, "privateKey", Kt$2(t)),
            Os$1(this.privateKey) !== 32 && ji.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        const r = ve$2().keyFromPrivate(Ot$2(this.privateKey));
        wr$1(this, "publicKey", "0x" + r.getPublic(!1, "hex")),
            wr$1(this, "compressedPublicKey", "0x" + r.getPublic(!0, "hex")),
            wr$1(this, "_isSigningKey", !0);
    }
    _addPoint(t) {
        const r = ve$2().keyFromPublic(Ot$2(this.publicKey)),
            i = ve$2().keyFromPublic(Ot$2(t));
        return "0x" + r.pub.add(i.pub).encodeCompressed("hex");
    }
    signDigest(t) {
        const r = ve$2().keyFromPrivate(Ot$2(this.privateKey)),
            i = Ot$2(t);
        i.length !== 32 && ji.throwArgumentError("bad digest length", "digest", t);
        const n = r.sign(i, { canonical: !0 });
        return Jn({ recoveryParam: n.recoveryParam, r: oe$4("0x" + n.r.toString(16), 32), s: oe$4("0x" + n.s.toString(16), 32) });
    }
    computeSharedSecret(t) {
        const r = ve$2().keyFromPrivate(Ot$2(this.privateKey)),
            i = ve$2().keyFromPublic(Ot$2(kf(t)));
        return oe$4("0x" + r.derive(i.getPublic()).toString(16), 32);
    }
    static isSigningKey(t) {
        return !!(t && t._isSigningKey);
    }
}
function $a$1(e, t) {
    const r = Jn(t),
        i = { r: Ot$2(r.r), s: Ot$2(r.s) };
    return "0x" + ve$2().recoverPubKey(Ot$2(e), i, r.recoveryParam).encode("hex", !1);
}
function kf(e, t) {
    const r = Ot$2(e);
    if (r.length === 32) {
        const i = new Za(r);
        return i.publicKey;
    } else {
        if (r.length === 33) return "0x" + ve$2().keyFromPublic(r).getPublic(!1, "hex");
        if (r.length === 65) return Kt$2(r);
    }
    return ji.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
var qf;
(function (e) {
    (e[(e.legacy = 0)] = "legacy"), (e[(e.eip2930 = 1)] = "eip2930"), (e[(e.eip1559 = 2)] = "eip1559");
})(qf || (qf = {}));
function eu(e) {
    const t = kf(e);
    return h0(Qn(Si(Qn(t, 1)), 12));
}
function ru(e, t) {
    return eu($a$1(Ot$2(e), t));
}
const iu = "https://rpc.walletconnect.com/v1";
async function Kf(e, t, r, i, n, o) {
    switch (r.t) {
        case "eip191":
            return Hf(e, t, r.s);
        case "eip1271":
            return await Lf(e, t, r.s, i, n, o);
        default:
            throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${r.t}`);
    }
}
function Hf(e, t, r) {
    return ru(uf(t), r).toLowerCase() === e.toLowerCase();
}
async function Lf(e, t, r, i, n, o) {
    try {
        const h = "0x1626ba7e",
            p = "0000000000000000000000000000000000000000000000000000000000000040",
            A = "0000000000000000000000000000000000000000000000000000000000000041",
            v = r.substring(2),
            w = uf(t).substring(2),
            y = h + w + p + A + v,
            S = await fetch(`${o || iu}/?chainId=${i}&projectId=${n}`, {
                method: "POST",
                body: JSON.stringify({ id: nu(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e, data: y }, "latest"] }),
            }),
            { result: I } = await S.json();
        return I ? I.slice(0, h.length).toLowerCase() === h.toLowerCase() : !1;
    } catch (h) {
        return console.error("isValidEip1271Signature: ", h), !1;
    }
}
function nu() {
    return Date.now() + Math.floor(Math.random() * 1e3);
}
var fu = Object.defineProperty,
    ou = Object.defineProperties,
    su = Object.getOwnPropertyDescriptors,
    zf = Object.getOwnPropertySymbols,
    au = Object.prototype.hasOwnProperty,
    uu = Object.prototype.propertyIsEnumerable,
    jf = (e, t, r) => (t in e ? fu(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : (e[t] = r)),
    Ji = (e, t) => {
        for (var r in t || (t = {})) au.call(t, r) && jf(e, r, t[r]);
        if (zf) for (var r of zf(t)) uu.call(t, r) && jf(e, r, t[r]);
        return e;
    },
    Qf = (e, t) => ou(e, su(t));
const hu = "did:pkh:",
    Gr = (e) => e?.split(":"),
    Gi = (e) => {
        const t = e && Gr(e);
        if (t) return e.includes(hu) ? t[3] : t[1];
    },
    cu = (e) => {
        const t = e && Gr(e);
        if (t) return t[2] + ":" + t[3];
    },
    Yi = (e) => {
        const t = e && Gr(e);
        if (t) return t.pop();
    };
async function lu(e) {
    const { cacao: t, projectId: r } = e,
        { s: i, p: n } = t,
        o = Jf(n, n.iss),
        h = Yi(n.iss);
    return await Kf(h, o, i, Gi(n.iss), r);
}
const Jf = (e, t) => {
    const r = `${e.domain} wants you to sign in with your Ethereum account:`,
        i = Yi(t);
    if (!e.aud && !e.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
    let n = e.statement || void 0;
    const o = `URI: ${e.aud || e.uri}`,
        h = `Version: ${e.version}`,
        p = `Chain ID: ${Gi(t)}`,
        A = `Nonce: ${e.nonce}`,
        v = `Issued At: ${e.iat}`,
        w = e.exp ? `Expiration Time: ${e.exp}` : void 0,
        y = e.nbf ? `Not Before: ${e.nbf}` : void 0,
        S = e.requestId ? `Request ID: ${e.requestId}` : void 0,
        I = e.resources
            ? `Resources:${e.resources
                  .map(
                      (C) => `
- ${C}`
                  )
                  .join("")}`
            : void 0,
        N = Vr(e.resources);
    if (N) {
        const C = Oe$1(N);
        n = Xi(n, C);
    }
    return [r, i, "", n, "", o, h, p, A, v, w, y, S, I].filter((C) => C != null).join(`
`);
};
function Wf(e) {
    return Buffer.from(JSON.stringify(e)).toString("base64");
}
function Xf(e) {
    return JSON.parse(Buffer.from(e, "base64").toString("utf-8"));
}
function ge(e) {
    if (!e) throw new Error("No recap provided, value is undefined");
    if (!e.att) throw new Error("No `att` property found");
    const t = Object.keys(e.att);
    if (!(t != null && t.length)) throw new Error("No resources found in `att` property");
    t.forEach((r) => {
        const i = e.att[r];
        if (Array.isArray(i)) throw new Error(`Resource must be an object: ${r}`);
        if (typeof i != "object") throw new Error(`Resource must be an object: ${r}`);
        if (!Object.keys(i).length) throw new Error(`Resource object is empty: ${r}`);
        Object.keys(i).forEach((n) => {
            const o = i[n];
            if (!Array.isArray(o)) throw new Error(`Ability limits ${n} must be an array of objects, found: ${o}`);
            if (!o.length) throw new Error(`Value of ${n} is empty array, must be an array with objects`);
            o.forEach((h) => {
                if (typeof h != "object") throw new Error(`Ability limits (${n}) must be an array of objects, found: ${h}`);
            });
        });
    });
}
function Zf(e, t, r, i = {}) {
    return r?.sort((n, o) => n.localeCompare(o)), { att: { [e]: Vi(t, r, i) } };
}
function Vi(e, t, r = {}) {
    t = t?.sort((n, o) => n.localeCompare(o));
    const i = t.map((n) => ({ [`${e}/${n}`]: [r] }));
    return Object.assign({}, ...i);
}
function Yr$1(e) {
    return ge(e), `urn:recap:${Wf(e).replace(/=/g, "")}`;
}
function Oe$1(e) {
    const t = Xf(e.replace("urn:recap:", ""));
    return ge(t), t;
}
function mu(e, t, r) {
    const i = Zf(e, t, r);
    return Yr$1(i);
}
function Wi$1(e) {
    return e && e.includes("urn:recap:");
}
function Au(e, t) {
    const r = Oe$1(e),
        i = Oe$1(t),
        n = to$1(r, i);
    return Yr$1(n);
}
function to$1(e, t) {
    ge(e), ge(t);
    const r = Object.keys(e.att)
            .concat(Object.keys(t.att))
            .sort((n, o) => n.localeCompare(o)),
        i = { att: {} };
    return (
        r.forEach((n) => {
            var o, h;
            Object.keys(((o = e.att) == null ? void 0 : o[n]) || {})
                .concat(Object.keys(((h = t.att) == null ? void 0 : h[n]) || {}))
                .sort((p, A) => p.localeCompare(A))
                .forEach((p) => {
                    var A, v;
                    i.att[n] = Qf(Ji({}, i.att[n]), { [p]: ((A = e.att[n]) == null ? void 0 : A[p]) || ((v = t.att[n]) == null ? void 0 : v[p]) });
                });
        }),
        i
    );
}
function Xi(e = "", t) {
    ge(t);
    const r = "I further authorize the stated URI to perform the following actions on my behalf: ";
    if (e.includes(r)) return e;
    const i = [];
    let n = 0;
    Object.keys(t.att).forEach((p) => {
        const A = Object.keys(t.att[p]).map((y) => ({ ability: y.split("/")[0], action: y.split("/")[1] }));
        A.sort((y, S) => y.action.localeCompare(S.action));
        const v = {};
        A.forEach((y) => {
            v[y.ability] || (v[y.ability] = []), v[y.ability].push(y.action);
        });
        const w = Object.keys(v).map((y) => (n++, `(${n}) '${y}': '${v[y].join("', '")}' for '${p}'.`));
        i.push(w.join(", ").replace(".,", "."));
    });
    const o = i.join(" "),
        h = `${r}${o}`;
    return `${e ? e + " " : ""}${h}`;
}
function bu(e) {
    var t;
    const r = Oe$1(e);
    ge(r);
    const i = (t = r.att) == null ? void 0 : t.eip155;
    return i ? Object.keys(i).map((n) => n.split("/")[1]) : [];
}
function yu(e) {
    const t = Oe$1(e);
    ge(t);
    const r = [];
    return (
        Object.values(t.att).forEach((i) => {
            Object.values(i).forEach((n) => {
                var o;
                (o = n?.[0]) != null && o.chains && r.push(n[0].chains);
            });
        }),
        [...new Set(r.flat())]
    );
}
function Vr(e) {
    if (!e) return;
    const t = e?.[e.length - 1];
    return Wi$1(t) ? t : void 0;
}
const Zi = "base10",
    Lt$3 = "base16",
    $i = "base64pad",
    wu = "base64url",
    dr$3 = "utf8",
    tn$1 = 0,
    pr$2 = 1,
    Sr$1 = 2,
    xu = 0,
    ro$1 = 1,
    Nr$1 = 12,
    en$1 = 32;
function Mu() {
    const e = x25519.generateKeyPair();
    return { privateKey: toString(e.secretKey, Lt$3), publicKey: toString(e.publicKey, Lt$3) };
}
function Eu() {
    const e = random.randomBytes(en$1);
    return toString(e, Lt$3);
}
function Su(e, t) {
    const r = x25519.sharedKey(fromString(e, Lt$3), fromString(t, Lt$3), !0),
        i = new HKDF_1(sha256.SHA256, r).expand(en$1);
    return toString(i, Lt$3);
}
function Nu(e) {
    const t = sha256.hash(fromString(e, Lt$3));
    return toString(t, Lt$3);
}
function Iu(e) {
    const t = sha256.hash(fromString(e, dr$3));
    return toString(t, Lt$3);
}
function rn$1(e) {
    return fromString(`${e}`, Zi);
}
function $e$1(e) {
    return Number(toString(e, Zi));
}
function _u(e) {
    const t = rn$1(typeof e.type < "u" ? e.type : tn$1);
    if ($e$1(t) === pr$2 && typeof e.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    const r = typeof e.senderPublicKey < "u" ? fromString(e.senderPublicKey, Lt$3) : void 0,
        i = typeof e.iv < "u" ? fromString(e.iv, Lt$3) : random.randomBytes(Nr$1),
        n = new chacha20poly1305.ChaCha20Poly1305(fromString(e.symKey, Lt$3)).seal(i, fromString(e.message, dr$3));
    return nn$1({ type: t, sealed: n, iv: i, senderPublicKey: r, encoding: e.encoding });
}
function Bu(e, t) {
    const r = rn$1(Sr$1),
        i = random.randomBytes(Nr$1),
        n = fromString(e, dr$3);
    return nn$1({ type: r, sealed: n, iv: i, encoding: t });
}
function Cu(e) {
    const t = new chacha20poly1305.ChaCha20Poly1305(fromString(e.symKey, Lt$3)),
        { sealed: r, iv: i } = Wr$1({ encoded: e.encoded, encoding: e?.encoding }),
        n = t.open(i, r);
    if (n === null) throw new Error("Failed to decrypt");
    return toString(n, dr$3);
}
function Ru(e, t) {
    const { sealed: r } = Wr$1({ encoded: e, encoding: t });
    return toString(r, dr$3);
}
function nn$1(e) {
    const { encoding: t = $i } = e;
    if ($e$1(e.type) === Sr$1) return toString(concat([e.type, e.sealed]), t);
    if ($e$1(e.type) === pr$2) {
        if (typeof e.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
        return toString(concat([e.type, e.senderPublicKey, e.iv, e.sealed]), t);
    }
    return toString(concat([e.type, e.iv, e.sealed]), t);
}
function Wr$1(e) {
    const { encoded: t, encoding: r = $i } = e,
        i = fromString(t, r),
        n = i.slice(xu, ro$1),
        o = ro$1;
    if ($e$1(n) === pr$2) {
        const v = o + en$1,
            w = v + Nr$1,
            y = i.slice(o, v),
            S = i.slice(v, w),
            I = i.slice(w);
        return { type: n, sealed: I, iv: S, senderPublicKey: y };
    }
    if ($e$1(n) === Sr$1) {
        const v = i.slice(o),
            w = random.randomBytes(Nr$1);
        return { type: n, sealed: v, iv: w };
    }
    const h = o + Nr$1,
        p = i.slice(o, h),
        A = i.slice(h);
    return { type: n, sealed: A, iv: p };
}
function Ou(e, t) {
    const r = Wr$1({ encoded: e, encoding: t?.encoding });
    return io({
        type: $e$1(r.type),
        senderPublicKey: typeof r.senderPublicKey < "u" ? toString(r.senderPublicKey, Lt$3) : void 0,
        receiverPublicKey: t?.receiverPublicKey,
    });
}
function io(e) {
    const t = e?.type || tn$1;
    if (t === pr$2) {
        if (typeof e?.senderPublicKey > "u") throw new Error("missing sender public key");
        if (typeof e?.receiverPublicKey > "u") throw new Error("missing receiver public key");
    }
    return { type: t, senderPublicKey: e?.senderPublicKey, receiverPublicKey: e?.receiverPublicKey };
}
function Pu(e) {
    return e.type === pr$2 && typeof e.senderPublicKey == "string" && typeof e.receiverPublicKey == "string";
}
function Du(e) {
    return e.type === Sr$1;
}
function no$1(e) {
    return new elliptic.ec("p256").keyFromPublic({ x: Buffer.from(e.x, "base64").toString("hex"), y: Buffer.from(e.y, "base64").toString("hex") }, "hex");
}
function Fu(e) {
    let t = e.replace(/-/g, "+").replace(/_/g, "/");
    const r = t.length % 4;
    return r > 0 && (t += "=".repeat(4 - r)), t;
}
function Tu(e) {
    return Buffer.from(Fu(e), "base64");
}
function Uu(e, t) {
    const [r, i, n] = e.split("."),
        o = Tu(n);
    if (o.length !== 64) throw new Error("Invalid signature length");
    const h = o.slice(0, 32).toString("hex"),
        p = o.slice(32, 64).toString("hex"),
        A = `${r}.${i}`,
        v = new sha256.SHA256().update(Buffer.from(A)).digest(),
        w = no$1(t),
        y = Buffer.from(v).toString("hex");
    if (!w.verify(y, { r: h, s: p })) throw new Error("Invalid signature");
    return decodeJWT(e).payload;
}
const fo$1 = "irn";
function ku(e) {
    return e?.relay || { protocol: fo$1 };
}
function qu(e) {
    const t = C$5[e];
    if (typeof t > "u") throw new Error(`Relay Protocol not supported: ${e}`);
    return t;
}
var Ku = Object.defineProperty,
    Hu = Object.defineProperties,
    Lu = Object.getOwnPropertyDescriptors,
    oo$1 = Object.getOwnPropertySymbols,
    zu = Object.prototype.hasOwnProperty,
    ju = Object.prototype.propertyIsEnumerable,
    so = (e, t, r) => (t in e ? Ku(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : (e[t] = r)),
    ao$1 = (e, t) => {
        for (var r in t || (t = {})) zu.call(t, r) && so(e, r, t[r]);
        if (oo$1) for (var r of oo$1(t)) ju.call(t, r) && so(e, r, t[r]);
        return e;
    },
    Qu = (e, t) => Hu(e, Lu(t));
function uo(e, t = "-") {
    const r = {},
        i = "relay" + t;
    return (
        Object.keys(e).forEach((n) => {
            if (n.startsWith(i)) {
                const o = n.replace(i, ""),
                    h = e[n];
                r[o] = h;
            }
        }),
        r
    );
}
function Ju(e) {
    (e = e.includes("wc://") ? e.replace("wc://", "") : e), (e = e.includes("wc:") ? e.replace("wc:", "") : e);
    const t = e.indexOf(":"),
        r = e.indexOf("?") !== -1 ? e.indexOf("?") : void 0,
        i = e.substring(0, t),
        n = e.substring(t + 1, r).split("@"),
        o = typeof r < "u" ? e.substring(r) : "",
        h = queryString.parse(o),
        p = typeof h.methods == "string" ? h.methods.split(",") : void 0;
    return {
        protocol: i,
        topic: ho$1(n[0]),
        version: parseInt(n[1], 10),
        symKey: h.symKey,
        relay: uo(h),
        methods: p,
        expiryTimestamp: h.expiryTimestamp ? parseInt(h.expiryTimestamp, 10) : void 0,
    };
}
function ho$1(e) {
    return e.startsWith("//") ? e.substring(2) : e;
}
function co$1(e, t = "-") {
    const r = "relay",
        i = {};
    return (
        Object.keys(e).forEach((n) => {
            const o = r + t + n;
            e[n] && (i[o] = e[n]);
        }),
        i
    );
}
function Gu(e) {
    return (
        `${e.protocol}:${e.topic}@${e.version}?` +
        queryString.stringify(
            ao$1(Qu(ao$1({ symKey: e.symKey }, co$1(e.relay)), { expiryTimestamp: e.expiryTimestamp }), e.methods ? { methods: e.methods.join(",") } : {})
        )
    );
}
function Yu(e, t, r) {
    return `${e}?wc_ev=${r}&topic=${t}`;
}
function tr$1(e) {
    const t = [];
    return (
        e.forEach((r) => {
            const [i, n] = r.split(":");
            t.push(`${i}:${n}`);
        }),
        t
    );
}
function vo$1(e) {
    const t = [];
    return (
        Object.values(e).forEach((r) => {
            t.push(...tr$1(r.accounts));
        }),
        t
    );
}
function go$1(e, t) {
    const r = [];
    return (
        Object.values(e).forEach((i) => {
            tr$1(i.accounts).includes(t) && r.push(...i.methods);
        }),
        r
    );
}
function mo(e, t) {
    const r = [];
    return (
        Object.values(e).forEach((i) => {
            tr$1(i.accounts).includes(t) && r.push(...i.events);
        }),
        r
    );
}
function fn$1(e) {
    return e.includes(":");
}
function Ao$1(e) {
    return fn$1(e) ? e.split(":")[0] : e;
}
function bo(e) {
    const t = {};
    return (
        e?.forEach((r) => {
            const [i, n] = r.split(":");
            t[i] || (t[i] = { accounts: [], chains: [], events: [] }), t[i].accounts.push(r), t[i].chains.push(`${i}:${n}`);
        }),
        t
    );
}
function nh(e, t) {
    t = t.map((i) => i.replace("did:pkh:", ""));
    const r = bo(t);
    for (const [i, n] of Object.entries(r)) n.methods ? (n.methods = me$2(n.methods, e)) : (n.methods = e), (n.events = ["chainChanged", "accountsChanged"]);
    return r;
}
const yo = {
        INVALID_METHOD: { message: "Invalid method.", code: 1001 },
        INVALID_EVENT: { message: "Invalid event.", code: 1002 },
        INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 },
        INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 },
        INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 },
        UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 },
        UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 },
        UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 },
        UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 },
        USER_REJECTED: { message: "User rejected.", code: 5e3 },
        USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 },
        USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 },
        USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 },
        UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 },
        UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 },
        UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 },
        UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 },
        UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 },
        USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 },
        SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 },
        WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 },
    },
    wo$1 = {
        NOT_INITIALIZED: { message: "Not initialized.", code: 1 },
        NO_MATCHING_KEY: { message: "No matching key.", code: 2 },
        RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 },
        RESUBSCRIBED: { message: "Resubscribed.", code: 4 },
        MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 },
        EXPIRED: { message: "Expired.", code: 6 },
        UNKNOWN_TYPE: { message: "Unknown type.", code: 7 },
        MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 },
        NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 },
    };
function xe$1(e, t) {
    const { message: r, code: i } = wo$1[e];
    return { message: t ? `${r} ${t}` : r, code: i };
}
function er$2(e, t) {
    const { message: r, code: i } = yo[e];
    return { message: t ? `${r} ${t}` : r, code: i };
}
function Ir$1(e, t) {
    return Array.isArray(e) ? !0 : !1;
}
function Xr$1(e) {
    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;
}
function Pe$1(e) {
    return typeof e > "u";
}
function Yt$2(e, t) {
    return t && Pe$1(e) ? !0 : typeof e == "string" && !!e.trim().length;
}
function Zr$1(e, t) {
    return typeof e == "number" && !isNaN(e);
}
function fh(e, t) {
    const { requiredNamespaces: r } = t,
        i = Object.keys(e.namespaces),
        n = Object.keys(r);
    let o = !0;
    return _e$4(n, i)
        ? (i.forEach((h) => {
              const { accounts: p, methods: A, events: v } = e.namespaces[h],
                  w = tr$1(p),
                  y = r[h];
              (!_e$4(Or$1(h, y), w) || !_e$4(y.methods, A) || !_e$4(y.events, v)) && (o = !1);
          }),
          o)
        : !1;
}
function _r$1(e) {
    return Yt$2(e, !1) && e.includes(":") ? e.split(":").length === 2 : !1;
}
function xo$1(e) {
    if (Yt$2(e, !1) && e.includes(":")) {
        const t = e.split(":");
        if (t.length === 3) {
            const r = t[0] + ":" + t[1];
            return !!t[2] && _r$1(r);
        }
    }
    return !1;
}
function oh(e) {
    if (Yt$2(e, !1))
        try {
            return typeof new URL(e) < "u";
        } catch {
            return !1;
        }
    return !1;
}
function sh(e) {
    var t;
    return (t = e?.proposer) == null ? void 0 : t.publicKey;
}
function ah(e) {
    return e?.topic;
}
function uh(e, t) {
    let r = null;
    return Yt$2(e?.publicKey, !1) || (r = xe$1("MISSING_OR_INVALID", `${t} controller public key should be a string`)), r;
}
function sn$1(e) {
    let t = !0;
    return Ir$1(e) ? e.length && (t = e.every((r) => Yt$2(r, !1))) : (t = !1), t;
}
function Mo$1(e, t, r) {
    let i = null;
    return (
        Ir$1(t) && t.length
            ? t.forEach((n) => {
                  i || _r$1(n) || (i = er$2("UNSUPPORTED_CHAINS", `${r}, chain ${n} should be a string and conform to "namespace:chainId" format`));
              })
            : _r$1(e) ||
              (i = er$2(
                  "UNSUPPORTED_CHAINS",
                  `${r}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`
              )),
        i
    );
}
function Eo$1(e, t, r) {
    let i = null;
    return (
        Object.entries(e).forEach(([n, o]) => {
            if (i) return;
            const h = Mo$1(n, Or$1(n, o), `${t} ${r}`);
            h && (i = h);
        }),
        i
    );
}
function So$1(e, t) {
    let r = null;
    return (
        Ir$1(e)
            ? e.forEach((i) => {
                  r || xo$1(i) || (r = er$2("UNSUPPORTED_ACCOUNTS", `${t}, account ${i} should be a string and conform to "namespace:chainId:address" format`));
              })
            : (r = er$2("UNSUPPORTED_ACCOUNTS", `${t}, accounts should be an array of strings conforming to "namespace:chainId:address" format`)),
        r
    );
}
function No$1(e, t) {
    let r = null;
    return (
        Object.values(e).forEach((i) => {
            if (r) return;
            const n = So$1(i?.accounts, `${t} namespace`);
            n && (r = n);
        }),
        r
    );
}
function Io$1(e, t) {
    let r = null;
    return (
        sn$1(e?.methods)
            ? sn$1(e?.events) || (r = er$2("UNSUPPORTED_EVENTS", `${t}, events should be an array of strings or empty array for no events`))
            : (r = er$2("UNSUPPORTED_METHODS", `${t}, methods should be an array of strings or empty array for no methods`)),
        r
    );
}
function an$1(e, t) {
    let r = null;
    return (
        Object.values(e).forEach((i) => {
            if (r) return;
            const n = Io$1(i, `${t}, namespace`);
            n && (r = n);
        }),
        r
    );
}
function hh(e, t, r) {
    let i = null;
    if (e && Xr$1(e)) {
        const n = an$1(e, t);
        n && (i = n);
        const o = Eo$1(e, t, r);
        o && (i = o);
    } else i = xe$1("MISSING_OR_INVALID", `${t}, ${r} should be an object with data`);
    return i;
}
function _o(e, t) {
    let r = null;
    if (e && Xr$1(e)) {
        const i = an$1(e, t);
        i && (r = i);
        const n = No$1(e, t);
        n && (r = n);
    } else r = xe$1("MISSING_OR_INVALID", `${t}, namespaces should be an object with data`);
    return r;
}
function Bo(e) {
    return Yt$2(e.protocol, !0);
}
function ch(e, t) {
    let r = !1;
    return (
        !e
            ? (r = !0)
            : e &&
              Ir$1(e) &&
              e.length &&
              e.forEach((i) => {
                  r = Bo(i);
              }),
        r
    );
}
function lh(e) {
    return typeof e == "number";
}
function dh(e) {
    return typeof e < "u" && typeof e !== null;
}
function ph(e) {
    return !(!e || typeof e != "object" || !e.code || !Zr$1(e.code) || !e.message || !Yt$2(e.message, !1));
}
function vh(e) {
    return !(Pe$1(e) || !Yt$2(e.method, !1));
}
function gh(e) {
    return !(Pe$1(e) || (Pe$1(e.result) && Pe$1(e.error)) || !Zr$1(e.id) || !Yt$2(e.jsonrpc, !1));
}
function mh(e) {
    return !(Pe$1(e) || !Yt$2(e.name, !1));
}
function Ah(e, t) {
    return !(!_r$1(t) || !vo$1(e).includes(t));
}
function bh(e, t, r) {
    return Yt$2(r, !1) ? go$1(e, t).includes(r) : !1;
}
function yh(e, t, r) {
    return Yt$2(r, !1) ? mo(e, t).includes(r) : !1;
}
function Co$1(e, t, r) {
    let i = null;
    const n = wh(e),
        o = xh(t),
        h = Object.keys(n),
        p = Object.keys(o),
        A = Ro$1(Object.keys(e)),
        v = Ro$1(Object.keys(t)),
        w = A.filter((y) => !v.includes(y));
    return (
        w.length &&
            (i = xe$1(
                "NON_CONFORMING_NAMESPACES",
                `${r} namespaces keys don't satisfy requiredNamespaces.
      Required: ${w.toString()}
      Received: ${Object.keys(t).toString()}`
            )),
        _e$4(h, p) ||
            (i = xe$1(
                "NON_CONFORMING_NAMESPACES",
                `${r} namespaces chains don't satisfy required namespaces.
      Required: ${h.toString()}
      Approved: ${p.toString()}`
            )),
        Object.keys(t).forEach((y) => {
            if (!y.includes(":") || i) return;
            const S = tr$1(t[y].accounts);
            S.includes(y) ||
                (i = xe$1(
                    "NON_CONFORMING_NAMESPACES",
                    `${r} namespaces accounts don't satisfy namespace accounts for ${y}
        Required: ${y}
        Approved: ${S.toString()}`
                ));
        }),
        h.forEach((y) => {
            i ||
                (_e$4(n[y].methods, o[y].methods)
                    ? _e$4(n[y].events, o[y].events) ||
                      (i = xe$1("NON_CONFORMING_NAMESPACES", `${r} namespaces events don't satisfy namespace events for ${y}`))
                    : (i = xe$1("NON_CONFORMING_NAMESPACES", `${r} namespaces methods don't satisfy namespace methods for ${y}`)));
        }),
        i
    );
}
function wh(e) {
    const t = {};
    return (
        Object.keys(e).forEach((r) => {
            var i;
            r.includes(":")
                ? (t[r] = e[r])
                : (i = e[r].chains) == null ||
                  i.forEach((n) => {
                      t[n] = { methods: e[r].methods, events: e[r].events };
                  });
        }),
        t
    );
}
function Ro$1(e) {
    return [...new Set(e.map((t) => (t.includes(":") ? t.split(":")[0] : t)))];
}
function xh(e) {
    const t = {};
    return (
        Object.keys(e).forEach((r) => {
            if (r.includes(":")) t[r] = e[r];
            else {
                const i = tr$1(e[r].accounts);
                i?.forEach((n) => {
                    t[n] = { accounts: e[r].accounts.filter((o) => o.includes(`${n}:`)), methods: e[r].methods, events: e[r].events };
                });
            }
        }),
        t
    );
}
function Mh(e, t) {
    return Zr$1(e) && e <= t.max && e >= t.min;
}
function Eh() {
    const e = We$2();
    return new Promise((t) => {
        switch (e) {
            case qt$2.browser:
                t(Oo());
                break;
            case qt$2.reactNative:
                t(Po$1());
                break;
            case qt$2.node:
                t(Do$1());
                break;
            default:
                t(!0);
        }
    });
}
function Oo() {
    return gr$1() && navigator?.onLine;
}
async function Po$1() {
    if (rr$2() && typeof global < "u" && global != null && global.NetInfo) {
        const e = await (global == null ? void 0 : global.NetInfo.fetch());
        return e?.isConnected;
    }
    return !0;
}
function Do$1() {
    return !0;
}
function Sh(e) {
    switch (We$2()) {
        case qt$2.browser:
            Fo$1(e);
            break;
        case qt$2.reactNative:
            To$1(e);
            break;
    }
}
function Fo$1(e) {
    !rr$2() && gr$1() && (window.addEventListener("online", () => e(!0)), window.addEventListener("offline", () => e(!1)));
}
function To$1(e) {
    rr$2() && typeof global < "u" && global != null && global.NetInfo && global?.NetInfo.addEventListener((t) => e(t?.isConnected));
}
const un$1 = {};
class Nh {
    static get(t) {
        return un$1[t];
    }
    static set(t, r) {
        un$1[t] = r;
    }
    static delete(t) {
        delete un$1[t];
    }
}

const suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
const suspectConstructorRx =
    /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
const JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
    if (key === "__proto__" || (key === "constructor" && value && typeof value === "object" && "prototype" in value)) {
        warnKeyDropped(key);
        return;
    }
    return value;
}
function warnKeyDropped(key) {
    console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
    if (typeof value !== "string") {
        return value;
    }
    const _value = value.trim();
    if (
        // eslint-disable-next-line unicorn/prefer-at
        value[0] === '"' &&
        value.endsWith('"') &&
        !value.includes("\\")
    ) {
        return _value.slice(1, -1);
    }
    if (_value.length <= 9) {
        const _lval = _value.toLowerCase();
        if (_lval === "true") {
            return true;
        }
        if (_lval === "false") {
            return false;
        }
        if (_lval === "undefined") {
            return void 0;
        }
        if (_lval === "null") {
            return null;
        }
        if (_lval === "nan") {
            return Number.NaN;
        }
        if (_lval === "infinity") {
            return Number.POSITIVE_INFINITY;
        }
        if (_lval === "-infinity") {
            return Number.NEGATIVE_INFINITY;
        }
    }
    if (!JsonSigRx.test(value)) {
        if (options.strict) {
            throw new SyntaxError("[destr] Invalid JSON");
        }
        return value;
    }
    try {
        if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
            if (options.strict) {
                throw new Error("[destr] Possible prototype pollution");
            }
            return JSON.parse(value, jsonParseTransform);
        }
        return JSON.parse(value);
    } catch (error) {
        if (options.strict) {
            throw error;
        }
        return value;
    }
}

function wrapToPromise(value) {
    if (!value || typeof value.then !== "function") {
        return Promise.resolve(value);
    }
    return value;
}
function asyncCall(function_, ...arguments_) {
    try {
        return wrapToPromise(function_(...arguments_));
    } catch (error) {
        return Promise.reject(error);
    }
}
function isPrimitive(value) {
    const type = typeof value;
    return value === null || (type !== "object" && type !== "function");
}
function isPureObject(value) {
    const proto = Object.getPrototypeOf(value);
    return !proto || proto.isPrototypeOf(Object);
}
function stringify(value) {
    if (isPrimitive(value)) {
        return String(value);
    }
    if (isPureObject(value) || Array.isArray(value)) {
        return JSON.stringify(value);
    }
    if (typeof value.toJSON === "function") {
        return stringify(value.toJSON());
    }
    throw new Error("[unstorage] Cannot stringify value!");
}
function checkBufferSupport() {
    if (typeof Buffer === "undefined") {
        throw new TypeError("[unstorage] Buffer is not supported!");
    }
}
const BASE64_PREFIX = "base64:";
function serializeRaw(value) {
    if (typeof value === "string") {
        return value;
    }
    checkBufferSupport();
    const base64 = Buffer.from(value).toString("base64");
    return BASE64_PREFIX + base64;
}
function deserializeRaw(value) {
    if (typeof value !== "string") {
        return value;
    }
    if (!value.startsWith(BASE64_PREFIX)) {
        return value;
    }
    checkBufferSupport();
    return Buffer.from(value.slice(BASE64_PREFIX.length), "base64");
}
function normalizeKey(key) {
    if (!key) {
        return "";
    }
    return key.split("?")[0].replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "");
}
function joinKeys(...keys) {
    return normalizeKey(keys.join(":"));
}
function normalizeBaseKey(base) {
    base = normalizeKey(base);
    return base ? base + ":" : "";
}

function defineDriver(factory) {
    return factory;
}

const DRIVER_NAME = "memory";
const memory = defineDriver(() => {
    const data = /* @__PURE__ */ new Map();
    return {
        name: DRIVER_NAME,
        getInstance: () => data,
        hasItem(key) {
            return data.has(key);
        },
        getItem(key) {
            return data.get(key) ?? null;
        },
        getItemRaw(key) {
            return data.get(key) ?? null;
        },
        setItem(key, value) {
            data.set(key, value);
        },
        setItemRaw(key, value) {
            data.set(key, value);
        },
        removeItem(key) {
            data.delete(key);
        },
        getKeys() {
            return [...data.keys()];
        },
        clear() {
            data.clear();
        },
        dispose() {
            data.clear();
        },
    };
});

function createStorage(options = {}) {
    const context = {
        mounts: { "": options.driver || memory() },
        mountpoints: [""],
        watching: false,
        watchListeners: [],
        unwatch: {},
    };
    const getMount = (key) => {
        for (const base of context.mountpoints) {
            if (key.startsWith(base)) {
                return {
                    base,
                    relativeKey: key.slice(base.length),
                    driver: context.mounts[base],
                };
            }
        }
        return {
            base: "",
            relativeKey: key,
            driver: context.mounts[""],
        };
    };
    const getMounts = (base, includeParent) => {
        return context.mountpoints
            .filter((mountpoint) => mountpoint.startsWith(base) || (includeParent && base.startsWith(mountpoint)))
            .map((mountpoint) => ({
                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,
                mountpoint,
                driver: context.mounts[mountpoint],
            }));
    };
    const onChange = (event, key) => {
        if (!context.watching) {
            return;
        }
        key = normalizeKey(key);
        for (const listener of context.watchListeners) {
            listener(event, key);
        }
    };
    const startWatch = async () => {
        if (context.watching) {
            return;
        }
        context.watching = true;
        for (const mountpoint in context.mounts) {
            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);
        }
    };
    const stopWatch = async () => {
        if (!context.watching) {
            return;
        }
        for (const mountpoint in context.unwatch) {
            await context.unwatch[mountpoint]();
        }
        context.unwatch = {};
        context.watching = false;
    };
    const runBatch = (items, commonOptions, cb) => {
        const batches = /* @__PURE__ */ new Map();
        const getBatch = (mount) => {
            let batch = batches.get(mount.base);
            if (!batch) {
                batch = {
                    driver: mount.driver,
                    base: mount.base,
                    items: [],
                };
                batches.set(mount.base, batch);
            }
            return batch;
        };
        for (const item of items) {
            const isStringItem = typeof item === "string";
            const key = normalizeKey(isStringItem ? item : item.key);
            const value = isStringItem ? void 0 : item.value;
            const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
            const mount = getMount(key);
            getBatch(mount).items.push({
                key,
                value,
                relativeKey: mount.relativeKey,
                options: options2,
            });
        }
        return Promise.all([...batches.values()].map((batch) => cb(batch))).then((r) => r.flat());
    };
    const storage = {
        // Item
        hasItem(key, opts = {}) {
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            return asyncCall(driver.hasItem, relativeKey, opts);
        },
        getItem(key, opts = {}) {
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            return asyncCall(driver.getItem, relativeKey, opts).then((value) => destr(value));
        },
        getItems(items, commonOptions) {
            return runBatch(items, commonOptions, (batch) => {
                if (batch.driver.getItems) {
                    return asyncCall(
                        batch.driver.getItems,
                        batch.items.map((item) => ({
                            key: item.relativeKey,
                            options: item.options,
                        })),
                        commonOptions
                    ).then((r) =>
                        r.map((item) => ({
                            key: joinKeys(batch.base, item.key),
                            value: destr(item.value),
                        }))
                    );
                }
                return Promise.all(
                    batch.items.map((item) => {
                        return asyncCall(batch.driver.getItem, item.relativeKey, item.options).then((value) => ({
                            key: item.key,
                            value: destr(value),
                        }));
                    })
                );
            });
        },
        getItemRaw(key, opts = {}) {
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            if (driver.getItemRaw) {
                return asyncCall(driver.getItemRaw, relativeKey, opts);
            }
            return asyncCall(driver.getItem, relativeKey, opts).then((value) => deserializeRaw(value));
        },
        async setItem(key, value, opts = {}) {
            if (value === void 0) {
                return storage.removeItem(key);
            }
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            if (!driver.setItem) {
                return;
            }
            await asyncCall(driver.setItem, relativeKey, stringify(value), opts);
            if (!driver.watch) {
                onChange("update", key);
            }
        },
        async setItems(items, commonOptions) {
            await runBatch(items, commonOptions, async (batch) => {
                if (batch.driver.setItems) {
                    return asyncCall(
                        batch.driver.setItems,
                        batch.items.map((item) => ({
                            key: item.relativeKey,
                            value: stringify(item.value),
                            options: item.options,
                        })),
                        commonOptions
                    );
                }
                if (!batch.driver.setItem) {
                    return;
                }
                await Promise.all(
                    batch.items.map((item) => {
                        return asyncCall(batch.driver.setItem, item.relativeKey, stringify(item.value), item.options);
                    })
                );
            });
        },
        async setItemRaw(key, value, opts = {}) {
            if (value === void 0) {
                return storage.removeItem(key, opts);
            }
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            if (driver.setItemRaw) {
                await asyncCall(driver.setItemRaw, relativeKey, value, opts);
            } else if (driver.setItem) {
                await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
            } else {
                return;
            }
            if (!driver.watch) {
                onChange("update", key);
            }
        },
        async removeItem(key, opts = {}) {
            if (typeof opts === "boolean") {
                opts = { removeMeta: opts };
            }
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            if (!driver.removeItem) {
                return;
            }
            await asyncCall(driver.removeItem, relativeKey, opts);
            if (opts.removeMeta || opts.removeMata) {
                await asyncCall(driver.removeItem, relativeKey + "$", opts);
            }
            if (!driver.watch) {
                onChange("remove", key);
            }
        },
        // Meta
        async getMeta(key, opts = {}) {
            if (typeof opts === "boolean") {
                opts = { nativeOnly: opts };
            }
            key = normalizeKey(key);
            const { relativeKey, driver } = getMount(key);
            const meta = /* @__PURE__ */ Object.create(null);
            if (driver.getMeta) {
                Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
            }
            if (!opts.nativeOnly) {
                const value = await asyncCall(driver.getItem, relativeKey + "$", opts).then((value_) => destr(value_));
                if (value && typeof value === "object") {
                    if (typeof value.atime === "string") {
                        value.atime = new Date(value.atime);
                    }
                    if (typeof value.mtime === "string") {
                        value.mtime = new Date(value.mtime);
                    }
                    Object.assign(meta, value);
                }
            }
            return meta;
        },
        setMeta(key, value, opts = {}) {
            return this.setItem(key + "$", value, opts);
        },
        removeMeta(key, opts = {}) {
            return this.removeItem(key + "$", opts);
        },
        // Keys
        async getKeys(base, opts = {}) {
            base = normalizeBaseKey(base);
            const mounts = getMounts(base, true);
            let maskedMounts = [];
            const allKeys = [];
            for (const mount of mounts) {
                const rawKeys = await asyncCall(mount.driver.getKeys, mount.relativeBase, opts);
                for (const key of rawKeys) {
                    const fullKey = mount.mountpoint + normalizeKey(key);
                    if (!maskedMounts.some((p) => fullKey.startsWith(p))) {
                        allKeys.push(fullKey);
                    }
                }
                maskedMounts = [mount.mountpoint, ...maskedMounts.filter((p) => !p.startsWith(mount.mountpoint))];
            }
            return base ? allKeys.filter((key) => key.startsWith(base) && key[key.length - 1] !== "$") : allKeys.filter((key) => key[key.length - 1] !== "$");
        },
        // Utils
        async clear(base, opts = {}) {
            base = normalizeBaseKey(base);
            await Promise.all(
                getMounts(base, false).map(async (m) => {
                    if (m.driver.clear) {
                        return asyncCall(m.driver.clear, m.relativeBase, opts);
                    }
                    if (m.driver.removeItem) {
                        const keys = await m.driver.getKeys(m.relativeBase || "", opts);
                        return Promise.all(keys.map((key) => m.driver.removeItem(key, opts)));
                    }
                })
            );
        },
        async dispose() {
            await Promise.all(Object.values(context.mounts).map((driver) => dispose(driver)));
        },
        async watch(callback) {
            await startWatch();
            context.watchListeners.push(callback);
            return async () => {
                context.watchListeners = context.watchListeners.filter((listener) => listener !== callback);
                if (context.watchListeners.length === 0) {
                    await stopWatch();
                }
            };
        },
        async unwatch() {
            context.watchListeners = [];
            await stopWatch();
        },
        // Mount
        mount(base, driver) {
            base = normalizeBaseKey(base);
            if (base && context.mounts[base]) {
                throw new Error(`already mounted at ${base}`);
            }
            if (base) {
                context.mountpoints.push(base);
                context.mountpoints.sort((a, b) => b.length - a.length);
            }
            context.mounts[base] = driver;
            if (context.watching) {
                Promise.resolve(watch(driver, onChange, base))
                    .then((unwatcher) => {
                        context.unwatch[base] = unwatcher;
                    })
                    .catch(console.error);
            }
            return storage;
        },
        async unmount(base, _dispose = true) {
            base = normalizeBaseKey(base);
            if (!base || !context.mounts[base]) {
                return;
            }
            if (context.watching && base in context.unwatch) {
                context.unwatch[base]();
                delete context.unwatch[base];
            }
            if (_dispose) {
                await dispose(context.mounts[base]);
            }
            context.mountpoints = context.mountpoints.filter((key) => key !== base);
            delete context.mounts[base];
        },
        getMount(key = "") {
            key = normalizeKey(key) + ":";
            const m = getMount(key);
            return {
                driver: m.driver,
                base: m.base,
            };
        },
        getMounts(base = "", opts = {}) {
            base = normalizeKey(base);
            const mounts = getMounts(base, opts.parents);
            return mounts.map((m) => ({
                driver: m.driver,
                base: m.mountpoint,
            }));
        },
        // Aliases
        keys: (base, opts = {}) => storage.getKeys(base, opts),
        get: (key, opts = {}) => storage.getItem(key, opts),
        set: (key, value, opts = {}) => storage.setItem(key, value, opts),
        has: (key, opts = {}) => storage.hasItem(key, opts),
        del: (key, opts = {}) => storage.removeItem(key, opts),
        remove: (key, opts = {}) => storage.removeItem(key, opts),
    };
    return storage;
}
function watch(driver, onChange, base) {
    return driver.watch ? driver.watch((event, key) => onChange(event, base + key)) : () => {};
}
async function dispose(driver) {
    if (typeof driver.dispose === "function") {
        await asyncCall(driver.dispose);
    }
}

function promisifyRequest(request) {
    return new Promise((resolve, reject) => {
        // @ts-ignore - file size hacks
        request.oncomplete = request.onsuccess = () => resolve(request.result);
        // @ts-ignore - file size hacks
        request.onabort = request.onerror = () => reject(request.error);
    });
}
function createStore(dbName, storeName) {
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    const dbp = promisifyRequest(request);
    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
let defaultGetStoreFunc;
function defaultGetStore() {
    if (!defaultGetStoreFunc) {
        defaultGetStoreFunc = createStore("keyval-store", "keyval");
    }
    return defaultGetStoreFunc;
}
/**
 * Get a value by its key.
 *
 * @param key
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function get(key, customStore = defaultGetStore()) {
    return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
/**
 * Set a value with a key.
 *
 * @param key
 * @param value
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function set$1(key, value, customStore = defaultGetStore()) {
    return customStore("readwrite", (store) => {
        store.put(value, key);
        return promisifyRequest(store.transaction);
    });
}
/**
 * Delete a particular key from the store.
 *
 * @param key
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function del(key, customStore = defaultGetStore()) {
    return customStore("readwrite", (store) => {
        store.delete(key);
        return promisifyRequest(store.transaction);
    });
}
/**
 * Clear all values in the store.
 *
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function clear(customStore = defaultGetStore()) {
    return customStore("readwrite", (store) => {
        store.clear();
        return promisifyRequest(store.transaction);
    });
}
function eachCursor(store, callback) {
    store.openCursor().onsuccess = function () {
        if (!this.result) return;
        callback(this.result);
        this.result.continue();
    };
    return promisifyRequest(store.transaction);
}
/**
 * Get all keys in the store.
 *
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function keys(customStore = defaultGetStore()) {
    return customStore("readonly", (store) => {
        // Fast path for modern browsers
        if (store.getAllKeys) {
            return promisifyRequest(store.getAllKeys());
        }
        const items = [];
        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
    });
}

const x$4 = "idb-keyval";
var z$5 = (i = {}) => {
    const t = i.base && i.base.length > 0 ? `${i.base}:` : "",
        e = (s) => t + s;
    let n;
    return (
        i.dbName && i.storeName && (n = createStore(i.dbName, i.storeName)),
        {
            name: x$4,
            options: i,
            async hasItem(s) {
                return !(typeof (await get(e(s), n)) > "u");
            },
            async getItem(s) {
                return (await get(e(s), n)) ?? null;
            },
            setItem(s, a) {
                return set$1(e(s), a, n);
            },
            removeItem(s) {
                return del(e(s), n);
            },
            getKeys() {
                return keys(n);
            },
            clear() {
                return clear(n);
            },
        }
    );
};
const D$4 = "WALLET_CONNECT_V2_INDEXED_DB",
    E$5 = "keyvaluestorage";
let _$4 = class _ {
    constructor() {
        this.indexedDb = createStorage({ driver: z$5({ dbName: D$4, storeName: E$5 }) });
    }
    async getKeys() {
        return this.indexedDb.getKeys();
    }
    async getEntries() {
        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t) => [t.key, t.value]);
    }
    async getItem(t) {
        const e = await this.indexedDb.getItem(t);
        if (e !== null) return e;
    }
    async setItem(t, e) {
        await this.indexedDb.setItem(t, safeJsonStringify(e));
    }
    async removeItem(t) {
        await this.indexedDb.removeItem(t);
    }
};
var l$7 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {},
    c$7 = { exports: {} };
(function () {
    let i;
    function t() {}
    (i = t),
        (i.prototype.getItem = function (e) {
            return this.hasOwnProperty(e) ? String(this[e]) : null;
        }),
        (i.prototype.setItem = function (e, n) {
            this[e] = String(n);
        }),
        (i.prototype.removeItem = function (e) {
            delete this[e];
        }),
        (i.prototype.clear = function () {
            const e = this;
            Object.keys(e).forEach(function (n) {
                (e[n] = void 0), delete e[n];
            });
        }),
        (i.prototype.key = function (e) {
            return (e = e || 0), Object.keys(this)[e];
        }),
        i.prototype.__defineGetter__("length", function () {
            return Object.keys(this).length;
        }),
        typeof l$7 < "u" && l$7.localStorage
            ? (c$7.exports = l$7.localStorage)
            : typeof window < "u" && window.localStorage
            ? (c$7.exports = window.localStorage)
            : (c$7.exports = new t());
})();
function k$3(i) {
    var t;
    return [i[0], safeJsonParse((t = i[1]) != null ? t : "")];
}
let K$2 = class K {
    constructor() {
        this.localStorage = c$7.exports;
    }
    async getKeys() {
        return Object.keys(this.localStorage);
    }
    async getEntries() {
        return Object.entries(this.localStorage).map(k$3);
    }
    async getItem(t) {
        const e = this.localStorage.getItem(t);
        if (e !== null) return safeJsonParse(e);
    }
    async setItem(t, e) {
        this.localStorage.setItem(t, safeJsonStringify(e));
    }
    async removeItem(t) {
        this.localStorage.removeItem(t);
    }
};
const N$3 = "wc_storage_version",
    y$7 = 1,
    O$5 = async (i, t, e) => {
        const n = N$3,
            s = await t.getItem(n);
        if (s && s >= y$7) {
            e(t);
            return;
        }
        const a = await i.getKeys();
        if (!a.length) {
            e(t);
            return;
        }
        const m = [];
        for (; a.length; ) {
            const r = a.shift();
            if (!r) continue;
            const o = r.toLowerCase();
            if (o.includes("wc@") || o.includes("walletconnect") || o.includes("wc_") || o.includes("wallet_connect")) {
                const f = await i.getItem(r);
                await t.setItem(r, f), m.push(r);
            }
        }
        await t.setItem(n, y$7), e(t), j$5(i, m);
    },
    j$5 = async (i, t) => {
        t.length &&
            t.forEach(async (e) => {
                await i.removeItem(e);
            });
    };
let h$6 = class h {
    constructor() {
        (this.initialized = !1),
            (this.setInitialized = (e) => {
                (this.storage = e), (this.initialized = !0);
            });
        const t = new K$2();
        this.storage = t;
        try {
            const e = new _$4();
            O$5(t, e, this.setInitialized);
        } catch {
            this.initialized = !0;
        }
    }
    async getKeys() {
        return await this.initialize(), this.storage.getKeys();
    }
    async getEntries() {
        return await this.initialize(), this.storage.getEntries();
    }
    async getItem(t) {
        return await this.initialize(), this.storage.getItem(t);
    }
    async setItem(t, e) {
        return await this.initialize(), this.storage.setItem(t, e);
    }
    async removeItem(t) {
        return await this.initialize(), this.storage.removeItem(t);
    }
    async initialize() {
        this.initialized ||
            (await new Promise((t) => {
                const e = setInterval(() => {
                    this.initialized && (clearInterval(e), t());
                }, 20);
            }));
    }
};

class IEvents {}

let n$9 = class n extends IEvents {
    constructor(e) {
        super();
    }
};
const s$5 = cjs$3.FIVE_SECONDS,
    r$5 = { pulse: "heartbeat_pulse" };
let i$5 = class i extends n$9 {
    constructor(e) {
        super(e), (this.events = new eventsExports.EventEmitter()), (this.interval = s$5), (this.interval = e?.interval || s$5);
    }
    static async init(e) {
        const t = new i(e);
        return await t.init(), t;
    }
    async init() {
        await this.initialize();
    }
    stop() {
        clearInterval(this.intervalRef);
    }
    on(e, t) {
        this.events.on(e, t);
    }
    once(e, t) {
        this.events.once(e, t);
    }
    off(e, t) {
        this.events.off(e, t);
    }
    removeListener(e, t) {
        this.events.removeListener(e, t);
    }
    async initialize() {
        this.intervalRef = setInterval(() => this.pulse(), cjs$3.toMiliseconds(this.interval));
    }
    pulse() {
        this.events.emit(r$5.pulse);
    }
};

function tryStringify(o) {
    try {
        return JSON.stringify(o);
    } catch (e) {
        return '"[Circular]"';
    }
}

var quickFormatUnescaped = format$1;

function format$1(f, args, opts) {
    var ss = (opts && opts.stringify) || tryStringify;
    var offset = 1;
    if (typeof f === "object" && f !== null) {
        var len = args.length + offset;
        if (len === 1) return f;
        var objects = new Array(len);
        objects[0] = ss(f);
        for (var index = 1; index < len; index++) {
            objects[index] = ss(args[index]);
        }
        return objects.join(" ");
    }
    if (typeof f !== "string") {
        return f;
    }
    var argLen = args.length;
    if (argLen === 0) return f;
    var str = "";
    var a = 1 - offset;
    var lastPos = -1;
    var flen = (f && f.length) || 0;
    for (var i = 0; i < flen; ) {
        if (f.charCodeAt(i) === 37 && i + 1 < flen) {
            lastPos = lastPos > -1 ? lastPos : 0;
            switch (f.charCodeAt(i + 1)) {
                case 100: // 'd'
                case 102: // 'f'
                    if (a >= argLen) break;
                    if (args[a] == null) break;
                    if (lastPos < i) str += f.slice(lastPos, i);
                    str += Number(args[a]);
                    lastPos = i + 2;
                    i++;
                    break;
                case 105: // 'i'
                    if (a >= argLen) break;
                    if (args[a] == null) break;
                    if (lastPos < i) str += f.slice(lastPos, i);
                    str += Math.floor(Number(args[a]));
                    lastPos = i + 2;
                    i++;
                    break;
                case 79: // 'O'
                case 111: // 'o'
                case 106: // 'j'
                    if (a >= argLen) break;
                    if (args[a] === undefined) break;
                    if (lastPos < i) str += f.slice(lastPos, i);
                    var type = typeof args[a];
                    if (type === "string") {
                        str += "'" + args[a] + "'";
                        lastPos = i + 2;
                        i++;
                        break;
                    }
                    if (type === "function") {
                        str += args[a].name || "<anonymous>";
                        lastPos = i + 2;
                        i++;
                        break;
                    }
                    str += ss(args[a]);
                    lastPos = i + 2;
                    i++;
                    break;
                case 115: // 's'
                    if (a >= argLen) break;
                    if (lastPos < i) str += f.slice(lastPos, i);
                    str += String(args[a]);
                    lastPos = i + 2;
                    i++;
                    break;
                case 37: // '%'
                    if (lastPos < i) str += f.slice(lastPos, i);
                    str += "%";
                    lastPos = i + 2;
                    i++;
                    a--;
                    break;
            }
            ++a;
        }
        ++i;
    }
    if (lastPos === -1) return f;
    else if (lastPos < flen) {
        str += f.slice(lastPos);
    }

    return str;
}

const format = quickFormatUnescaped;

var browser$1 = pino;

const _console = pfGlobalThisOrFallback().console || {};
const stdSerializers = {
    mapHttpRequest: mock,
    mapHttpResponse: mock,
    wrapRequestSerializer: passthrough,
    wrapResponseSerializer: passthrough,
    wrapErrorSerializer: passthrough,
    req: mock,
    res: mock,
    err: asErrValue,
};

function shouldSerialize(serialize, serializers) {
    if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function (k) {
            return k !== "!stdSerializers.err";
        });
        return hasToFilter;
    } else if (serialize === true) {
        return Object.keys(serializers);
    }

    return false;
}

function pino(opts) {
    opts = opts || {};
    opts.browser = opts.browser || {};

    const transmit = opts.browser.transmit;
    if (transmit && typeof transmit.send !== "function") {
        throw Error("pino: transmit option must have a send function");
    }

    const proto = opts.browser.write || _console;
    if (opts.browser.write) opts.browser.asObject = true;
    const serializers = opts.serializers || {};
    const serialize = shouldSerialize(opts.browser.serialize, serializers);
    let stdErrSerialize = opts.browser.serialize;

    if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;

    const levels = ["error", "fatal", "warn", "info", "debug", "trace"];

    if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
    }
    if (opts.enabled === false) opts.level = "silent";
    const level = opts.level || "info";
    const logger = Object.create(proto);
    if (!logger.log) logger.log = noop$1;

    Object.defineProperty(logger, "levelVal", {
        get: getLevelVal,
    });
    Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel,
    });

    const setOpts = {
        transmit,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts),
    };
    logger.levels = pino.levels;
    logger.level = level;

    logger.setMaxListeners =
        logger.getMaxListeners =
        logger.emit =
        logger.addListener =
        logger.on =
        logger.prependListener =
        logger.once =
        logger.prependOnceListener =
        logger.removeListener =
        logger.removeAllListeners =
        logger.listeners =
        logger.listenerCount =
        logger.eventNames =
        logger.write =
        logger.flush =
            noop$1;
    logger.serializers = serializers;
    logger._serialize = serialize;
    logger._stdErrSerialize = stdErrSerialize;
    logger.child = child;

    if (transmit) logger._logEvent = createLogEventShape();

    function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
    }

    function getLevel() {
        return this._level;
    }
    function setLevel(level) {
        if (level !== "silent" && !this.levels.values[level]) {
            throw Error("unknown level " + level);
        }
        this._level = level;

        set(setOpts, logger, "error", "log"); // <-- must stay first
        set(setOpts, logger, "fatal", "error");
        set(setOpts, logger, "warn", "error");
        set(setOpts, logger, "info", "log");
        set(setOpts, logger, "debug", "log");
        set(setOpts, logger, "trace", "log");
    }

    function child(bindings, childOptions) {
        if (!bindings) {
            throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
            childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
            var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
            var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
            delete bindings.serializers;
            applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
            this._childLevel = (parent._childLevel | 0) + 1;
            this.error = bind(parent, bindings, "error");
            this.fatal = bind(parent, bindings, "fatal");
            this.warn = bind(parent, bindings, "warn");
            this.info = bind(parent, bindings, "info");
            this.debug = bind(parent, bindings, "debug");
            this.trace = bind(parent, bindings, "trace");
            if (childSerializers) {
                this.serializers = childSerializers;
                this._serialize = childSerialize;
            }
            if (transmit) {
                this._logEvent = createLogEventShape([].concat(parent._logEvent.bindings, bindings));
            }
        }
        Child.prototype = this;
        return new Child(this);
    }
    return logger;
}

pino.levels = {
    values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10,
    },
    labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal",
    },
};

pino.stdSerializers = stdSerializers;
pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });

function set(opts, logger, level, fallback) {
    const proto = Object.getPrototypeOf(logger);
    logger[level] = logger.levelVal > logger.levels.values[level] ? noop$1 : proto[level] ? proto[level] : _console[level] || _console[fallback] || noop$1;

    wrap$1(opts, logger, level);
}

function wrap$1(opts, logger, level) {
    if (!opts.transmit && logger[level] === noop$1) return;

    logger[level] = (function (write) {
        return function LOG() {
            const ts = opts.timestamp();
            const args = new Array(arguments.length);
            const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
            for (var i = 0; i < args.length; i++) args[i] = arguments[i];

            if (opts.serialize && !opts.asObject) {
                applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
            }
            if (opts.asObject) write.call(proto, asObject(this, level, args, ts));
            else write.apply(proto, args);

            if (opts.transmit) {
                const transmitLevel = opts.transmit.level || logger.level;
                const transmitValue = pino.levels.values[transmitLevel];
                const methodValue = pino.levels.values[level];
                if (methodValue < transmitValue) return;
                transmit(
                    this,
                    {
                        ts,
                        methodLevel: level,
                        methodValue,
                        transmitLevel,
                        transmitValue: pino.levels.values[opts.transmit.level || logger.level],
                        send: opts.transmit.send,
                        val: logger.levelVal,
                    },
                    args
                );
            }
        };
    })(logger[level]);
}

function asObject(logger, level, args, ts) {
    if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
    const argsCloned = args.slice();
    let msg = argsCloned[0];
    const o = {};
    if (ts) {
        o.time = ts;
    }
    o.level = pino.levels.values[level];
    let lvl = (logger._childLevel | 0) + 1;
    if (lvl < 1) lvl = 1;
    // deliberate, catching objects, arrays
    if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
            Object.assign(o, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined;
    } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
    if (msg !== undefined) o.msg = msg;
    return o;
}

function applySerializers(args, serialize, serializers, stdErrSerialize) {
    for (const i in args) {
        if (stdErrSerialize && args[i] instanceof Error) {
            args[i] = pino.stdSerializers.err(args[i]);
        } else if (typeof args[i] === "object" && !Array.isArray(args[i])) {
            for (const k in args[i]) {
                if (serialize && serialize.indexOf(k) > -1 && k in serializers) {
                    args[i][k] = serializers[k](args[i][k]);
                }
            }
        }
    }
}

function bind(parent, bindings, level) {
    return function () {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i = 1; i < args.length; i++) {
            args[i] = arguments[i - 1];
        }
        return parent[level].apply(this, args);
    };
}

function transmit(logger, opts, args) {
    const send = opts.send;
    const ts = opts.ts;
    const methodLevel = opts.methodLevel;
    const methodValue = opts.methodValue;
    const val = opts.val;
    const bindings = logger._logEvent.bindings;

    applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize
    );
    logger._logEvent.ts = ts;
    logger._logEvent.messages = args.filter(function (arg) {
        // bindings can only be objects, so reference equality check via indexOf is fine
        return bindings.indexOf(arg) === -1;
    });

    logger._logEvent.level.label = methodLevel;
    logger._logEvent.level.value = methodValue;

    send(methodLevel, logger._logEvent, val);

    logger._logEvent = createLogEventShape(bindings);
}

function createLogEventShape(bindings) {
    return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 },
    };
}

function asErrValue(err) {
    const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack,
    };
    for (const key in err) {
        if (obj[key] === undefined) {
            obj[key] = err[key];
        }
    }
    return obj;
}

function getTimeFunction(opts) {
    if (typeof opts.timestamp === "function") {
        return opts.timestamp;
    }
    if (opts.timestamp === false) {
        return nullTime;
    }
    return epochTime;
}

function mock() {
    return {};
}
function passthrough(a) {
    return a;
}
function noop$1() {}

function nullTime() {
    return false;
}
function epochTime() {
    return Date.now();
}
function unixTime() {
    return Math.round(Date.now() / 1000.0);
}
function isoTime() {
    return new Date(Date.now()).toISOString();
} // using Date.now() for testability

/* eslint-disable */
/* istanbul ignore next */
function pfGlobalThisOrFallback() {
    function defd(o) {
        return typeof o !== "undefined" && o;
    }
    try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
            get: function () {
                delete Object.prototype.globalThis;
                return (this.globalThis = this);
            },
            configurable: true,
        });
        return globalThis;
    } catch (e) {
        return defd(self) || defd(window) || defd(this) || {};
    }
}
/* eslint-enable */

var Wg = /*@__PURE__*/ getDefaultExportFromCjs(browser$1);

const c$6 = { level: "info" },
    n$8 = "custom_context",
    l$6 = 1e3 * 1024;
let O$4 = class O {
    constructor(e) {
        (this.nodeValue = e), (this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length), (this.next = null);
    }
    get value() {
        return this.nodeValue;
    }
    get size() {
        return this.sizeInBytes;
    }
};
let d$6 = class d {
    constructor(e) {
        (this.head = null), (this.tail = null), (this.lengthInNodes = 0), (this.maxSizeInBytes = e), (this.sizeInBytes = 0);
    }
    append(e) {
        const t = new O$4(e);
        if (t.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e} with size ${t.size}`);
        for (; this.size + t.size > this.maxSizeInBytes; ) this.shift();
        this.head ? (this.tail && (this.tail.next = t), (this.tail = t)) : ((this.head = t), (this.tail = t)),
            this.lengthInNodes++,
            (this.sizeInBytes += t.size);
    }
    shift() {
        if (!this.head) return;
        const e = this.head;
        (this.head = this.head.next), this.head || (this.tail = null), this.lengthInNodes--, (this.sizeInBytes -= e.size);
    }
    toArray() {
        const e = [];
        let t = this.head;
        for (; t !== null; ) e.push(t.value), (t = t.next);
        return e;
    }
    get length() {
        return this.lengthInNodes;
    }
    get size() {
        return this.sizeInBytes;
    }
    toOrderedArray() {
        return Array.from(this);
    }
    [Symbol.iterator]() {
        let e = this.head;
        return {
            next: () => {
                if (!e) return { done: !0, value: null };
                const t = e.value;
                return (e = e.next), { done: !1, value: t };
            },
        };
    }
};
let L$6 = class L {
    constructor(e, t = l$6) {
        (this.level = e ?? "error"),
            (this.levelValue = browser$1.levels.values[this.level]),
            (this.MAX_LOG_SIZE_IN_BYTES = t),
            (this.logs = new d$6(this.MAX_LOG_SIZE_IN_BYTES));
    }
    forwardToConsole(e, t) {
        t === browser$1.levels.values.error
            ? console.error(e)
            : t === browser$1.levels.values.warn
            ? console.warn(e)
            : t === browser$1.levels.values.debug
            ? console.debug(e)
            : t === browser$1.levels.values.trace
            ? console.trace(e)
            : console.log(e);
    }
    appendToLogs(e) {
        this.logs.append(safeJsonStringify({ timestamp: new Date().toISOString(), log: e }));
        const t = typeof e == "string" ? JSON.parse(e).level : e.level;
        t >= this.levelValue && this.forwardToConsole(e, t);
    }
    getLogs() {
        return this.logs;
    }
    clearLogs() {
        this.logs = new d$6(this.MAX_LOG_SIZE_IN_BYTES);
    }
    getLogArray() {
        return Array.from(this.logs);
    }
    logsToBlob(e) {
        const t = this.getLogArray();
        return t.push(safeJsonStringify({ extraMetadata: e })), new Blob(t, { type: "application/json" });
    }
};
let m$3 = class m {
    constructor(e, t = l$6) {
        this.baseChunkLogger = new L$6(e, t);
    }
    write(e) {
        this.baseChunkLogger.appendToLogs(e);
    }
    getLogs() {
        return this.baseChunkLogger.getLogs();
    }
    clearLogs() {
        this.baseChunkLogger.clearLogs();
    }
    getLogArray() {
        return this.baseChunkLogger.getLogArray();
    }
    logsToBlob(e) {
        return this.baseChunkLogger.logsToBlob(e);
    }
    downloadLogsBlobInBrowser(e) {
        const t = URL.createObjectURL(this.logsToBlob(e)),
            o = document.createElement("a");
        (o.href = t),
            (o.download = `walletconnect-logs-${new Date().toISOString()}.txt`),
            document.body.appendChild(o),
            o.click(),
            document.body.removeChild(o),
            URL.revokeObjectURL(t);
    }
};
let B$3 = class B {
    constructor(e, t = l$6) {
        this.baseChunkLogger = new L$6(e, t);
    }
    write(e) {
        this.baseChunkLogger.appendToLogs(e);
    }
    getLogs() {
        return this.baseChunkLogger.getLogs();
    }
    clearLogs() {
        this.baseChunkLogger.clearLogs();
    }
    getLogArray() {
        return this.baseChunkLogger.getLogArray();
    }
    logsToBlob(e) {
        return this.baseChunkLogger.logsToBlob(e);
    }
};
var x$3 = Object.defineProperty,
    S$6 = Object.defineProperties,
    _$3 = Object.getOwnPropertyDescriptors,
    p$5 = Object.getOwnPropertySymbols,
    T$6 = Object.prototype.hasOwnProperty,
    z$4 = Object.prototype.propertyIsEnumerable,
    f$4 = (r, e, t) => (e in r ? x$3(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (r[e] = t)),
    i$4 = (r, e) => {
        for (var t in e || (e = {})) T$6.call(e, t) && f$4(r, t, e[t]);
        if (p$5) for (var t of p$5(e)) z$4.call(e, t) && f$4(r, t, e[t]);
        return r;
    },
    g$5 = (r, e) => S$6(r, _$3(e));
function k$2(r) {
    return g$5(i$4({}, r), { level: r?.level || c$6.level });
}
function v$6(r, e = n$8) {
    return r[e] || "";
}
function b$3(r, e, t = n$8) {
    return (r[t] = e), r;
}
function y$6(r, e = n$8) {
    let t = "";
    return typeof r.bindings > "u" ? (t = v$6(r, e)) : (t = r.bindings().context || ""), t;
}
function w$5(r, e, t = n$8) {
    const o = y$6(r, t);
    return o.trim() ? `${o}/${e}` : e;
}
function E$4(r, e, t = n$8) {
    const o = w$5(r, e, t),
        a = r.child({ context: o });
    return b$3(a, o, t);
}
function C$4(r) {
    var e, t;
    const o = new m$3((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);
    return {
        logger: Wg(g$5(i$4({}, r.opts), { level: "trace", browser: g$5(i$4({}, (t = r.opts) == null ? void 0 : t.browser), { write: (a) => o.write(a) }) })),
        chunkLoggerController: o,
    };
}
function I$3(r) {
    var e;
    const t = new B$3((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);
    return { logger: Wg(g$5(i$4({}, r.opts), { level: "trace" }), t), chunkLoggerController: t };
}
function A$3(r) {
    return typeof r.loggerOverride < "u" && typeof r.loggerOverride != "string"
        ? { logger: r.loggerOverride, chunkLoggerController: null }
        : typeof window < "u"
        ? C$4(r)
        : I$3(r);
}

let n$7 = class n extends IEvents {
    constructor(s) {
        super(), (this.opts = s), (this.protocol = "wc"), (this.version = 2);
    }
};
let h$5 = class h extends IEvents {
    constructor(s, t) {
        super(), (this.core = s), (this.logger = t), (this.records = new Map());
    }
};
let a$4 = class a {
    constructor(s, t) {
        (this.logger = s), (this.core = t);
    }
};
let g$4 = class g extends IEvents {
    constructor(s, t) {
        super(), (this.relayer = s), (this.logger = t);
    }
};
let u$3 = class u extends IEvents {
    constructor(s) {
        super();
    }
};
let p$4 = class p {
    constructor(s, t, e, f) {
        (this.core = s), (this.logger = t), (this.name = e);
    }
};
let d$5 = class d extends IEvents {
    constructor(s, t) {
        super(), (this.relayer = s), (this.logger = t);
    }
};
let x$2 = class x extends IEvents {
    constructor(s, t) {
        super(), (this.core = s), (this.logger = t);
    }
};
let y$5 = class y {
    constructor(s, t, e) {
        (this.core = s), (this.logger = t), (this.store = e);
    }
};
let v$5 = class v {
    constructor(s, t) {
        (this.projectId = s), (this.logger = t);
    }
};
let C$3 = class C {
    constructor(s, t, e) {
        (this.core = s), (this.logger = t), (this.telemetryEnabled = e);
    }
};
let S$5 = class S {
    constructor(s) {
        (this.opts = s), (this.protocol = "wc"), (this.version = 2);
    }
};
let M$3 = class M {
    constructor(s) {
        this.client = s;
    }
};

const PARSE_ERROR = "PARSE_ERROR";
const INVALID_REQUEST = "INVALID_REQUEST";
const METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
const INVALID_PARAMS = "INVALID_PARAMS";
const INTERNAL_ERROR = "INTERNAL_ERROR";
const SERVER_ERROR = "SERVER_ERROR";
const RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
const STANDARD_ERROR_MAP = {
    [PARSE_ERROR]: { code: -32700, message: "Parse error" },
    [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
    [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
    [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
    [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
    [SERVER_ERROR]: { code: -32000, message: "Server error" },
};
const DEFAULT_ERROR = SERVER_ERROR;

function isReservedErrorCode(code) {
    return RESERVED_ERROR_CODES.includes(code);
}
function getError(type) {
    if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
        return STANDARD_ERROR_MAP[DEFAULT_ERROR];
    }
    return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code) {
    const match = Object.values(STANDARD_ERROR_MAP).find((e) => e.code === code);
    if (!match) {
        return STANDARD_ERROR_MAP[DEFAULT_ERROR];
    }
    return match;
}
function parseConnectionError(e, url, type) {
    return e.message.includes("getaddrinfo ENOTFOUND") || e.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;
}

var cjs = {};

var crypto$1 = {};

var hasRequiredCrypto;

function requireCrypto() {
    if (hasRequiredCrypto) return crypto$1;
    hasRequiredCrypto = 1;
    Object.defineProperty(crypto$1, "__esModule", { value: true });
    crypto$1.isBrowserCryptoAvailable = crypto$1.getSubtleCrypto = crypto$1.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
        return (
            (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.crypto) ||
            (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.msCrypto) ||
            {}
        );
    }
    crypto$1.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
        const browserCrypto = getBrowerCrypto();
        return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    crypto$1.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
        return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    crypto$1.isBrowserCryptoAvailable = isBrowserCryptoAvailable;

    return crypto$1;
}

var env = {};

var hasRequiredEnv;

function requireEnv() {
    if (hasRequiredEnv) return env;
    hasRequiredEnv = 1;
    Object.defineProperty(env, "__esModule", { value: true });
    env.isBrowser = env.isNode = env.isReactNative = void 0;
    function isReactNative() {
        return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    env.isReactNative = isReactNative;
    function isNode() {
        return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    env.isNode = isNode;
    function isBrowser() {
        return !isReactNative() && !isNode();
    }
    env.isBrowser = isBrowser;

    return env;
}

(function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require$$0$2;
    tslib_1.__exportStar(requireCrypto(), exports);
    tslib_1.__exportStar(requireEnv(), exports);
})(cjs);

function payloadId(entropy = 3) {
    const date = Date.now() * Math.pow(10, entropy);
    const extra = Math.floor(Math.random() * Math.pow(10, entropy));
    return date + extra;
}
function getBigIntRpcId(entropy = 6) {
    return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
    return {
        id: id || payloadId(),
        jsonrpc: "2.0",
        method,
        params,
    };
}
function formatJsonRpcResult(id, result) {
    return {
        id,
        jsonrpc: "2.0",
        result,
    };
}
function formatJsonRpcError(id, error, data) {
    return {
        id,
        jsonrpc: "2.0",
        error: formatErrorMessage(error),
    };
}
function formatErrorMessage(error, data) {
    if (typeof error === "undefined") {
        return getError(INTERNAL_ERROR);
    }
    if (typeof error === "string") {
        error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
    }
    if (isReservedErrorCode(error.code)) {
        error = getErrorByCode(error.code);
    }
    return error;
}

let e$6 = class e {};
let n$6 = class n extends e$6 {
    constructor() {
        super();
    }
};
let r$4 = class r extends n$6 {
    constructor(c) {
        super();
    }
};

const HTTP_REGEX = "^https?:";
const WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
    const matches = url.match(new RegExp(/^\w+:/, "gi"));
    if (!matches || !matches.length) return;
    return matches[0];
}
function matchRegexProtocol(url, regex) {
    const protocol = getUrlProtocol(url);
    if (typeof protocol === "undefined") return false;
    return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
    return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
    return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
    return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

function isJsonRpcPayload(payload) {
    return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
    return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
    return "result" in payload;
}
function isJsonRpcError(payload) {
    return "error" in payload;
}

let o$7 = class o extends r$4 {
    constructor(t) {
        super(t),
            (this.events = new eventsExports.EventEmitter()),
            (this.hasRegisteredEventListeners = !1),
            (this.connection = this.setConnection(t)),
            this.connection.connected && this.registerEventListeners();
    }
    async connect(t = this.connection) {
        await this.open(t);
    }
    async disconnect() {
        await this.close();
    }
    on(t, e) {
        this.events.on(t, e);
    }
    once(t, e) {
        this.events.once(t, e);
    }
    off(t, e) {
        this.events.off(t, e);
    }
    removeListener(t, e) {
        this.events.removeListener(t, e);
    }
    async request(t, e) {
        return this.requestStrict(formatJsonRpcRequest(t.method, t.params || [], t.id || getBigIntRpcId().toString()), e);
    }
    async requestStrict(t, e) {
        return new Promise(async (i, s) => {
            if (!this.connection.connected)
                try {
                    await this.open();
                } catch (n) {
                    s(n);
                }
            this.events.on(`${t.id}`, (n) => {
                isJsonRpcError(n) ? s(n.error) : i(n.result);
            });
            try {
                await this.connection.send(t, e);
            } catch (n) {
                s(n);
            }
        });
    }
    setConnection(t = this.connection) {
        return t;
    }
    onPayload(t) {
        this.events.emit("payload", t), isJsonRpcResponse(t) ? this.events.emit(`${t.id}`, t) : this.events.emit("message", { type: t.method, data: t.params });
    }
    onClose(t) {
        t &&
            t.code === 3e3 &&
            this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : ""}`)),
            this.events.emit("disconnect");
    }
    async open(t = this.connection) {
        (this.connection === t && this.connection.connected) ||
            (this.connection.connected && this.close(),
            typeof t == "string" && (await this.connection.open(t), (t = this.connection)),
            (this.connection = this.setConnection(t)),
            await this.connection.open(),
            this.registerEventListeners(),
            this.events.emit("connect"));
    }
    async close() {
        await this.connection.close();
    }
    registerEventListeners() {
        this.hasRegisteredEventListeners ||
            (this.connection.on("payload", (t) => this.onPayload(t)),
            this.connection.on("close", (t) => this.onClose(t)),
            this.connection.on("error", (t) => this.events.emit("error", t)),
            this.connection.on("register_error", (t) => this.onClose()),
            (this.hasRegisteredEventListeners = !0));
    }
};

const w$4 = () =>
        typeof WebSocket < "u"
            ? WebSocket
            : typeof global < "u" && typeof global.WebSocket < "u"
            ? global.WebSocket
            : typeof window < "u" && typeof window.WebSocket < "u"
            ? window.WebSocket
            : typeof self < "u" && typeof self.WebSocket < "u"
            ? self.WebSocket
            : require("ws"),
    b$2 = () =>
        typeof WebSocket < "u" ||
        (typeof global < "u" && typeof global.WebSocket < "u") ||
        (typeof window < "u" && typeof window.WebSocket < "u") ||
        (typeof self < "u" && typeof self.WebSocket < "u"),
    a$3 = (c) => c.split("?")[0],
    h$4 = 10,
    S$4 = w$4();
let f$3 = class f {
    constructor(e) {
        if (((this.url = e), (this.events = new eventsExports.EventEmitter()), (this.registering = !1), !isWsUrl(e)))
            throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);
        this.url = e;
    }
    get connected() {
        return typeof this.socket < "u";
    }
    get connecting() {
        return this.registering;
    }
    on(e, t) {
        this.events.on(e, t);
    }
    once(e, t) {
        this.events.once(e, t);
    }
    off(e, t) {
        this.events.off(e, t);
    }
    removeListener(e, t) {
        this.events.removeListener(e, t);
    }
    async open(e = this.url) {
        await this.register(e);
    }
    async close() {
        return new Promise((e, t) => {
            if (typeof this.socket > "u") {
                t(new Error("Connection already closed"));
                return;
            }
            (this.socket.onclose = (n) => {
                this.onClose(n), e();
            }),
                this.socket.close();
        });
    }
    async send(e) {
        typeof this.socket > "u" && (this.socket = await this.register());
        try {
            this.socket.send(safeJsonStringify(e));
        } catch (t) {
            this.onError(e.id, t);
        }
    }
    register(e = this.url) {
        if (!isWsUrl(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);
        if (this.registering) {
            const t = this.events.getMaxListeners();
            return (
                (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1),
                new Promise((n, o) => {
                    this.events.once("register_error", (s) => {
                        this.resetMaxListeners(), o(s);
                    }),
                        this.events.once("open", () => {
                            if ((this.resetMaxListeners(), typeof this.socket > "u")) return o(new Error("WebSocket connection is missing or invalid"));
                            n(this.socket);
                        });
                })
            );
        }
        return (
            (this.url = e),
            (this.registering = !0),
            new Promise((t, n) => {
                const o = new URLSearchParams(e).get("origin"),
                    s = cjs.isReactNative() ? { headers: { origin: o } } : { rejectUnauthorized: !isLocalhostUrl(e) },
                    i = new S$4(e, [], s);
                b$2()
                    ? (i.onerror = (r) => {
                          const l = r;
                          n(this.emitError(l.error));
                      })
                    : i.on("error", (r) => {
                          n(this.emitError(r));
                      }),
                    (i.onopen = () => {
                        this.onOpen(i), t(i);
                    });
            })
        );
    }
    onOpen(e) {
        (e.onmessage = (t) => this.onPayload(t)), (e.onclose = (t) => this.onClose(t)), (this.socket = e), (this.registering = !1), this.events.emit("open");
    }
    onClose(e) {
        (this.socket = void 0), (this.registering = !1), this.events.emit("close", e);
    }
    onPayload(e) {
        if (typeof e.data > "u") return;
        const t = typeof e.data == "string" ? safeJsonParse(e.data) : e.data;
        this.events.emit("payload", t);
    }
    onError(e, t) {
        const n = this.parseError(t),
            o = n.message || n.toString(),
            s = formatJsonRpcError(e, o);
        this.events.emit("payload", s);
    }
    parseError(e, t = this.url) {
        return parseConnectionError(e, a$3(t), "WS");
    }
    resetMaxListeners() {
        this.events.getMaxListeners() > h$4 && this.events.setMaxListeners(h$4);
    }
    emitError(e) {
        const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${a$3(this.url)}`));
        return this.events.emit("register_error", t), t;
    }
};

var lodash_isequal = { exports: {} };

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_isequal.exports;

(function (module, exports) {
    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = "__lodash_hash_undefined__";

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = "[object Arguments]",
        arrayTag = "[object Array]",
        asyncTag = "[object AsyncFunction]",
        boolTag = "[object Boolean]",
        dateTag = "[object Date]",
        errorTag = "[object Error]",
        funcTag = "[object Function]",
        genTag = "[object GeneratorFunction]",
        mapTag = "[object Map]",
        numberTag = "[object Number]",
        nullTag = "[object Null]",
        objectTag = "[object Object]",
        promiseTag = "[object Promise]",
        proxyTag = "[object Proxy]",
        regexpTag = "[object RegExp]",
        setTag = "[object Set]",
        stringTag = "[object String]",
        symbolTag = "[object Symbol]",
        undefinedTag = "[object Undefined]",
        weakMapTag = "[object WeakMap]";

    var arrayBufferTag = "[object ArrayBuffer]",
        dataViewTag = "[object DataView]",
        float32Tag = "[object Float32Array]",
        float64Tag = "[object Float64Array]",
        int8Tag = "[object Int8Array]",
        int16Tag = "[object Int16Array]",
        int32Tag = "[object Int32Array]",
        uint8Tag = "[object Uint8Array]",
        uint8ClampedTag = "[object Uint8ClampedArray]",
        uint16Tag = "[object Uint16Array]",
        uint32Tag = "[object Uint32Array]";

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
            true;
    typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
            false;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function("return this")();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function () {
        try {
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {}
    })();

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
                result[resIndex++] = value;
            }
        }
        return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
            array[offset + index] = values[index];
        }
        return array;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
            if (predicate(array[index], index, array)) {
                return true;
            }
        }
        return false;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
        return function (value) {
            return func(value);
        };
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
        return cache.has(key);
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
        return object == null ? undefined : object[key];
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function (value, key) {
            result[++index] = [key, value];
        });
        return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg));
        };
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function (value) {
            result[++index] = value;
        });
        return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root["__core-js_shared__"];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function () {
        var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || "");
        return uid ? "Symbol(src)_1." + uid : "";
    })();

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp(
        "^" +
            funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, "\\$&")
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
            "$"
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeKeys = overArg(Object.keys, Object);

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, "DataView"),
        Map = getNative(root, "Map"),
        Promise = getNative(root, "Promise"),
        Set = getNative(root, "Set"),
        WeakMap = getNative(root, "WeakMap"),
        nativeCreate = getNative(Object, "create");

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
            return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
            data.pop();
        } else {
            splice.call(data, index, 1);
        }
        --this.size;
        return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
            ++this.size;
            data.push([key, value]);
        } else {
            data[index][1] = value;
        }
        return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
            hash: new Hash(),
            map: new (Map || ListCache)(),
            string: new Hash(),
        };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
        return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
        return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache();
        while (++index < length) {
            this.add(values[index]);
        }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
        return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
        var data = (this.__data__ = new ListCache(entries));
        this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
        var data = this.__data__,
            result = data["delete"](key);

        this.size = data.size;
        return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
        return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
        return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
            }
            data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
            if (
                hasOwnProperty.call(value, key) &&
                !(
                    skipIndexes &&
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == "length" ||
                        // Node.js 0.10 has enumerable non-index properties on buffers.
                        (isBuff && (key == "offset" || key == "parent")) ||
                        // PhantomJS 2 has enumerable non-index properties on typed arrays.
                        (isType && (key == "buffer" || key == "byteLength" || key == "byteOffset")) ||
                        // Skip index properties.
                        isIndex(key, length))
                )
            ) {
                result.push(key);
            }
        }
        return result;
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
            if (eq(array[length][0], key)) {
                return length;
            }
        }
        return -1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
            return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
                return false;
            }
            objIsArr = true;
            objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object)
                ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");

            if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
        }
        if (!isSameTag) {
            return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
            return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
        if (!isPrototype(object)) {
            return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
                result.push(key);
            }
        }
        return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
            return stacked == other;
        }
        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];

            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
                if (compared) {
                    continue;
                }
                result = false;
                break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
                if (
                    !arraySome(other, function (othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            return seen.push(othIndex);
                        }
                    })
                ) {
                    result = false;
                    break;
                }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result = false;
                break;
            }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
            case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;

            case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                }
                return true;

            case boolTag:
            case dateTag:
            case numberTag:
                // Coerce booleans to `1` or `0` and dates to milliseconds.
                // Invalid dates are coerced to `NaN`.
                return eq(+object, +other);

            case errorTag:
                return object.name == other.name && object.message == other.message;

            case regexpTag:
            case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == other + "";

            case mapTag:
                var convert = mapToArray;

            case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);

                if (object.size != other.size && !isPartial) {
                    return false;
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;

                // Recursively compare objects (susceptible to call stack limits).
                stack.set(object, other);
                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result;

            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
        }
        return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
            return false;
        }
        var index = objLength;
        while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
            }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
            return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];

            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result = false;
                break;
            }
            skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (
                objCtor != othCtor &&
                "constructor" in object &&
                "constructor" in other &&
                !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)
            ) {
                result = false;
            }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
            value[symToStringTag] = undefined;
            var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
            if (isOwn) {
                value[symToStringTag] = tag;
            } else {
                delete value[symToStringTag];
            }
        }
        return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols
        ? stubArray
        : function (object) {
              if (object == null) {
                  return [];
              }
              object = Object(object);
              return arrayFilter(nativeGetSymbols(object), function (symbol) {
                  return propertyIsEnumerable.call(object, symbol);
              });
          };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if (
        (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map()) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set()) != setTag) ||
        (WeakMap && getTag(new WeakMap()) != weakMapTag)
    ) {
        getTag = function (value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : "";

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;
                    case mapCtorString:
                        return mapTag;
                    case promiseCtorString:
                        return promiseTag;
                    case setCtorString:
                        return setTag;
                    case weakMapCtorString:
                        return weakMapTag;
                }
            }
            return result;
        };
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == "function" && Ctor.prototype) || objectProto;

        return value === proto;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
        return nativeObjectToString.call(value);
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
        if (func != null) {
            try {
                return funcToString.call(func);
            } catch (e) {}
            try {
                return func + "";
            } catch (e) {}
        }
        return "";
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
        return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(
        (function () {
            return arguments;
        })()
    )
        ? baseIsArguments
        : function (value) {
              return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
        return baseIsEqual(value, other);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
        return value != null && typeof value == "object";
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
        return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
        return false;
    }

    module.exports = isEqual;
})(lodash_isequal, lodash_isequal.exports);

var lodash_isequalExports = lodash_isequal.exports;
var ys$1 = /*@__PURE__*/ getDefaultExportFromCjs(lodash_isequalExports);

function Ds(o, e) {
    if (o.length >= 255) throw new TypeError("Alphabet too long");
    for (var t = new Uint8Array(256), s = 0; s < t.length; s++) t[s] = 255;
    for (var i = 0; i < o.length; i++) {
        var r = o.charAt(i),
            n = r.charCodeAt(0);
        if (t[n] !== 255) throw new TypeError(r + " is ambiguous");
        t[n] = i;
    }
    var a = o.length,
        c = o.charAt(0),
        h = Math.log(a) / Math.log(256),
        d = Math.log(256) / Math.log(a);
    function g(l) {
        if (
            (l instanceof Uint8Array ||
                (ArrayBuffer.isView(l) ? (l = new Uint8Array(l.buffer, l.byteOffset, l.byteLength)) : Array.isArray(l) && (l = Uint8Array.from(l))),
            !(l instanceof Uint8Array))
        )
            throw new TypeError("Expected Uint8Array");
        if (l.length === 0) return "";
        for (var p = 0, _ = 0, D = 0, E = l.length; D !== E && l[D] === 0; ) D++, p++;
        for (var N = ((E - D) * d + 1) >>> 0, C = new Uint8Array(N); D !== E; ) {
            for (var L = l[D], k = 0, x = N - 1; (L !== 0 || k < _) && x !== -1; x--, k++) (L += (256 * C[x]) >>> 0), (C[x] = L % a >>> 0), (L = (L / a) >>> 0);
            if (L !== 0) throw new Error("Non-zero carry");
            (_ = k), D++;
        }
        for (var M = N - _; M !== N && C[M] === 0; ) M++;
        for (var ie = c.repeat(p); M < N; ++M) ie += o.charAt(C[M]);
        return ie;
    }
    function m(l) {
        if (typeof l != "string") throw new TypeError("Expected String");
        if (l.length === 0) return new Uint8Array();
        var p = 0;
        if (l[p] !== " ") {
            for (var _ = 0, D = 0; l[p] === c; ) _++, p++;
            for (var E = ((l.length - p) * h + 1) >>> 0, N = new Uint8Array(E); l[p]; ) {
                var C = t[l.charCodeAt(p)];
                if (C === 255) return;
                for (var L = 0, k = E - 1; (C !== 0 || L < D) && k !== -1; k--, L++) (C += (a * N[k]) >>> 0), (N[k] = C % 256 >>> 0), (C = (C / 256) >>> 0);
                if (C !== 0) throw new Error("Non-zero carry");
                (D = L), p++;
            }
            if (l[p] !== " ") {
                for (var x = E - D; x !== E && N[x] === 0; ) x++;
                for (var M = new Uint8Array(_ + (E - x)), ie = _; x !== E; ) M[ie++] = N[x++];
                return M;
            }
        }
    }
    function b(l) {
        var p = m(l);
        if (p) return p;
        throw new Error(`Non-${e} character`);
    }
    return { encode: g, decodeUnsafe: m, decode: b };
}
var ms$1 = Ds,
    bs = ms$1;
const Ye$1 = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
        if (o instanceof ArrayBuffer) return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        throw new Error("Unknown type, must be binary type");
    },
    fs$1 = (o) => new TextEncoder().encode(o),
    _s$1 = (o) => new TextDecoder().decode(o);
let Es$1 = class Es {
    constructor(e, t, s) {
        (this.name = e), (this.prefix = t), (this.baseEncode = s);
    }
    encode(e) {
        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
        throw Error("Unknown type, must be binary type");
    }
};
let vs$1 = class vs {
    constructor(e, t, s) {
        if (((this.name = e), (this.prefix = t), t.codePointAt(0) === void 0)) throw new Error("Invalid prefix character");
        (this.prefixCodePoint = t.codePointAt(0)), (this.baseDecode = s);
    }
    decode(e) {
        if (typeof e == "string") {
            if (e.codePointAt(0) !== this.prefixCodePoint)
                throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            return this.baseDecode(e.slice(this.prefix.length));
        } else throw Error("Can only multibase decode strings");
    }
    or(e) {
        return Je(this, e);
    }
};
let ws$1 = class ws {
    constructor(e) {
        this.decoders = e;
    }
    or(e) {
        return Je(this, e);
    }
    decode(e) {
        const t = e[0],
            s = this.decoders[t];
        if (s) return s.decode(e);
        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
};
const Je = (o, e) => new ws$1({ ...(o.decoders || { [o.prefix]: o }), ...(e.decoders || { [e.prefix]: e }) });
let Is$1 = class Is {
    constructor(e, t, s, i) {
        (this.name = e),
            (this.prefix = t),
            (this.baseEncode = s),
            (this.baseDecode = i),
            (this.encoder = new Es$1(e, t, s)),
            (this.decoder = new vs$1(e, t, i));
    }
    encode(e) {
        return this.encoder.encode(e);
    }
    decode(e) {
        return this.decoder.decode(e);
    }
};
const ne$2 = ({ name: o, prefix: e, encode: t, decode: s }) => new Is$1(o, e, t, s),
    X$1 = ({ prefix: o, name: e, alphabet: t }) => {
        const { encode: s, decode: i } = bs(t, e);
        return ne$2({ prefix: o, name: e, encode: s, decode: (r) => Ye$1(i(r)) });
    },
    Ts = (o, e, t, s) => {
        const i = {};
        for (let d = 0; d < e.length; ++d) i[e[d]] = d;
        let r = o.length;
        for (; o[r - 1] === "="; ) --r;
        const n = new Uint8Array(((r * t) / 8) | 0);
        let a = 0,
            c = 0,
            h = 0;
        for (let d = 0; d < r; ++d) {
            const g = i[o[d]];
            if (g === void 0) throw new SyntaxError(`Non-${s} character`);
            (c = (c << t) | g), (a += t), a >= 8 && ((a -= 8), (n[h++] = 255 & (c >> a)));
        }
        if (a >= t || 255 & (c << (8 - a))) throw new SyntaxError("Unexpected end of data");
        return n;
    },
    Cs = (o, e, t) => {
        const s = e[e.length - 1] === "=",
            i = (1 << t) - 1;
        let r = "",
            n = 0,
            a = 0;
        for (let c = 0; c < o.length; ++c) for (a = (a << 8) | o[c], n += 8; n > t; ) (n -= t), (r += e[i & (a >> n)]);
        if ((n && (r += e[i & (a << (t - n))]), s)) for (; (r.length * t) & 7; ) r += "=";
        return r;
    },
    f$2 = ({ name: o, prefix: e, bitsPerChar: t, alphabet: s }) =>
        ne$2({
            prefix: e,
            name: o,
            encode(i) {
                return Cs(i, s, t);
            },
            decode(i) {
                return Ts(i, s, t, o);
            },
        }),
    Ss$1 = ne$2({ prefix: "\0", name: "identity", encode: (o) => _s$1(o), decode: (o) => fs$1(o) });
var Ps = Object.freeze({ __proto__: null, identity: Ss$1 });
const Rs$1 = f$2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var xs = Object.freeze({ __proto__: null, base2: Rs$1 });
const Os = f$2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var As = Object.freeze({ __proto__: null, base8: Os });
const Ns = X$1({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Ls = Object.freeze({ __proto__: null, base10: Ns });
const zs = f$2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 }),
    Ms = f$2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var $s = Object.freeze({ __proto__: null, base16: zs, base16upper: Ms });
const ks = f$2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 }),
    Fs = f$2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 }),
    Us = f$2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 }),
    Ks = f$2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 }),
    Bs = f$2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 }),
    Vs = f$2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 }),
    js = f$2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 }),
    qs$1 = f$2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 }),
    Gs = f$2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Hs = Object.freeze({
    __proto__: null,
    base32: ks,
    base32upper: Fs,
    base32pad: Us,
    base32padupper: Ks,
    base32hex: Bs,
    base32hexupper: Vs,
    base32hexpad: js,
    base32hexpadupper: qs$1,
    base32z: Gs,
});
const Ys = X$1({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" }),
    Js = X$1({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Ws = Object.freeze({ __proto__: null, base36: Ys, base36upper: Js });
const Xs = X$1({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" }),
    Zs = X$1({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Qs = Object.freeze({ __proto__: null, base58btc: Xs, base58flickr: Zs });
const er$1 = f$2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 }),
    tr = f$2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 }),
    ir$1 = f$2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 }),
    sr$1 = f$2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var rr$1 = Object.freeze({ __proto__: null, base64: er$1, base64pad: tr, base64url: ir$1, base64urlpad: sr$1 });
const We$1 = Array.from(
        "\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"
    ),
    nr$1 = We$1.reduce((o, e, t) => ((o[t] = e), o), []),
    or = We$1.reduce((o, e, t) => ((o[e.codePointAt(0)] = t), o), []);
function ar(o) {
    return o.reduce((e, t) => ((e += nr$1[t]), e), "");
}
function cr$1(o) {
    const e = [];
    for (const t of o) {
        const s = or[t.codePointAt(0)];
        if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);
        e.push(s);
    }
    return new Uint8Array(e);
}
const hr$1 = ne$2({ prefix: "\u{1F680}", name: "base256emoji", encode: ar, decode: cr$1 });
var lr$1 = Object.freeze({ __proto__: null, base256emoji: hr$1 }),
    ur = Ze,
    Xe = 128,
    dr$2 = 127,
    gr = ~dr$2,
    pr$1 = Math.pow(2, 31);
function Ze(o, e, t) {
    (e = e || []), (t = t || 0);
    for (var s = t; o >= pr$1; ) (e[t++] = (o & 255) | Xe), (o /= 128);
    for (; o & gr; ) (e[t++] = (o & 255) | Xe), (o >>>= 7);
    return (e[t] = o | 0), (Ze.bytes = t - s + 1), e;
}
var yr = be$2,
    Dr = 128,
    Qe$1 = 127;
function be$2(o, s) {
    var t = 0,
        s = s || 0,
        i = 0,
        r = s,
        n,
        a = o.length;
    do {
        if (r >= a) throw ((be$2.bytes = 0), new RangeError("Could not decode varint"));
        (n = o[r++]), (t += i < 28 ? (n & Qe$1) << i : (n & Qe$1) * Math.pow(2, i)), (i += 7);
    } while (n >= Dr);
    return (be$2.bytes = r - s), t;
}
var mr$1 = Math.pow(2, 7),
    br = Math.pow(2, 14),
    fr = Math.pow(2, 21),
    _r = Math.pow(2, 28),
    Er = Math.pow(2, 35),
    vr = Math.pow(2, 42),
    wr = Math.pow(2, 49),
    Ir = Math.pow(2, 56),
    Tr = Math.pow(2, 63),
    Cr = function (o) {
        return o < mr$1 ? 1 : o < br ? 2 : o < fr ? 3 : o < _r ? 4 : o < Er ? 5 : o < vr ? 6 : o < wr ? 7 : o < Ir ? 8 : o < Tr ? 9 : 10;
    },
    Sr = { encode: ur, decode: yr, encodingLength: Cr },
    et$1 = Sr;
const tt$1 = (o, e, t = 0) => (et$1.encode(o, e, t), e),
    it$2 = (o) => et$1.encodingLength(o),
    fe$1 = (o, e) => {
        const t = e.byteLength,
            s = it$2(o),
            i = s + it$2(t),
            r = new Uint8Array(i + t);
        return tt$1(o, r, 0), tt$1(t, r, s), r.set(e, i), new Pr(o, t, e, r);
    };
class Pr {
    constructor(e, t, s, i) {
        (this.code = e), (this.size = t), (this.digest = s), (this.bytes = i);
    }
}
const st$2 = ({ name: o, code: e, encode: t }) => new Rr(o, e, t);
class Rr {
    constructor(e, t, s) {
        (this.name = e), (this.code = t), (this.encode = s);
    }
    digest(e) {
        if (e instanceof Uint8Array) {
            const t = this.encode(e);
            return t instanceof Uint8Array ? fe$1(this.code, t) : t.then((s) => fe$1(this.code, s));
        } else throw Error("Unknown type, must be binary type");
    }
}
const rt$2 = (o) => async (e) => new Uint8Array(await crypto.subtle.digest(o, e)),
    xr = st$2({ name: "sha2-256", code: 18, encode: rt$2("SHA-256") }),
    Or = st$2({ name: "sha2-512", code: 19, encode: rt$2("SHA-512") });
var Ar = Object.freeze({ __proto__: null, sha256: xr, sha512: Or });
const nt$2 = 0,
    Nr = "identity",
    ot$2 = Ye$1,
    Lr = (o) => fe$1(nt$2, ot$2(o)),
    zr = { code: nt$2, name: Nr, encode: ot$2, digest: Lr };
var Mr = Object.freeze({ __proto__: null, identity: zr });
new TextEncoder(), new TextDecoder();
const at$2 = { ...Ps, ...xs, ...As, ...Ls, ...$s, ...Hs, ...Ws, ...Qs, ...rr$1, ...lr$1 };
({ ...Ar, ...Mr });
function $r(o = 0) {
    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(o) : new Uint8Array(o);
}
function ct$2(o, e, t, s) {
    return { name: o, prefix: e, encoder: { name: o, prefix: e, encode: t }, decoder: { decode: s } };
}
const ht$1 = ct$2(
        "utf8",
        "u",
        (o) => "u" + new TextDecoder("utf8").decode(o),
        (o) => new TextEncoder().encode(o.substring(1))
    ),
    _e$3 = ct$2(
        "ascii",
        "a",
        (o) => {
            let e = "a";
            for (let t = 0; t < o.length; t++) e += String.fromCharCode(o[t]);
            return e;
        },
        (o) => {
            o = o.substring(1);
            const e = $r(o.length);
            for (let t = 0; t < o.length; t++) e[t] = o.charCodeAt(t);
            return e;
        }
    ),
    kr = { utf8: ht$1, "utf-8": ht$1, hex: at$2.base16, latin1: _e$3, ascii: _e$3, binary: _e$3, ...at$2 };
function Fr(o, e = "utf8") {
    const t = kr[e];
    if (!t) throw new Error(`Unsupported encoding "${e}"`);
    return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null
        ? globalThis.Buffer.from(o, "utf8")
        : t.decoder.decode(`${t.prefix}${o}`);
}
const Ee$1 = "wc",
    ve$1 = 2,
    oe$3 = "core",
    O$3 = `${Ee$1}@2:${oe$3}:`,
    lt$2 = { name: oe$3, logger: "error" },
    ut$2 = { database: ":memory:" },
    dt$2 = "crypto",
    we$2 = "client_ed25519_seed",
    gt$1 = cjs$3.ONE_DAY,
    pt$2 = "keychain",
    yt$2 = "0.3",
    Dt$1 = "messages",
    mt = "0.3",
    bt$1 = cjs$3.SIX_HOURS,
    ft = "publisher",
    _t$1 = "irn",
    Et$1 = "error",
    Ie$1 = "wss://relay.walletconnect.org",
    vt = "relayer",
    w$3 = {
        message: "relayer_message",
        message_ack: "relayer_message_ack",
        connect: "relayer_connect",
        disconnect: "relayer_disconnect",
        error: "relayer_error",
        connection_stalled: "relayer_connection_stalled",
        transport_closed: "relayer_transport_closed",
        publish: "relayer_publish",
    },
    wt$1 = "_subscription",
    T$5 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" },
    It$1 = 0.1,
    Te$1 = "2.16.1",
    F$3 = { link_mode: "link_mode", relay: "relay" },
    Tt$2 = "0.3",
    Ct = "WALLETCONNECT_CLIENT_ID",
    Ce$2 = "WALLETCONNECT_LINK_MODE_APPS",
    A$2 = {
        created: "subscription_created",
        deleted: "subscription_deleted",
        expired: "subscription_expired",
        disabled: "subscription_disabled",
        sync: "subscription_sync",
        resubscribed: "subscription_resubscribed",
    },
    St$1 = "subscription",
    Pt$1 = "0.3",
    Rt$1 = cjs$3.FIVE_SECONDS * 1e3,
    xt = "pairing",
    Ot$1 = "0.3",
    j$4 = {
        wc_pairingDelete: { req: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1e3 }, res: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1001 } },
        wc_pairingPing: { req: { ttl: cjs$3.THIRTY_SECONDS, prompt: !1, tag: 1002 }, res: { ttl: cjs$3.THIRTY_SECONDS, prompt: !1, tag: 1003 } },
        unregistered_method: { req: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 0 }, res: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 0 } },
    },
    Z$3 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" },
    P$2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" },
    At$1 = "history",
    Nt$1 = "0.3",
    Lt$2 = "expirer",
    R$3 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" },
    zt$1 = "0.3",
    Mt$1 = "verify-api",
    qr = "https://verify.walletconnect.com",
    $t$1 = "https://verify.walletconnect.org",
    Q$3 = $t$1,
    kt = `${Q$3}/v3`,
    Ft = [qr, $t$1],
    Ut$1 = "echo",
    Kt$1 = "https://echo.walletconnect.com",
    z$3 = {
        pairing_started: "pairing_started",
        pairing_uri_validation_success: "pairing_uri_validation_success",
        pairing_uri_not_expired: "pairing_uri_not_expired",
        store_new_pairing: "store_new_pairing",
        subscribing_pairing_topic: "subscribing_pairing_topic",
        subscribe_pairing_topic_success: "subscribe_pairing_topic_success",
        existing_pairing: "existing_pairing",
        pairing_not_expired: "pairing_not_expired",
        emit_inactive_pairing: "emit_inactive_pairing",
        emit_session_proposal: "emit_session_proposal",
        subscribing_to_pairing_topic: "subscribing_to_pairing_topic",
    },
    $$3 = {
        no_wss_connection: "no_wss_connection",
        no_internet_connection: "no_internet_connection",
        malformed_pairing_uri: "malformed_pairing_uri",
        active_pairing_already_exists: "active_pairing_already_exists",
        subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure",
        pairing_expired: "pairing_expired",
        proposal_expired: "proposal_expired",
        proposal_listener_not_found: "proposal_listener_not_found",
    },
    Hr = {
        session_approve_started: "session_approve_started",
        proposal_not_expired: "proposal_not_expired",
        session_namespaces_validation_success: "session_namespaces_validation_success",
        create_session_topic: "create_session_topic",
        subscribing_session_topic: "subscribing_session_topic",
        subscribe_session_topic_success: "subscribe_session_topic_success",
        publishing_session_approve: "publishing_session_approve",
        session_approve_publish_success: "session_approve_publish_success",
        store_session: "store_session",
        publishing_session_settle: "publishing_session_settle",
        session_settle_publish_success: "session_settle_publish_success",
    },
    Yr = {
        no_internet_connection: "no_internet_connection",
        no_wss_connection: "no_wss_connection",
        proposal_expired: "proposal_expired",
        subscribe_session_topic_failure: "subscribe_session_topic_failure",
        session_approve_publish_failure: "session_approve_publish_failure",
        session_settle_publish_failure: "session_settle_publish_failure",
        session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure",
        proposal_not_found: "proposal_not_found",
    },
    Jr = {
        authenticated_session_approve_started: "authenticated_session_approve_started",
        authenticated_session_not_expired: "authenticated_session_not_expired",
        chains_caip2_compliant: "chains_caip2_compliant",
        chains_evm_compliant: "chains_evm_compliant",
        create_authenticated_session_topic: "create_authenticated_session_topic",
        cacaos_verified: "cacaos_verified",
        store_authenticated_session: "store_authenticated_session",
        subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic",
        subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success",
        publishing_authenticated_session_approve: "publishing_authenticated_session_approve",
        authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success",
    },
    Wr = {
        no_internet_connection: "no_internet_connection",
        no_wss_connection: "no_wss_connection",
        missing_session_authenticate_request: "missing_session_authenticate_request",
        session_authenticate_request_expired: "session_authenticate_request_expired",
        chains_caip2_compliant_failure: "chains_caip2_compliant_failure",
        chains_evm_compliant_failure: "chains_evm_compliant_failure",
        invalid_cacao: "invalid_cacao",
        subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure",
        authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure",
        authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found",
    },
    Bt$1 = 0.1,
    Vt = "event-client",
    jt$1 = 86400,
    qt$1 = "https://pulse.walletconnect.com/batch";
let Gt$1 = class Gt {
    constructor(e, t) {
        (this.core = e),
            (this.logger = t),
            (this.keychain = new Map()),
            (this.name = pt$2),
            (this.version = yt$2),
            (this.initialized = !1),
            (this.storagePrefix = O$3),
            (this.init = async () => {
                if (!this.initialized) {
                    const s = await this.getKeyChain();
                    typeof s < "u" && (this.keychain = s), (this.initialized = !0);
                }
            }),
            (this.has = (s) => (this.isInitialized(), this.keychain.has(s))),
            (this.set = async (s, i) => {
                this.isInitialized(), this.keychain.set(s, i), await this.persist();
            }),
            (this.get = (s) => {
                this.isInitialized();
                const i = this.keychain.get(s);
                if (typeof i > "u") {
                    const { message: r } = xe$1("NO_MATCHING_KEY", `${this.name}: ${s}`);
                    throw new Error(r);
                }
                return i;
            }),
            (this.del = async (s) => {
                this.isInitialized(), this.keychain.delete(s), await this.persist();
            }),
            (this.core = e),
            (this.logger = E$4(t, this.name));
    }
    get context() {
        return y$6(this.logger);
    }
    get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
    }
    async setKeyChain(e) {
        await this.core.storage.setItem(this.storageKey, ss(e));
    }
    async getKeyChain() {
        const e = await this.core.storage.getItem(this.storageKey);
        return typeof e < "u" ? as(e) : void 0;
    }
    async persist() {
        await this.setKeyChain(this.keychain);
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
};
let Ht$1 = class Ht {
    constructor(e, t, s) {
        (this.core = e),
            (this.logger = t),
            (this.name = dt$2),
            (this.randomSessionIdentifier = Eu()),
            (this.initialized = !1),
            (this.init = async () => {
                this.initialized || (await this.keychain.init(), (this.initialized = !0));
            }),
            (this.hasKeys = (i) => (this.isInitialized(), this.keychain.has(i))),
            (this.getClientId = async () => {
                this.isInitialized();
                const i = await this.getClientSeed(),
                    r = generateKeyPair(i);
                return encodeIss(r.publicKey);
            }),
            (this.generateKeyPair = () => {
                this.isInitialized();
                const i = Mu();
                return this.setPrivateKey(i.publicKey, i.privateKey);
            }),
            (this.signJWT = async (i) => {
                this.isInitialized();
                const r = await this.getClientSeed(),
                    n = generateKeyPair(r),
                    a = this.randomSessionIdentifier,
                    c = gt$1;
                return await signJWT(a, i, c, n);
            }),
            (this.generateSharedKey = (i, r, n) => {
                this.isInitialized();
                const a = this.getPrivateKey(i),
                    c = Su(a, r);
                return this.setSymKey(c, n);
            }),
            (this.setSymKey = async (i, r) => {
                this.isInitialized();
                const n = r || Nu(i);
                return await this.keychain.set(n, i), n;
            }),
            (this.deleteKeyPair = async (i) => {
                this.isInitialized(), await this.keychain.del(i);
            }),
            (this.deleteSymKey = async (i) => {
                this.isInitialized(), await this.keychain.del(i);
            }),
            (this.encode = async (i, r, n) => {
                this.isInitialized();
                const a = io(n),
                    c = safeJsonStringify(r);
                if (Du(a)) return Bu(c, n?.encoding);
                if (Pu(a)) {
                    const m = a.senderPublicKey,
                        b = a.receiverPublicKey;
                    i = await this.generateSharedKey(m, b);
                }
                const h = this.getSymKey(i),
                    { type: d, senderPublicKey: g } = a;
                return _u({ type: d, symKey: h, message: c, senderPublicKey: g, encoding: n?.encoding });
            }),
            (this.decode = async (i, r, n) => {
                this.isInitialized();
                const a = Ou(r, n);
                if (Du(a)) {
                    const c = Ru(r, n?.encoding);
                    return safeJsonParse(c);
                }
                if (Pu(a)) {
                    const c = a.receiverPublicKey,
                        h = a.senderPublicKey;
                    i = await this.generateSharedKey(c, h);
                }
                try {
                    const c = this.getSymKey(i),
                        h = Cu({ symKey: c, encoded: r, encoding: n?.encoding });
                    return safeJsonParse(h);
                } catch (c) {
                    this.logger.error(`Failed to decode message from topic: '${i}', clientId: '${await this.getClientId()}'`), this.logger.error(c);
                }
            }),
            (this.getPayloadType = (i, r = $i) => {
                const n = Wr$1({ encoded: i, encoding: r });
                return $e$1(n.type);
            }),
            (this.getPayloadSenderPublicKey = (i, r = $i) => {
                const n = Wr$1({ encoded: i, encoding: r });
                return n.senderPublicKey ? toString(n.senderPublicKey, Lt$3) : void 0;
            }),
            (this.core = e),
            (this.logger = E$4(t, this.name)),
            (this.keychain = s || new Gt$1(this.core, this.logger));
    }
    get context() {
        return y$6(this.logger);
    }
    async setPrivateKey(e, t) {
        return await this.keychain.set(e, t), e;
    }
    getPrivateKey(e) {
        return this.keychain.get(e);
    }
    async getClientSeed() {
        let e = "";
        try {
            e = this.keychain.get(we$2);
        } catch {
            (e = Eu()), await this.keychain.set(we$2, e);
        }
        return Fr(e, "base16");
    }
    getSymKey(e) {
        return this.keychain.get(e);
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
};
let Yt$1 = class Yt extends a$4 {
    constructor(e, t) {
        super(e, t),
            (this.logger = e),
            (this.core = t),
            (this.messages = new Map()),
            (this.name = Dt$1),
            (this.version = mt),
            (this.initialized = !1),
            (this.storagePrefix = O$3),
            (this.init = async () => {
                if (!this.initialized) {
                    this.logger.trace("Initialized");
                    try {
                        const s = await this.getRelayerMessages();
                        typeof s < "u" && (this.messages = s),
                            this.logger.debug(`Successfully Restored records for ${this.name}`),
                            this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
                    } catch (s) {
                        this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);
                    } finally {
                        this.initialized = !0;
                    }
                }
            }),
            (this.set = async (s, i) => {
                this.isInitialized();
                const r = Iu(i);
                let n = this.messages.get(s);
                return typeof n > "u" && (n = {}), typeof n[r] < "u" || ((n[r] = i), this.messages.set(s, n), await this.persist()), r;
            }),
            (this.get = (s) => {
                this.isInitialized();
                let i = this.messages.get(s);
                return typeof i > "u" && (i = {}), i;
            }),
            (this.has = (s, i) => {
                this.isInitialized();
                const r = this.get(s),
                    n = Iu(i);
                return typeof r[n] < "u";
            }),
            (this.del = async (s) => {
                this.isInitialized(), this.messages.delete(s), await this.persist();
            }),
            (this.logger = E$4(e, this.name)),
            (this.core = t);
    }
    get context() {
        return y$6(this.logger);
    }
    get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
    }
    async setRelayerMessages(e) {
        await this.core.storage.setItem(this.storageKey, ss(e));
    }
    async getRelayerMessages() {
        const e = await this.core.storage.getItem(this.storageKey);
        return typeof e < "u" ? as(e) : void 0;
    }
    async persist() {
        await this.setRelayerMessages(this.messages);
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
};
class Xr extends g$4 {
    constructor(e, t) {
        super(e, t),
            (this.relayer = e),
            (this.logger = t),
            (this.events = new eventsExports.EventEmitter()),
            (this.name = ft),
            (this.queue = new Map()),
            (this.publishTimeout = cjs$3.toMiliseconds(cjs$3.ONE_MINUTE)),
            (this.failedPublishTimeout = cjs$3.toMiliseconds(cjs$3.ONE_SECOND)),
            (this.needsTransportRestart = !1),
            (this.publish = async (s, i, r) => {
                var n;
                this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s, message: i, opts: r } });
                const a = r?.ttl || bt$1,
                    c = ku(r),
                    h = r?.prompt || !1,
                    d = r?.tag || 0,
                    g = r?.id || getBigIntRpcId().toString(),
                    m = { topic: s, message: i, opts: { ttl: a, relay: c, prompt: h, tag: d, id: g, attestation: r?.attestation } },
                    b = `Failed to publish payload, please try again. id:${g} tag:${d}`,
                    l = Date.now();
                let p,
                    _ = 1;
                try {
                    for (; p === void 0; ) {
                        if (Date.now() - l > this.publishTimeout) throw new Error(b);
                        this.logger.trace({ id: g, attempts: _ }, `publisher.publish - attempt ${_}`),
                            (p = await await ds(
                                this.rpcPublish(s, i, a, c, h, d, g, r?.attestation).catch((D) => this.logger.warn(D)),
                                this.publishTimeout,
                                b
                            )),
                            _++,
                            p || (await new Promise((D) => setTimeout(D, this.failedPublishTimeout)));
                    }
                    this.relayer.events.emit(w$3.publish, m),
                        this.logger.debug("Successfully Published Payload"),
                        this.logger.trace({ type: "method", method: "publish", params: { id: g, topic: s, message: i, opts: r } });
                } catch (D) {
                    if ((this.logger.debug("Failed to Publish Payload"), this.logger.error(D), (n = r?.internal) != null && n.throwOnFailedPublish)) throw D;
                    this.queue.set(g, m);
                }
            }),
            (this.on = (s, i) => {
                this.events.on(s, i);
            }),
            (this.once = (s, i) => {
                this.events.once(s, i);
            }),
            (this.off = (s, i) => {
                this.events.off(s, i);
            }),
            (this.removeListener = (s, i) => {
                this.events.removeListener(s, i);
            }),
            (this.relayer = e),
            (this.logger = E$4(t, this.name)),
            this.registerEventListeners();
    }
    get context() {
        return y$6(this.logger);
    }
    rpcPublish(e, t, s, i, r, n, a, c) {
        var h, d, g, m;
        const b = { method: qu(i.protocol).publish, params: { topic: e, message: t, ttl: s, prompt: r, tag: n, attestation: c }, id: a };
        return (
            Pe$1((h = b.params) == null ? void 0 : h.prompt) && ((d = b.params) == null || delete d.prompt),
            Pe$1((g = b.params) == null ? void 0 : g.tag) && ((m = b.params) == null || delete m.tag),
            this.logger.debug("Outgoing Relay Payload"),
            this.logger.trace({ type: "message", direction: "outgoing", request: b }),
            this.relayer.request(b)
        );
    }
    removeRequestFromQueue(e) {
        this.queue.delete(e);
    }
    checkQueue() {
        this.queue.forEach(async (e) => {
            const { topic: t, message: s, opts: i } = e;
            await this.publish(t, s, i);
        });
    }
    registerEventListeners() {
        this.relayer.core.heartbeat.on(r$5.pulse, () => {
            if (this.needsTransportRestart) {
                (this.needsTransportRestart = !1), this.relayer.events.emit(w$3.connection_stalled);
                return;
            }
            this.checkQueue();
        }),
            this.relayer.on(w$3.message_ack, (e) => {
                this.removeRequestFromQueue(e.id.toString());
            });
    }
}
class Zr {
    constructor() {
        (this.map = new Map()),
            (this.set = (e, t) => {
                const s = this.get(e);
                this.exists(e, t) || this.map.set(e, [...s, t]);
            }),
            (this.get = (e) => this.map.get(e) || []),
            (this.exists = (e, t) => this.get(e).includes(t)),
            (this.delete = (e, t) => {
                if (typeof t > "u") {
                    this.map.delete(e);
                    return;
                }
                if (!this.map.has(e)) return;
                const s = this.get(e);
                if (!this.exists(e, t)) return;
                const i = s.filter((r) => r !== t);
                if (!i.length) {
                    this.map.delete(e);
                    return;
                }
                this.map.set(e, i);
            }),
            (this.clear = () => {
                this.map.clear();
            });
    }
    get topics() {
        return Array.from(this.map.keys());
    }
}
var Qr = Object.defineProperty,
    en = Object.defineProperties,
    tn = Object.getOwnPropertyDescriptors,
    Jt$1 = Object.getOwnPropertySymbols,
    sn = Object.prototype.hasOwnProperty,
    rn = Object.prototype.propertyIsEnumerable,
    Wt$1 = (o, e, t) => (e in o ? Qr(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (o[e] = t)),
    ee$1 = (o, e) => {
        for (var t in e || (e = {})) sn.call(e, t) && Wt$1(o, t, e[t]);
        if (Jt$1) for (var t of Jt$1(e)) rn.call(e, t) && Wt$1(o, t, e[t]);
        return o;
    },
    Se = (o, e) => en(o, tn(e));
let Xt$1 = class Xt extends d$5 {
    constructor(e, t) {
        super(e, t),
            (this.relayer = e),
            (this.logger = t),
            (this.subscriptions = new Map()),
            (this.topicMap = new Zr()),
            (this.events = new eventsExports.EventEmitter()),
            (this.name = St$1),
            (this.version = Pt$1),
            (this.pending = new Map()),
            (this.cached = []),
            (this.initialized = !1),
            (this.pendingSubscriptionWatchLabel = "pending_sub_watch_label"),
            (this.pollingInterval = 20),
            (this.storagePrefix = O$3),
            (this.subscribeTimeout = cjs$3.toMiliseconds(cjs$3.ONE_MINUTE)),
            (this.restartInProgress = !1),
            (this.batchSubscribeTopicsLimit = 500),
            (this.pendingBatchMessages = []),
            (this.init = async () => {
                this.initialized ||
                    (this.logger.trace("Initialized"),
                    this.registerEventListeners(),
                    (this.clientId = await this.relayer.core.crypto.getClientId()),
                    await this.restore()),
                    (this.initialized = !0);
            }),
            (this.subscribe = async (s, i) => {
                this.isInitialized(),
                    this.logger.debug("Subscribing Topic"),
                    this.logger.trace({ type: "method", method: "subscribe", params: { topic: s, opts: i } });
                try {
                    const r = ku(i),
                        n = { topic: s, relay: r, transportType: i?.transportType };
                    this.pending.set(s, n);
                    const a = await this.rpcSubscribe(s, r, i?.transportType);
                    return (
                        typeof a == "string" &&
                            (this.onSubscribe(a, n),
                            this.logger.debug("Successfully Subscribed Topic"),
                            this.logger.trace({ type: "method", method: "subscribe", params: { topic: s, opts: i } })),
                        a
                    );
                } catch (r) {
                    throw (this.logger.debug("Failed to Subscribe Topic"), this.logger.error(r), r);
                }
            }),
            (this.unsubscribe = async (s, i) => {
                await this.restartToComplete(),
                    this.isInitialized(),
                    typeof i?.id < "u" ? await this.unsubscribeById(s, i.id, i) : await this.unsubscribeByTopic(s, i);
            }),
            (this.isSubscribed = async (s) => {
                if (this.topics.includes(s)) return !0;
                const i = `${this.pendingSubscriptionWatchLabel}_${s}`;
                return await new Promise((r, n) => {
                    const a = new cjs$3.Watch();
                    a.start(i);
                    const c = setInterval(() => {
                        !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), a.stop(i), r(!0)),
                            a.elapsed(i) >= Rt$1 && (clearInterval(c), a.stop(i), n(new Error("Subscription resolution timeout")));
                    }, this.pollingInterval);
                }).catch(() => !1);
            }),
            (this.on = (s, i) => {
                this.events.on(s, i);
            }),
            (this.once = (s, i) => {
                this.events.once(s, i);
            }),
            (this.off = (s, i) => {
                this.events.off(s, i);
            }),
            (this.removeListener = (s, i) => {
                this.events.removeListener(s, i);
            }),
            (this.start = async () => {
                await this.onConnect();
            }),
            (this.stop = async () => {
                await this.onDisconnect();
            }),
            (this.restart = async () => {
                (this.restartInProgress = !0), await this.restore(), await this.reset(), (this.restartInProgress = !1);
            }),
            (this.relayer = e),
            (this.logger = E$4(t, this.name)),
            (this.clientId = "");
    }
    get context() {
        return y$6(this.logger);
    }
    get storageKey() {
        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
    }
    get length() {
        return this.subscriptions.size;
    }
    get ids() {
        return Array.from(this.subscriptions.keys());
    }
    get values() {
        return Array.from(this.subscriptions.values());
    }
    get topics() {
        return this.topicMap.topics;
    }
    hasSubscription(e, t) {
        let s = !1;
        try {
            s = this.getSubscription(e).topic === t;
        } catch {}
        return s;
    }
    onEnable() {
        (this.cached = []), (this.initialized = !0);
    }
    onDisable() {
        (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
    }
    async unsubscribeByTopic(e, t) {
        const s = this.topicMap.get(e);
        await Promise.all(s.map(async (i) => await this.unsubscribeById(e, i, t)));
    }
    async unsubscribeById(e, t, s) {
        this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: s } });
        try {
            const i = ku(s);
            await this.rpcUnsubscribe(e, t, i);
            const r = er$2("USER_DISCONNECTED", `${this.name}, ${e}`);
            await this.onUnsubscribe(e, t, r),
                this.logger.debug("Successfully Unsubscribed Topic"),
                this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: s } });
        } catch (i) {
            throw (this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i), i);
        }
    }
    async rpcSubscribe(e, t, s = F$3.relay) {
        s === F$3.relay && (await this.restartToComplete());
        const i = { method: qu(t.protocol).subscribe, params: { topic: e } };
        this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i });
        try {
            const r = Iu(e + this.clientId);
            return s === F$3.link_mode
                ? (setTimeout(() => {
                      (this.relayer.connected || this.relayer.connecting) && this.relayer.request(i).catch((n) => this.logger.warn(n));
                  }, cjs$3.toMiliseconds(cjs$3.ONE_SECOND)),
                  r)
                : (await await ds(
                      this.relayer.request(i).catch((n) => this.logger.warn(n)),
                      this.subscribeTimeout
                  ))
                ? r
                : null;
        } catch {
            this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(w$3.connection_stalled);
        }
        return null;
    }
    async rpcBatchSubscribe(e) {
        if (!e.length) return;
        const t = e[0].relay,
            s = { method: qu(t.protocol).batchSubscribe, params: { topics: e.map((i) => i.topic) } };
        this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s });
        try {
            return await await ds(
                this.relayer.request(s).catch((i) => this.logger.warn(i)),
                this.subscribeTimeout
            );
        } catch {
            this.relayer.events.emit(w$3.connection_stalled);
        }
    }
    async rpcBatchFetchMessages(e) {
        if (!e.length) return;
        const t = e[0].relay,
            s = { method: qu(t.protocol).batchFetchMessages, params: { topics: e.map((r) => r.topic) } };
        this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s });
        let i;
        try {
            i = await await ds(
                this.relayer.request(s).catch((r) => this.logger.warn(r)),
                this.subscribeTimeout
            );
        } catch {
            this.relayer.events.emit(w$3.connection_stalled);
        }
        return i;
    }
    rpcUnsubscribe(e, t, s) {
        const i = { method: qu(s.protocol).unsubscribe, params: { topic: e, id: t } };
        return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i }), this.relayer.request(i);
    }
    onSubscribe(e, t) {
        this.setSubscription(e, Se(ee$1({}, t), { id: e })), this.pending.delete(t.topic);
    }
    onBatchSubscribe(e) {
        e.length &&
            e.forEach((t) => {
                this.setSubscription(t.id, ee$1({}, t)), this.pending.delete(t.topic);
            });
    }
    async onUnsubscribe(e, t, s) {
        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);
    }
    async setRelayerSubscriptions(e) {
        await this.relayer.core.storage.setItem(this.storageKey, e);
    }
    async getRelayerSubscriptions() {
        return await this.relayer.core.storage.getItem(this.storageKey);
    }
    setSubscription(e, t) {
        this.logger.debug("Setting subscription"),
            this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }),
            this.addSubscription(e, t);
    }
    addSubscription(e, t) {
        this.subscriptions.set(e, ee$1({}, t)), this.topicMap.set(t.topic, e), this.events.emit(A$2.created, t);
    }
    getSubscription(e) {
        this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
        const t = this.subscriptions.get(e);
        if (!t) {
            const { message: s } = xe$1("NO_MATCHING_KEY", `${this.name}: ${e}`);
            throw new Error(s);
        }
        return t;
    }
    deleteSubscription(e, t) {
        this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
        const s = this.getSubscription(e);
        this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(A$2.deleted, Se(ee$1({}, s), { reason: t }));
    }
    async persist() {
        await this.setRelayerSubscriptions(this.values), this.events.emit(A$2.sync);
    }
    async reset() {
        if (this.cached.length) {
            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
            for (let t = 0; t < e; t++) {
                const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);
                await this.batchFetchMessages(s), await this.batchSubscribe(s);
            }
        }
        this.events.emit(A$2.resubscribed);
    }
    async restore() {
        try {
            const e = await this.getRelayerSubscriptions();
            if (typeof e > "u" || !e.length) return;
            if (this.subscriptions.size) {
                const { message: t } = xe$1("RESTORE_WILL_OVERRIDE", this.name);
                throw (this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t));
            }
            (this.cached = e),
                this.logger.debug(`Successfully Restored subscriptions for ${this.name}`),
                this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
        } catch (e) {
            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
        }
    }
    async batchSubscribe(e) {
        if (!e.length) return;
        const t = await this.rpcBatchSubscribe(e);
        Ir$1(t) && this.onBatchSubscribe(t.map((s, i) => Se(ee$1({}, e[i]), { id: s })));
    }
    async batchFetchMessages(e) {
        if (!e.length) return;
        this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);
        const t = await this.rpcBatchFetchMessages(e);
        t && t.messages && (this.pendingBatchMessages = this.pendingBatchMessages.concat(t.messages));
    }
    async onConnect() {
        await this.restart(), this.onEnable();
    }
    onDisconnect() {
        this.onDisable();
    }
    async checkPending() {
        if (!this.initialized || !this.relayer.connected) return;
        const e = [];
        this.pending.forEach((t) => {
            e.push(t);
        }),
            await this.batchSubscribe(e),
            this.pendingBatchMessages.length && (await this.relayer.handleBatchMessageEvents(this.pendingBatchMessages), (this.pendingBatchMessages = []));
    }
    registerEventListeners() {
        this.relayer.core.heartbeat.on(r$5.pulse, async () => {
            await this.checkPending();
        }),
            this.events.on(A$2.created, async (e) => {
                const t = A$2.created;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), await this.persist();
            }),
            this.events.on(A$2.deleted, async (e) => {
                const t = A$2.deleted;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), await this.persist();
            });
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
    async restartToComplete() {
        !this.relayer.connected && !this.relayer.connecting && (await this.relayer.transportOpen()),
            this.restartInProgress &&
                (await new Promise((e) => {
                    const t = setInterval(() => {
                        this.restartInProgress || (clearInterval(t), e());
                    }, this.pollingInterval);
                }));
    }
};
var nn = Object.defineProperty,
    Zt$1 = Object.getOwnPropertySymbols,
    on = Object.prototype.hasOwnProperty,
    an = Object.prototype.propertyIsEnumerable,
    Qt$1 = (o, e, t) => (e in o ? nn(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (o[e] = t)),
    cn = (o, e) => {
        for (var t in e || (e = {})) on.call(e, t) && Qt$1(o, t, e[t]);
        if (Zt$1) for (var t of Zt$1(e)) an.call(e, t) && Qt$1(o, t, e[t]);
        return o;
    };
class ei extends u$3 {
    constructor(e) {
        super(e),
            (this.protocol = "wc"),
            (this.version = 2),
            (this.events = new eventsExports.EventEmitter()),
            (this.name = vt),
            (this.transportExplicitlyClosed = !1),
            (this.initialized = !1),
            (this.connectionAttemptInProgress = !1),
            (this.connectionStatusPollingInterval = 20),
            (this.staleConnectionErrors = ["socket hang up", "stalled", "interrupted"]),
            (this.hasExperiencedNetworkDisruption = !1),
            (this.requestsInFlight = new Map()),
            (this.heartBeatTimeout = cjs$3.toMiliseconds(cjs$3.THIRTY_SECONDS + cjs$3.ONE_SECOND)),
            (this.request = async (t) => {
                var s, i;
                this.logger.debug("Publishing Request Payload");
                const r = t.id || getBigIntRpcId().toString();
                await this.toEstablishConnection();
                try {
                    const n = this.provider.request(t);
                    this.requestsInFlight.set(r, { promise: n, request: t }),
                        this.logger.trace(
                            { id: r, method: t.method, topic: (s = t.params) == null ? void 0 : s.topic },
                            "relayer.request - attempt to publish..."
                        );
                    const a = await new Promise(async (c, h) => {
                        const d = () => {
                            h(new Error(`relayer.request - publish interrupted, id: ${r}`));
                        };
                        this.provider.on(T$5.disconnect, d);
                        const g = await n;
                        this.provider.off(T$5.disconnect, d), c(g);
                    });
                    return this.logger.trace({ id: r, method: t.method, topic: (i = t.params) == null ? void 0 : i.topic }, "relayer.request - published"), a;
                } catch (n) {
                    throw (this.logger.debug(`Failed to Publish Request: ${r}`), n);
                } finally {
                    this.requestsInFlight.delete(r);
                }
            }),
            (this.resetPingTimeout = () => {
                if (bi())
                    try {
                        clearTimeout(this.pingTimeout),
                            (this.pingTimeout = setTimeout(() => {
                                var t, s, i;
                                (i = (s = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s.socket) == null || i.terminate();
                            }, this.heartBeatTimeout));
                    } catch (t) {
                        this.logger.warn(t);
                    }
            }),
            (this.onPayloadHandler = (t) => {
                this.onProviderPayload(t), this.resetPingTimeout();
            }),
            (this.onConnectHandler = () => {
                this.logger.trace("relayer connected"), this.startPingTimeout(), this.events.emit(w$3.connect);
            }),
            (this.onDisconnectHandler = () => {
                this.logger.trace("relayer disconnected"), this.onProviderDisconnect();
            }),
            (this.onProviderErrorHandler = (t) => {
                this.logger.error(t), this.events.emit(w$3.error, t), this.logger.info("Fatal socket error received, closing transport"), this.transportClose();
            }),
            (this.registerProviderListeners = () => {
                this.provider.on(T$5.payload, this.onPayloadHandler),
                    this.provider.on(T$5.connect, this.onConnectHandler),
                    this.provider.on(T$5.disconnect, this.onDisconnectHandler),
                    this.provider.on(T$5.error, this.onProviderErrorHandler);
            }),
            (this.core = e.core),
            (this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? E$4(e.logger, this.name) : Wg(k$2({ level: e.logger || Et$1 }))),
            (this.messages = new Yt$1(this.logger, e.core)),
            (this.subscriber = new Xt$1(this, this.logger)),
            (this.publisher = new Xr(this, this.logger)),
            (this.relayUrl = e?.relayUrl || Ie$1),
            (this.projectId = e.projectId),
            (this.bundleId = ts()),
            (this.provider = {});
    }
    async init() {
        if (
            (this.logger.trace("Initialized"),
            this.registerEventListeners(),
            await Promise.all([this.messages.init(), this.subscriber.init()]),
            (this.initialized = !0),
            this.subscriber.cached.length > 0)
        )
            try {
                await this.transportOpen();
            } catch (e) {
                this.logger.warn(e);
            }
    }
    get context() {
        return y$6(this.logger);
    }
    get connected() {
        var e, t, s;
        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 1;
    }
    get connecting() {
        var e, t, s;
        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 0;
    }
    async publish(e, t, s) {
        this.isInitialized(),
            await this.publisher.publish(e, t, s),
            await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now(), transportType: F$3.relay });
    }
    async subscribe(e, t) {
        var s;
        this.isInitialized(), t?.transportType === "relay" && (await this.toEstablishConnection());
        let i = ((s = this.subscriber.topicMap.get(e)) == null ? void 0 : s[0]) || "",
            r;
        const n = (a) => {
            a.topic === e && (this.subscriber.off(A$2.created, n), r());
        };
        return (
            await Promise.all([
                new Promise((a) => {
                    (r = a), this.subscriber.on(A$2.created, n);
                }),
                new Promise(async (a) => {
                    (i = (await this.subscriber.subscribe(e, t)) || i), a();
                }),
            ]),
            i
        );
    }
    async unsubscribe(e, t) {
        this.isInitialized(), await this.subscriber.unsubscribe(e, t);
    }
    on(e, t) {
        this.events.on(e, t);
    }
    once(e, t) {
        this.events.once(e, t);
    }
    off(e, t) {
        this.events.off(e, t);
    }
    removeListener(e, t) {
        this.events.removeListener(e, t);
    }
    async transportDisconnect() {
        if (!this.hasExperiencedNetworkDisruption && this.connected && this.requestsInFlight.size > 0)
            try {
                await Promise.all(Array.from(this.requestsInFlight.values()).map((e) => e.promise));
            } catch (e) {
                this.logger.warn(e);
            }
        this.hasExperiencedNetworkDisruption || this.connected
            ? await ds(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect())
            : this.onProviderDisconnect();
    }
    async transportClose() {
        (this.transportExplicitlyClosed = !0), await this.transportDisconnect();
    }
    async transportOpen(e) {
        await this.confirmOnlineStateOrThrow(),
            e && e !== this.relayUrl && ((this.relayUrl = e), await this.transportDisconnect()),
            await this.createProvider(),
            (this.connectionAttemptInProgress = !0),
            (this.transportExplicitlyClosed = !1);
        try {
            await new Promise(async (t, s) => {
                const i = () => {
                    this.provider.off(T$5.disconnect, i), s(new Error("Connection interrupted while trying to subscribe"));
                };
                this.provider.on(T$5.disconnect, i),
                    await ds(this.provider.connect(), cjs$3.toMiliseconds(cjs$3.ONE_MINUTE), `Socket stalled when trying to connect to ${this.relayUrl}`)
                        .catch((r) => {
                            s(r);
                        })
                        .finally(() => {
                            clearTimeout(this.reconnectTimeout), (this.reconnectTimeout = void 0);
                        }),
                    this.subscriber.start().catch((r) => {
                        this.logger.error(r), this.onDisconnectHandler();
                    }),
                    (this.hasExperiencedNetworkDisruption = !1),
                    t();
            });
        } catch (t) {
            this.logger.error(t);
            const s = t;
            if (((this.hasExperiencedNetworkDisruption = !0), !this.isConnectionStalled(s.message))) throw t;
        } finally {
            this.connectionAttemptInProgress = !1;
        }
    }
    async restartTransport(e) {
        this.connectionAttemptInProgress ||
            ((this.relayUrl = e || this.relayUrl), await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
    }
    async confirmOnlineStateOrThrow() {
        if (!(await Eh())) throw new Error("No internet connection detected. Please restart your network and try again.");
    }
    async handleBatchMessageEvents(e) {
        if (e?.length === 0) {
            this.logger.trace("Batch message events is empty. Ignoring...");
            return;
        }
        const t = e.sort((s, i) => s.publishedAt - i.publishedAt);
        this.logger.trace(`Batch of ${t.length} message events sorted`);
        for (const s of t)
            try {
                await this.onMessageEvent(s);
            } catch (i) {
                this.logger.warn(i);
            }
        this.logger.trace(`Batch of ${t.length} message events processed`);
    }
    async onLinkMessageEvent(e, t) {
        const { topic: s } = e;
        if (!t.sessionExists) {
            const i = ms$2(cjs$3.FIVE_MINUTES),
                r = { topic: s, expiry: i, relay: { protocol: "irn" }, active: !1 };
            await this.core.pairing.pairings.set(s, r);
        }
        this.events.emit(w$3.message, e), await this.recordMessageEvent(e);
    }
    startPingTimeout() {
        var e, t, s, i, r;
        if (bi())
            try {
                (t = (e = this.provider) == null ? void 0 : e.connection) != null &&
                    t.socket &&
                    ((r = (i = (s = this.provider) == null ? void 0 : s.connection) == null ? void 0 : i.socket) == null ||
                        r.once("ping", () => {
                            this.resetPingTimeout();
                        })),
                    this.resetPingTimeout();
            } catch (n) {
                this.logger.warn(n);
            }
    }
    isConnectionStalled(e) {
        return this.staleConnectionErrors.some((t) => e.includes(t));
    }
    async createProvider() {
        this.provider.connection && this.unregisterProviderListeners();
        const e = await this.core.crypto.signJWT(this.relayUrl);
        (this.provider = new o$7(
            new f$3(
                is({
                    sdkVersion: Te$1,
                    protocol: this.protocol,
                    version: this.version,
                    relayUrl: this.relayUrl,
                    projectId: this.projectId,
                    auth: e,
                    useOnCloseEvent: !0,
                    bundleId: this.bundleId,
                })
            )
        )),
            this.registerProviderListeners();
    }
    async recordMessageEvent(e) {
        const { topic: t, message: s } = e;
        await this.messages.set(t, s);
    }
    async shouldIgnoreMessageEvent(e) {
        const { topic: t, message: s } = e;
        if (!s || s.length === 0) return this.logger.debug(`Ignoring invalid/empty message: ${s}`), !0;
        if (!(await this.subscriber.isSubscribed(t))) return this.logger.debug(`Ignoring message for non-subscribed topic ${t}`), !0;
        const i = this.messages.has(t, s);
        return i && this.logger.debug(`Ignoring duplicate message: ${s}`), i;
    }
    async onProviderPayload(e) {
        if ((this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), isJsonRpcRequest(e))) {
            if (!e.method.endsWith(wt$1)) return;
            const t = e.params,
                { topic: s, message: i, publishedAt: r, attestation: n } = t.data,
                a = { topic: s, message: i, publishedAt: r, transportType: F$3.relay, attestation: n };
            this.logger.debug("Emitting Relayer Payload"),
                this.logger.trace(cn({ type: "event", event: t.id }, a)),
                this.events.emit(t.id, a),
                await this.acknowledgePayload(e),
                await this.onMessageEvent(a);
        } else isJsonRpcResponse(e) && this.events.emit(w$3.message_ack, e);
    }
    async onMessageEvent(e) {
        (await this.shouldIgnoreMessageEvent(e)) || (this.events.emit(w$3.message, e), await this.recordMessageEvent(e));
    }
    async acknowledgePayload(e) {
        const t = formatJsonRpcResult(e.id, !0);
        await this.provider.connection.send(t);
    }
    unregisterProviderListeners() {
        this.provider.off(T$5.payload, this.onPayloadHandler),
            this.provider.off(T$5.connect, this.onConnectHandler),
            this.provider.off(T$5.disconnect, this.onDisconnectHandler),
            this.provider.off(T$5.error, this.onProviderErrorHandler),
            clearTimeout(this.pingTimeout);
    }
    async registerEventListeners() {
        let e = await Eh();
        Sh(async (t) => {
            e !== t &&
                ((e = t),
                t
                    ? await this.restartTransport().catch((s) => this.logger.error(s))
                    : ((this.hasExperiencedNetworkDisruption = !0), await this.transportDisconnect(), (this.transportExplicitlyClosed = !1)));
        });
    }
    async onProviderDisconnect() {
        await this.subscriber.stop(),
            this.requestsInFlight.clear(),
            clearTimeout(this.pingTimeout),
            this.events.emit(w$3.disconnect),
            (this.connectionAttemptInProgress = !1),
            !this.transportExplicitlyClosed &&
                (this.reconnectTimeout ||
                    (this.reconnectTimeout = setTimeout(async () => {
                        await this.transportOpen().catch((e) => this.logger.error(e));
                    }, cjs$3.toMiliseconds(It$1))));
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
    async toEstablishConnection() {
        await this.confirmOnlineStateOrThrow(),
            !this.connected &&
                (this.connectionAttemptInProgress &&
                    (await new Promise((e) => {
                        const t = setInterval(() => {
                            this.connected && (clearInterval(t), e());
                        }, this.connectionStatusPollingInterval);
                    })),
                await this.transportOpen());
    }
}
var hn = Object.defineProperty,
    ti = Object.getOwnPropertySymbols,
    ln = Object.prototype.hasOwnProperty,
    un = Object.prototype.propertyIsEnumerable,
    ii = (o, e, t) => (e in o ? hn(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (o[e] = t)),
    si = (o, e) => {
        for (var t in e || (e = {})) ln.call(e, t) && ii(o, t, e[t]);
        if (ti) for (var t of ti(e)) un.call(e, t) && ii(o, t, e[t]);
        return o;
    };
class ri extends p$4 {
    constructor(e, t, s, i = O$3, r = void 0) {
        super(e, t, s, i),
            (this.core = e),
            (this.logger = t),
            (this.name = s),
            (this.map = new Map()),
            (this.version = Tt$2),
            (this.cached = []),
            (this.initialized = !1),
            (this.storagePrefix = O$3),
            (this.recentlyDeleted = []),
            (this.recentlyDeletedLimit = 200),
            (this.init = async () => {
                this.initialized ||
                    (this.logger.trace("Initialized"),
                    await this.restore(),
                    this.cached.forEach((n) => {
                        this.getKey && n !== null && !Pe$1(n)
                            ? this.map.set(this.getKey(n), n)
                            : sh(n)
                            ? this.map.set(n.id, n)
                            : ah(n) && this.map.set(n.topic, n);
                    }),
                    (this.cached = []),
                    (this.initialized = !0));
            }),
            (this.set = async (n, a) => {
                this.isInitialized(),
                    this.map.has(n)
                        ? await this.update(n, a)
                        : (this.logger.debug("Setting value"),
                          this.logger.trace({ type: "method", method: "set", key: n, value: a }),
                          this.map.set(n, a),
                          await this.persist());
            }),
            (this.get = (n) => (
                this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: n }), this.getData(n)
            )),
            (this.getAll = (n) => (this.isInitialized(), n ? this.values.filter((a) => Object.keys(n).every((c) => ys$1(a[c], n[c]))) : this.values)),
            (this.update = async (n, a) => {
                this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: n, update: a });
                const c = si(si({}, this.getData(n)), a);
                this.map.set(n, c), await this.persist();
            }),
            (this.delete = async (n, a) => {
                this.isInitialized(),
                    this.map.has(n) &&
                        (this.logger.debug("Deleting value"),
                        this.logger.trace({ type: "method", method: "delete", key: n, reason: a }),
                        this.map.delete(n),
                        this.addToRecentlyDeleted(n),
                        await this.persist());
            }),
            (this.logger = E$4(t, this.name)),
            (this.storagePrefix = i),
            (this.getKey = r);
    }
    get context() {
        return y$6(this.logger);
    }
    get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
    }
    get length() {
        return this.map.size;
    }
    get keys() {
        return Array.from(this.map.keys());
    }
    get values() {
        return Array.from(this.map.values());
    }
    addToRecentlyDeleted(e) {
        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
    }
    async setDataStore(e) {
        await this.core.storage.setItem(this.storageKey, e);
    }
    async getDataStore() {
        return await this.core.storage.getItem(this.storageKey);
    }
    getData(e) {
        const t = this.map.get(e);
        if (!t) {
            if (this.recentlyDeleted.includes(e)) {
                const { message: i } = xe$1("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e}`);
                throw (this.logger.error(i), new Error(i));
            }
            const { message: s } = xe$1("NO_MATCHING_KEY", `${this.name}: ${e}`);
            throw (this.logger.error(s), new Error(s));
        }
        return t;
    }
    async persist() {
        await this.setDataStore(this.values);
    }
    async restore() {
        try {
            const e = await this.getDataStore();
            if (typeof e > "u" || !e.length) return;
            if (this.map.size) {
                const { message: t } = xe$1("RESTORE_WILL_OVERRIDE", this.name);
                throw (this.logger.error(t), new Error(t));
            }
            (this.cached = e),
                this.logger.debug(`Successfully Restored value for ${this.name}`),
                this.logger.trace({ type: "method", method: "restore", value: this.values });
        } catch (e) {
            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
        }
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
}
class ni {
    constructor(e, t) {
        (this.core = e),
            (this.logger = t),
            (this.name = xt),
            (this.version = Ot$1),
            (this.events = new Gg()),
            (this.initialized = !1),
            (this.storagePrefix = O$3),
            (this.ignoredPayloadTypes = [pr$2]),
            (this.registeredMethods = []),
            (this.init = async () => {
                this.initialized ||
                    (await this.pairings.init(),
                    await this.cleanup(),
                    this.registerRelayerEvents(),
                    this.registerExpirerEvents(),
                    (this.initialized = !0),
                    this.logger.trace("Initialized"));
            }),
            (this.register = ({ methods: s }) => {
                this.isInitialized(), (this.registeredMethods = [...new Set([...this.registeredMethods, ...s])]);
            }),
            (this.create = async (s) => {
                this.isInitialized();
                const i = Eu(),
                    r = await this.core.crypto.setSymKey(i),
                    n = ms$2(cjs$3.FIVE_MINUTES),
                    a = { protocol: _t$1 },
                    c = { topic: r, expiry: n, relay: a, active: !1 },
                    h = Gu({
                        protocol: this.core.protocol,
                        version: this.core.version,
                        topic: r,
                        symKey: i,
                        relay: a,
                        expiryTimestamp: n,
                        methods: s?.methods,
                    });
                return (
                    this.core.expirer.set(r, n),
                    await this.pairings.set(r, c),
                    await this.core.relayer.subscribe(r, { transportType: s?.transportType }),
                    { topic: r, uri: h }
                );
            }),
            (this.pair = async (s) => {
                this.isInitialized();
                const i = this.core.eventClient.createEvent({ properties: { topic: s?.uri, trace: [z$3.pairing_started] } });
                this.isValidPair(s, i);
                const { topic: r, symKey: n, relay: a, expiryTimestamp: c, methods: h } = Ju(s.uri);
                (i.props.properties.topic = r), i.addTrace(z$3.pairing_uri_validation_success), i.addTrace(z$3.pairing_uri_not_expired);
                let d;
                if (this.pairings.keys.includes(r)) {
                    if (((d = this.pairings.get(r)), i.addTrace(z$3.existing_pairing), d.active))
                        throw (
                            (i.setError($$3.active_pairing_already_exists),
                            new Error(`Pairing already exists: ${r}. Please try again with a new connection URI.`))
                        );
                    i.addTrace(z$3.pairing_not_expired);
                }
                const g = c || ms$2(cjs$3.FIVE_MINUTES),
                    m = { topic: r, relay: a, expiry: g, active: !1, methods: h };
                this.core.expirer.set(r, g),
                    await this.pairings.set(r, m),
                    i.addTrace(z$3.store_new_pairing),
                    s.activatePairing && (await this.activate({ topic: r })),
                    this.events.emit(Z$3.create, m),
                    i.addTrace(z$3.emit_inactive_pairing),
                    this.core.crypto.keychain.has(r) || (await this.core.crypto.setSymKey(n, r)),
                    i.addTrace(z$3.subscribing_pairing_topic);
                try {
                    await this.core.relayer.confirmOnlineStateOrThrow();
                } catch {
                    i.setError($$3.no_internet_connection);
                }
                try {
                    await this.core.relayer.subscribe(r, { relay: a });
                } catch (b) {
                    throw (i.setError($$3.subscribe_pairing_topic_failure), b);
                }
                return i.addTrace(z$3.subscribe_pairing_topic_success), m;
            }),
            (this.activate = async ({ topic: s }) => {
                this.isInitialized();
                const i = ms$2(cjs$3.THIRTY_DAYS);
                this.core.expirer.set(s, i), await this.pairings.update(s, { active: !0, expiry: i });
            }),
            (this.ping = async (s) => {
                this.isInitialized(), await this.isValidPing(s);
                const { topic: i } = s;
                if (this.pairings.keys.includes(i)) {
                    const r = await this.sendRequest(i, "wc_pairingPing", {}),
                        { done: n, resolve: a, reject: c } = ls();
                    this.events.once(bs$1("pairing_ping", r), ({ error: h }) => {
                        h ? c(h) : a();
                    }),
                        await n();
                }
            }),
            (this.updateExpiry = async ({ topic: s, expiry: i }) => {
                this.isInitialized(), await this.pairings.update(s, { expiry: i });
            }),
            (this.updateMetadata = async ({ topic: s, metadata: i }) => {
                this.isInitialized(), await this.pairings.update(s, { peerMetadata: i });
            }),
            (this.getPairings = () => (this.isInitialized(), this.pairings.values)),
            (this.disconnect = async (s) => {
                this.isInitialized(), await this.isValidDisconnect(s);
                const { topic: i } = s;
                this.pairings.keys.includes(i) && (await this.sendRequest(i, "wc_pairingDelete", er$2("USER_DISCONNECTED")), await this.deletePairing(i));
            }),
            (this.sendRequest = async (s, i, r) => {
                const n = formatJsonRpcRequest(i, r),
                    a = await this.core.crypto.encode(s, n),
                    c = j$4[i].req;
                return this.core.history.set(s, n), this.core.relayer.publish(s, a, c), n.id;
            }),
            (this.sendResult = async (s, i, r) => {
                const n = formatJsonRpcResult(s, r),
                    a = await this.core.crypto.encode(i, n),
                    c = await this.core.history.get(i, s),
                    h = j$4[c.request.method].res;
                await this.core.relayer.publish(i, a, h), await this.core.history.resolve(n);
            }),
            (this.sendError = async (s, i, r) => {
                const n = formatJsonRpcError(s, r),
                    a = await this.core.crypto.encode(i, n),
                    c = await this.core.history.get(i, s),
                    h = j$4[c.request.method] ? j$4[c.request.method].res : j$4.unregistered_method.res;
                await this.core.relayer.publish(i, a, h), await this.core.history.resolve(n);
            }),
            (this.deletePairing = async (s, i) => {
                await this.core.relayer.unsubscribe(s),
                    await Promise.all([
                        this.pairings.delete(s, er$2("USER_DISCONNECTED")),
                        this.core.crypto.deleteSymKey(s),
                        i ? Promise.resolve() : this.core.expirer.del(s),
                    ]);
            }),
            (this.cleanup = async () => {
                const s = this.pairings.getAll().filter((i) => As$1(i.expiry));
                await Promise.all(s.map((i) => this.deletePairing(i.topic)));
            }),
            (this.onRelayEventRequest = (s) => {
                const { topic: i, payload: r } = s;
                switch (r.method) {
                    case "wc_pairingPing":
                        return this.onPairingPingRequest(i, r);
                    case "wc_pairingDelete":
                        return this.onPairingDeleteRequest(i, r);
                    default:
                        return this.onUnknownRpcMethodRequest(i, r);
                }
            }),
            (this.onRelayEventResponse = async (s) => {
                const { topic: i, payload: r } = s,
                    n = (await this.core.history.get(i, r.id)).request.method;
                switch (n) {
                    case "wc_pairingPing":
                        return this.onPairingPingResponse(i, r);
                    default:
                        return this.onUnknownRpcMethodResponse(n);
                }
            }),
            (this.onPairingPingRequest = async (s, i) => {
                const { id: r } = i;
                try {
                    this.isValidPing({ topic: s }), await this.sendResult(r, s, !0), this.events.emit(Z$3.ping, { id: r, topic: s });
                } catch (n) {
                    await this.sendError(r, s, n), this.logger.error(n);
                }
            }),
            (this.onPairingPingResponse = (s, i) => {
                const { id: r } = i;
                setTimeout(() => {
                    isJsonRpcResult(i)
                        ? this.events.emit(bs$1("pairing_ping", r), {})
                        : isJsonRpcError(i) && this.events.emit(bs$1("pairing_ping", r), { error: i.error });
                }, 500);
            }),
            (this.onPairingDeleteRequest = async (s, i) => {
                const { id: r } = i;
                try {
                    this.isValidDisconnect({ topic: s }), await this.deletePairing(s), this.events.emit(Z$3.delete, { id: r, topic: s });
                } catch (n) {
                    await this.sendError(r, s, n), this.logger.error(n);
                }
            }),
            (this.onUnknownRpcMethodRequest = async (s, i) => {
                const { id: r, method: n } = i;
                try {
                    if (this.registeredMethods.includes(n)) return;
                    const a = er$2("WC_METHOD_UNSUPPORTED", n);
                    await this.sendError(r, s, a), this.logger.error(a);
                } catch (a) {
                    await this.sendError(r, s, a), this.logger.error(a);
                }
            }),
            (this.onUnknownRpcMethodResponse = (s) => {
                this.registeredMethods.includes(s) || this.logger.error(er$2("WC_METHOD_UNSUPPORTED", s));
            }),
            (this.isValidPair = (s, i) => {
                var r;
                if (!dh(s)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `pair() params: ${s}`);
                    throw (i.setError($$3.malformed_pairing_uri), new Error(a));
                }
                if (!oh(s.uri)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `pair() uri: ${s.uri}`);
                    throw (i.setError($$3.malformed_pairing_uri), new Error(a));
                }
                const n = Ju(s?.uri);
                if (!((r = n?.relay) != null && r.protocol)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", "pair() uri#relay-protocol");
                    throw (i.setError($$3.malformed_pairing_uri), new Error(a));
                }
                if (!(n != null && n.symKey)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", "pair() uri#symKey");
                    throw (i.setError($$3.malformed_pairing_uri), new Error(a));
                }
                if (n != null && n.expiryTimestamp && cjs$3.toMiliseconds(n?.expiryTimestamp) < Date.now()) {
                    i.setError($$3.pairing_expired);
                    const { message: a } = xe$1("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
                    throw new Error(a);
                }
            }),
            (this.isValidPing = async (s) => {
                if (!dh(s)) {
                    const { message: r } = xe$1("MISSING_OR_INVALID", `ping() params: ${s}`);
                    throw new Error(r);
                }
                const { topic: i } = s;
                await this.isValidPairingTopic(i);
            }),
            (this.isValidDisconnect = async (s) => {
                if (!dh(s)) {
                    const { message: r } = xe$1("MISSING_OR_INVALID", `disconnect() params: ${s}`);
                    throw new Error(r);
                }
                const { topic: i } = s;
                await this.isValidPairingTopic(i);
            }),
            (this.isValidPairingTopic = async (s) => {
                if (!Yt$2(s, !1)) {
                    const { message: i } = xe$1("MISSING_OR_INVALID", `pairing topic should be a string: ${s}`);
                    throw new Error(i);
                }
                if (!this.pairings.keys.includes(s)) {
                    const { message: i } = xe$1("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s}`);
                    throw new Error(i);
                }
                if (As$1(this.pairings.get(s).expiry)) {
                    await this.deletePairing(s);
                    const { message: i } = xe$1("EXPIRED", `pairing topic: ${s}`);
                    throw new Error(i);
                }
            }),
            (this.core = e),
            (this.logger = E$4(t, this.name)),
            (this.pairings = new ri(this.core, this.logger, this.name, this.storagePrefix));
    }
    get context() {
        return y$6(this.logger);
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
    registerRelayerEvents() {
        this.core.relayer.on(w$3.message, async (e) => {
            const { topic: t, message: s, transportType: i } = e;
            if (!this.pairings.keys.includes(t) || i === F$3.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) return;
            const r = await this.core.crypto.decode(t, s);
            try {
                isJsonRpcRequest(r)
                    ? (this.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r }))
                    : isJsonRpcResponse(r) &&
                      (await this.core.history.resolve(r), await this.onRelayEventResponse({ topic: t, payload: r }), this.core.history.delete(t, r.id));
            } catch (n) {
                this.logger.error(n);
            }
        });
    }
    registerExpirerEvents() {
        this.core.expirer.on(R$3.expired, async (e) => {
            const { topic: t } = gs$1(e.target);
            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(Z$3.expire, { topic: t }));
        });
    }
}
class oi extends h$5 {
    constructor(e, t) {
        super(e, t),
            (this.core = e),
            (this.logger = t),
            (this.records = new Map()),
            (this.events = new eventsExports.EventEmitter()),
            (this.name = At$1),
            (this.version = Nt$1),
            (this.cached = []),
            (this.initialized = !1),
            (this.storagePrefix = O$3),
            (this.init = async () => {
                this.initialized ||
                    (this.logger.trace("Initialized"),
                    await this.restore(),
                    this.cached.forEach((s) => this.records.set(s.id, s)),
                    (this.cached = []),
                    this.registerEventListeners(),
                    (this.initialized = !0));
            }),
            (this.set = (s, i, r) => {
                if (
                    (this.isInitialized(),
                    this.logger.debug("Setting JSON-RPC request history record"),
                    this.logger.trace({ type: "method", method: "set", topic: s, request: i, chainId: r }),
                    this.records.has(i.id))
                )
                    return;
                const n = { id: i.id, topic: s, request: { method: i.method, params: i.params || null }, chainId: r, expiry: ms$2(cjs$3.THIRTY_DAYS) };
                this.records.set(n.id, n), this.persist(), this.events.emit(P$2.created, n);
            }),
            (this.resolve = async (s) => {
                if (
                    (this.isInitialized(),
                    this.logger.debug("Updating JSON-RPC response history record"),
                    this.logger.trace({ type: "method", method: "update", response: s }),
                    !this.records.has(s.id))
                )
                    return;
                const i = await this.getRecord(s.id);
                typeof i.response > "u" &&
                    ((i.response = isJsonRpcError(s) ? { error: s.error } : { result: s.result }),
                    this.records.set(i.id, i),
                    this.persist(),
                    this.events.emit(P$2.updated, i));
            }),
            (this.get = async (s, i) => (
                this.isInitialized(),
                this.logger.debug("Getting record"),
                this.logger.trace({ type: "method", method: "get", topic: s, id: i }),
                await this.getRecord(i)
            )),
            (this.delete = (s, i) => {
                this.isInitialized(),
                    this.logger.debug("Deleting record"),
                    this.logger.trace({ type: "method", method: "delete", id: i }),
                    this.values.forEach((r) => {
                        if (r.topic === s) {
                            if (typeof i < "u" && r.id !== i) return;
                            this.records.delete(r.id), this.events.emit(P$2.deleted, r);
                        }
                    }),
                    this.persist();
            }),
            (this.exists = async (s, i) => (this.isInitialized(), this.records.has(i) ? (await this.getRecord(i)).topic === s : !1)),
            (this.on = (s, i) => {
                this.events.on(s, i);
            }),
            (this.once = (s, i) => {
                this.events.once(s, i);
            }),
            (this.off = (s, i) => {
                this.events.off(s, i);
            }),
            (this.removeListener = (s, i) => {
                this.events.removeListener(s, i);
            }),
            (this.logger = E$4(t, this.name));
    }
    get context() {
        return y$6(this.logger);
    }
    get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
    }
    get size() {
        return this.records.size;
    }
    get keys() {
        return Array.from(this.records.keys());
    }
    get values() {
        return Array.from(this.records.values());
    }
    get pending() {
        const e = [];
        return (
            this.values.forEach((t) => {
                if (typeof t.response < "u") return;
                const s = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
                return e.push(s);
            }),
            e
        );
    }
    async setJsonRpcRecords(e) {
        await this.core.storage.setItem(this.storageKey, e);
    }
    async getJsonRpcRecords() {
        return await this.core.storage.getItem(this.storageKey);
    }
    getRecord(e) {
        this.isInitialized();
        const t = this.records.get(e);
        if (!t) {
            const { message: s } = xe$1("NO_MATCHING_KEY", `${this.name}: ${e}`);
            throw new Error(s);
        }
        return t;
    }
    async persist() {
        await this.setJsonRpcRecords(this.values), this.events.emit(P$2.sync);
    }
    async restore() {
        try {
            const e = await this.getJsonRpcRecords();
            if (typeof e > "u" || !e.length) return;
            if (this.records.size) {
                const { message: t } = xe$1("RESTORE_WILL_OVERRIDE", this.name);
                throw (this.logger.error(t), new Error(t));
            }
            (this.cached = e),
                this.logger.debug(`Successfully Restored records for ${this.name}`),
                this.logger.trace({ type: "method", method: "restore", records: this.values });
        } catch (e) {
            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
        }
    }
    registerEventListeners() {
        this.events.on(P$2.created, (e) => {
            const t = P$2.created;
            this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
        }),
            this.events.on(P$2.updated, (e) => {
                const t = P$2.updated;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
            }),
            this.events.on(P$2.deleted, (e) => {
                const t = P$2.deleted;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
            }),
            this.core.heartbeat.on(r$5.pulse, () => {
                this.cleanup();
            });
    }
    cleanup() {
        try {
            this.isInitialized();
            let e = !1;
            this.records.forEach((t) => {
                cjs$3.toMiliseconds(t.expiry || 0) - Date.now() <= 0 &&
                    (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(P$2.deleted, t, !1), (e = !0));
            }),
                e && this.persist();
        } catch (e) {
            this.logger.warn(e);
        }
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
}
class ai extends x$2 {
    constructor(e, t) {
        super(e, t),
            (this.core = e),
            (this.logger = t),
            (this.expirations = new Map()),
            (this.events = new eventsExports.EventEmitter()),
            (this.name = Lt$2),
            (this.version = zt$1),
            (this.cached = []),
            (this.initialized = !1),
            (this.storagePrefix = O$3),
            (this.init = async () => {
                this.initialized ||
                    (this.logger.trace("Initialized"),
                    await this.restore(),
                    this.cached.forEach((s) => this.expirations.set(s.target, s)),
                    (this.cached = []),
                    this.registerEventListeners(),
                    (this.initialized = !0));
            }),
            (this.has = (s) => {
                try {
                    const i = this.formatTarget(s);
                    return typeof this.getExpiration(i) < "u";
                } catch {
                    return !1;
                }
            }),
            (this.set = (s, i) => {
                this.isInitialized();
                const r = this.formatTarget(s),
                    n = { target: r, expiry: i };
                this.expirations.set(r, n), this.checkExpiry(r, n), this.events.emit(R$3.created, { target: r, expiration: n });
            }),
            (this.get = (s) => {
                this.isInitialized();
                const i = this.formatTarget(s);
                return this.getExpiration(i);
            }),
            (this.del = (s) => {
                if ((this.isInitialized(), this.has(s))) {
                    const i = this.formatTarget(s),
                        r = this.getExpiration(i);
                    this.expirations.delete(i), this.events.emit(R$3.deleted, { target: i, expiration: r });
                }
            }),
            (this.on = (s, i) => {
                this.events.on(s, i);
            }),
            (this.once = (s, i) => {
                this.events.once(s, i);
            }),
            (this.off = (s, i) => {
                this.events.off(s, i);
            }),
            (this.removeListener = (s, i) => {
                this.events.removeListener(s, i);
            }),
            (this.logger = E$4(t, this.name));
    }
    get context() {
        return y$6(this.logger);
    }
    get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
    }
    get length() {
        return this.expirations.size;
    }
    get keys() {
        return Array.from(this.expirations.keys());
    }
    get values() {
        return Array.from(this.expirations.values());
    }
    formatTarget(e) {
        if (typeof e == "string") return ps(e);
        if (typeof e == "number") return vs$2(e);
        const { message: t } = xe$1("UNKNOWN_TYPE", `Target type: ${typeof e}`);
        throw new Error(t);
    }
    async setExpirations(e) {
        await this.core.storage.setItem(this.storageKey, e);
    }
    async getExpirations() {
        return await this.core.storage.getItem(this.storageKey);
    }
    async persist() {
        await this.setExpirations(this.values), this.events.emit(R$3.sync);
    }
    async restore() {
        try {
            const e = await this.getExpirations();
            if (typeof e > "u" || !e.length) return;
            if (this.expirations.size) {
                const { message: t } = xe$1("RESTORE_WILL_OVERRIDE", this.name);
                throw (this.logger.error(t), new Error(t));
            }
            (this.cached = e),
                this.logger.debug(`Successfully Restored expirations for ${this.name}`),
                this.logger.trace({ type: "method", method: "restore", expirations: this.values });
        } catch (e) {
            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
        }
    }
    getExpiration(e) {
        const t = this.expirations.get(e);
        if (!t) {
            const { message: s } = xe$1("NO_MATCHING_KEY", `${this.name}: ${e}`);
            throw (this.logger.warn(s), new Error(s));
        }
        return t;
    }
    checkExpiry(e, t) {
        const { expiry: s } = t;
        cjs$3.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);
    }
    expire(e, t) {
        this.expirations.delete(e), this.events.emit(R$3.expired, { target: e, expiration: t });
    }
    checkExpirations() {
        this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
    }
    registerEventListeners() {
        this.core.heartbeat.on(r$5.pulse, () => this.checkExpirations()),
            this.events.on(R$3.created, (e) => {
                const t = R$3.created;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
            }),
            this.events.on(R$3.expired, (e) => {
                const t = R$3.expired;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
            }),
            this.events.on(R$3.deleted, (e) => {
                const t = R$3.deleted;
                this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
            });
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: e } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(e);
        }
    }
}
var y$4 = {};
Object.defineProperty(y$4, "__esModule", { value: !0 }),
    (y$4.getLocalStorage =
        y$4.getLocalStorageOrThrow =
        y$4.getCrypto =
        y$4.getCryptoOrThrow =
        y$4.getLocation =
        y$4.getLocationOrThrow =
        y$4.getNavigator =
        y$4.getNavigatorOrThrow =
        ci =
        y$4.getDocument =
        y$4.getDocumentOrThrow =
        y$4.getFromWindowOrThrow =
        y$4.getFromWindow =
            void 0);
function U$2(o) {
    let e;
    return typeof window < "u" && typeof window[o] < "u" && (e = window[o]), e;
}
y$4.getFromWindow = U$2;
function q$3(o) {
    const e = U$2(o);
    if (!e) throw new Error(`${o} is not defined in Window`);
    return e;
}
y$4.getFromWindowOrThrow = q$3;
function dn() {
    return q$3("document");
}
y$4.getDocumentOrThrow = dn;
function gn() {
    return U$2("document");
}
var ci = (y$4.getDocument = gn);
function pn() {
    return q$3("navigator");
}
y$4.getNavigatorOrThrow = pn;
function yn() {
    return U$2("navigator");
}
y$4.getNavigator = yn;
function Dn() {
    return q$3("location");
}
y$4.getLocationOrThrow = Dn;
function mn() {
    return U$2("location");
}
y$4.getLocation = mn;
function bn() {
    return q$3("crypto");
}
y$4.getCryptoOrThrow = bn;
function fn() {
    return U$2("crypto");
}
y$4.getCrypto = fn;
function _n() {
    return q$3("localStorage");
}
y$4.getLocalStorageOrThrow = _n;
function En() {
    return U$2("localStorage");
}
y$4.getLocalStorage = En;
class hi extends y$5 {
    constructor(e, t, s) {
        super(e, t, s),
            (this.core = e),
            (this.logger = t),
            (this.store = s),
            (this.name = Mt$1),
            (this.verifyUrlV3 = kt),
            (this.storagePrefix = O$3),
            (this.version = ve$1),
            (this.init = async () => {
                var i;
                this.isDevEnv ||
                    ((this.publicKey = await this.store.getItem(this.storeKey)),
                    this.publicKey &&
                        cjs$3.toMiliseconds((i = this.publicKey) == null ? void 0 : i.expiresAt) < Date.now() &&
                        (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
            }),
            (this.register = async (i) => {
                if (!gr$1() || this.isDevEnv) return;
                const r = window.location.origin,
                    { id: n, decryptedId: a } = i,
                    c = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r}&id=${n}&decryptedId=${a}`;
                try {
                    const h = ci(),
                        d = this.startAbortTimer(cjs$3.ONE_SECOND * 5),
                        g = await new Promise((m, b) => {
                            const l = () => {
                                window.removeEventListener("message", _), h.body.removeChild(p), b("attestation aborted");
                            };
                            this.abortController.signal.addEventListener("abort", l);
                            const p = h.createElement("iframe");
                            (p.src = c), (p.style.display = "none"), p.addEventListener("error", l, { signal: this.abortController.signal });
                            const _ = (D) => {
                                if (!D.data) return;
                                const E = JSON.parse(D.data);
                                if (E.type === "verify_attestation") {
                                    if (decodeJWT(E.attestation).payload.id !== n) return;
                                    clearInterval(d),
                                        h.body.removeChild(p),
                                        this.abortController.signal.removeEventListener("abort", l),
                                        window.removeEventListener("message", _),
                                        m(E.attestation === null ? "" : E.attestation);
                                }
                            };
                            h.body.appendChild(p), window.addEventListener("message", _, { signal: this.abortController.signal });
                        });
                    return this.logger.debug("jwt attestation", g), g;
                } catch (h) {
                    this.logger.warn(h);
                }
                return "";
            }),
            (this.resolve = async (i) => {
                if (this.isDevEnv) return "";
                const { attestationId: r, hash: n, encryptedId: a } = i;
                if (r === "") {
                    this.logger.debug("resolve: attestationId is empty, skipping");
                    return;
                }
                if (r) {
                    if (decodeJWT(r).payload.id !== a) return;
                    const h = await this.isValidJwtAttestation(r);
                    if (h) {
                        if (!h.isVerified) {
                            this.logger.warn("resolve: jwt attestation: origin url not verified");
                            return;
                        }
                        return h;
                    }
                }
                if (!n) return;
                const c = this.getVerifyUrl(i?.verifyUrl);
                return this.fetchAttestation(n, c);
            }),
            (this.fetchAttestation = async (i, r) => {
                this.logger.debug(`resolving attestation: ${i} from url: ${r}`);
                const n = this.startAbortTimer(cjs$3.ONE_SECOND * 5),
                    a = await fetch(`${r}/attestation/${i}?v2Supported=true`, { signal: this.abortController.signal });
                return clearTimeout(n), a.status === 200 ? await a.json() : void 0;
            }),
            (this.getVerifyUrl = (i) => {
                let r = i || Q$3;
                return Ft.includes(r) || (this.logger.info(`verify url: ${r}, not included in trusted list, assigning default: ${Q$3}`), (r = Q$3)), r;
            }),
            (this.fetchPublicKey = async () => {
                try {
                    this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
                    const i = this.startAbortTimer(cjs$3.FIVE_SECONDS),
                        r = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
                    return clearTimeout(i), await r.json();
                } catch (i) {
                    this.logger.warn(i);
                }
            }),
            (this.persistPublicKey = async (i) => {
                this.logger.debug("persisting public key to local storage", i), await this.store.setItem(this.storeKey, i), (this.publicKey = i);
            }),
            (this.removePublicKey = async () => {
                this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), (this.publicKey = void 0);
            }),
            (this.isValidJwtAttestation = async (i) => {
                const r = await this.getPublicKey();
                try {
                    if (r) return this.validateAttestation(i, r);
                } catch (a) {
                    this.logger.error(a), this.logger.warn("error validating attestation");
                }
                const n = await this.fetchAndPersistPublicKey();
                try {
                    if (n) return this.validateAttestation(i, n);
                } catch (a) {
                    this.logger.error(a), this.logger.warn("error validating attestation");
                }
            }),
            (this.getPublicKey = async () => (this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey())),
            (this.fetchAndPersistPublicKey = async () => {
                if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
                this.fetchPromise = new Promise(async (r) => {
                    const n = await this.fetchPublicKey();
                    n && (await this.persistPublicKey(n), r(n));
                });
                const i = await this.fetchPromise;
                return (this.fetchPromise = void 0), i;
            }),
            (this.validateAttestation = (i, r) => {
                const n = Uu(i, r.publicKey),
                    a = { hasExpired: cjs$3.toMiliseconds(n.exp) < Date.now(), payload: n };
                if (a.hasExpired) throw (this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired"));
                return { origin: a.payload.origin, isScam: a.payload.isScam, isVerified: a.payload.isVerified };
            }),
            (this.logger = E$4(t, this.name)),
            (this.abortController = new AbortController()),
            (this.isDevEnv = bi() && process.env.IS_VITEST),
            this.init();
    }
    get storeKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
    }
    get context() {
        return y$6(this.logger);
    }
    startAbortTimer(e) {
        return (this.abortController = new AbortController()), setTimeout(() => this.abortController.abort(), cjs$3.toMiliseconds(e));
    }
}
class li extends v$5 {
    constructor(e, t) {
        super(e, t),
            (this.projectId = e),
            (this.logger = t),
            (this.context = Ut$1),
            (this.registerDeviceToken = async (s) => {
                const { clientId: i, token: r, notificationType: n, enableEncrypted: a = !1 } = s,
                    c = `${Kt$1}/${this.projectId}/clients`;
                await fetch(c, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ client_id: i, type: n, token: r, always_raw: a }),
                });
            }),
            (this.logger = E$4(t, this.context));
    }
}
var vn = Object.defineProperty,
    ui = Object.getOwnPropertySymbols,
    wn = Object.prototype.hasOwnProperty,
    In$1 = Object.prototype.propertyIsEnumerable,
    di = (o, e, t) => (e in o ? vn(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (o[e] = t)),
    te$2 = (o, e) => {
        for (var t in e || (e = {})) wn.call(e, t) && di(o, t, e[t]);
        if (ui) for (var t of ui(e)) In$1.call(e, t) && di(o, t, e[t]);
        return o;
    };
class gi extends C$3 {
    constructor(e, t, s = !0) {
        super(e, t, s),
            (this.core = e),
            (this.logger = t),
            (this.context = Vt),
            (this.storagePrefix = O$3),
            (this.storageVersion = Bt$1),
            (this.events = new Map()),
            (this.shouldPersist = !1),
            (this.createEvent = (i) => {
                const {
                        event: r = "ERROR",
                        type: n = "",
                        properties: { topic: a, trace: c },
                    } = i,
                    h = Ms$1(),
                    d = this.core.projectId || "",
                    g = Date.now(),
                    m = te$2({ eventId: h, bundleId: d, timestamp: g, props: { event: r, type: n, properties: { topic: a, trace: c } } }, this.setMethods(h));
                return this.telemetryEnabled && (this.events.set(h, m), (this.shouldPersist = !0)), m;
            }),
            (this.getEvent = (i) => {
                const { eventId: r, topic: n } = i;
                if (r) return this.events.get(r);
                const a = Array.from(this.events.values()).find((c) => c.props.properties.topic === n);
                if (a) return te$2(te$2({}, a), this.setMethods(a.eventId));
            }),
            (this.deleteEvent = (i) => {
                const { eventId: r } = i;
                this.events.delete(r), (this.shouldPersist = !0);
            }),
            (this.setEventListeners = () => {
                this.core.heartbeat.on(r$5.pulse, async () => {
                    this.shouldPersist && (await this.persist()),
                        this.events.forEach((i) => {
                            cjs$3.fromMiliseconds(Date.now()) - cjs$3.fromMiliseconds(i.timestamp) > jt$1 &&
                                (this.events.delete(i.eventId), (this.shouldPersist = !0));
                        });
                });
            }),
            (this.setMethods = (i) => ({ addTrace: (r) => this.addTrace(i, r), setError: (r) => this.setError(i, r) })),
            (this.addTrace = (i, r) => {
                const n = this.events.get(i);
                n && (n.props.properties.trace.push(r), this.events.set(i, n), (this.shouldPersist = !0));
            }),
            (this.setError = (i, r) => {
                const n = this.events.get(i);
                n && ((n.props.type = r), (n.timestamp = Date.now()), this.events.set(i, n), (this.shouldPersist = !0));
            }),
            (this.persist = async () => {
                await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), (this.shouldPersist = !1);
            }),
            (this.restore = async () => {
                try {
                    const i = (await this.core.storage.getItem(this.storageKey)) || [];
                    if (!i.length) return;
                    i.forEach((r) => {
                        this.events.set(r.eventId, te$2(te$2({}, r), this.setMethods(r.eventId)));
                    });
                } catch (i) {
                    this.logger.warn(i);
                }
            }),
            (this.submit = async () => {
                if (!this.telemetryEnabled || this.events.size === 0) return;
                const i = [];
                for (const [r, n] of this.events) n.props.type && i.push(n);
                if (i.length !== 0)
                    try {
                        if (
                            (await fetch(`${qt$1}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${Te$1}`, { method: "POST", body: JSON.stringify(i) }))
                                .ok
                        )
                            for (const r of i) this.events.delete(r.eventId), (this.shouldPersist = !0);
                    } catch (r) {
                        this.logger.warn(r);
                    }
            }),
            (this.logger = E$4(t, this.context)),
            s
                ? this.restore().then(async () => {
                      await this.submit(), this.setEventListeners();
                  })
                : this.persist();
    }
    get storageKey() {
        return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
    }
}
var Tn = Object.defineProperty,
    pi = Object.getOwnPropertySymbols,
    Cn = Object.prototype.hasOwnProperty,
    Sn = Object.prototype.propertyIsEnumerable,
    yi = (o, e, t) => (e in o ? Tn(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (o[e] = t)),
    Di = (o, e) => {
        for (var t in e || (e = {})) Cn.call(e, t) && yi(o, t, e[t]);
        if (pi) for (var t of pi(e)) Sn.call(e, t) && yi(o, t, e[t]);
        return o;
    };
let ae$2 = class ae extends n$7 {
    constructor(e) {
        var t;
        super(e),
            (this.protocol = Ee$1),
            (this.version = ve$1),
            (this.name = oe$3),
            (this.events = new eventsExports.EventEmitter()),
            (this.initialized = !1),
            (this.on = (n, a) => this.events.on(n, a)),
            (this.once = (n, a) => this.events.once(n, a)),
            (this.off = (n, a) => this.events.off(n, a)),
            (this.removeListener = (n, a) => this.events.removeListener(n, a)),
            (this.dispatchEnvelope = ({ topic: n, message: a, sessionExists: c }) => {
                if (!n || !a) return;
                const h = { topic: n, message: a, publishedAt: Date.now(), transportType: F$3.link_mode };
                this.relayer.onLinkMessageEvent(h, { sessionExists: c });
            }),
            (this.projectId = e?.projectId),
            (this.relayUrl = e?.relayUrl || Ie$1),
            (this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : "");
        const s = k$2({ level: typeof e?.logger == "string" && e.logger ? e.logger : lt$2.logger }),
            { logger: i, chunkLoggerController: r } = A$3({ opts: s, maxSizeInBytes: e?.maxLogBlobSizeInBytes, loggerOverride: e?.logger });
        (this.logChunkController = r),
            (t = this.logChunkController) != null &&
                t.downloadLogsBlobInBrowser &&
                (window.downloadLogsBlobInBrowser = async () => {
                    var n, a;
                    (n = this.logChunkController) != null &&
                        n.downloadLogsBlobInBrowser &&
                        ((a = this.logChunkController) == null || a.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
                }),
            (this.logger = E$4(i, this.name)),
            (this.heartbeat = new i$5()),
            (this.crypto = new Ht$1(this, this.logger, e?.keychain)),
            (this.history = new oi(this, this.logger)),
            (this.expirer = new ai(this, this.logger)),
            (this.storage = e != null && e.storage ? e.storage : new h$6(Di(Di({}, ut$2), e?.storageOptions))),
            (this.relayer = new ei({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId })),
            (this.pairing = new ni(this, this.logger)),
            (this.verify = new hi(this, this.logger, this.storage)),
            (this.echoClient = new li(this.projectId || "", this.logger)),
            (this.linkModeSupportedApps = []),
            (this.eventClient = new gi(this, this.logger, e?.telemetryEnabled));
    }
    static async init(e) {
        const t = new ae(e);
        await t.initialize();
        const s = await t.crypto.getClientId();
        return await t.storage.setItem(Ct, s), t;
    }
    get context() {
        return y$6(this.logger);
    }
    async start() {
        this.initialized || (await this.initialize());
    }
    async getLogsBlob() {
        var e;
        return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({ clientId: await this.crypto.getClientId() });
    }
    async addLinkModeSupportedApp(e) {
        this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Ce$2, this.linkModeSupportedApps));
    }
    async initialize() {
        this.logger.trace("Initialized");
        try {
            await this.crypto.init(),
                await this.history.init(),
                await this.expirer.init(),
                await this.relayer.init(),
                await this.heartbeat.init(),
                await this.pairing.init(),
                (this.linkModeSupportedApps = (await this.storage.getItem(Ce$2)) || []),
                (this.initialized = !0),
                this.logger.info("Core Initialization Success");
        } catch (e) {
            throw (this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e);
        }
    }
};
const Pn = ae$2;

const be$1 = "wc",
    Ce$1 = 2,
    De$1 = "client",
    ye$1 = `${be$1}@${Ce$1}:${De$1}:`,
    we$1 = { name: De$1, logger: "error", controller: !1, relayUrl: "wss://relay.walletconnect.com" },
    Le$1 = "WALLETCONNECT_DEEPLINK_CHOICE",
    st$1 = "proposal",
    it$1 = "Proposal expired",
    rt$1 = "session",
    z$2 = cjs$3.SEVEN_DAYS,
    nt$1 = "engine",
    v$4 = {
        wc_sessionPropose: {
            req: { ttl: cjs$3.FIVE_MINUTES, prompt: !0, tag: 1100 },
            res: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1101 },
            reject: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1120 },
            autoReject: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1121 },
        },
        wc_sessionSettle: { req: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1102 }, res: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1103 } },
        wc_sessionUpdate: { req: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1104 }, res: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1105 } },
        wc_sessionExtend: { req: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1106 }, res: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1107 } },
        wc_sessionRequest: { req: { ttl: cjs$3.FIVE_MINUTES, prompt: !0, tag: 1108 }, res: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1109 } },
        wc_sessionEvent: { req: { ttl: cjs$3.FIVE_MINUTES, prompt: !0, tag: 1110 }, res: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1111 } },
        wc_sessionDelete: { req: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1112 }, res: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1113 } },
        wc_sessionPing: { req: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1114 }, res: { ttl: cjs$3.ONE_DAY, prompt: !1, tag: 1115 } },
        wc_sessionAuthenticate: {
            req: { ttl: cjs$3.ONE_HOUR, prompt: !0, tag: 1116 },
            res: { ttl: cjs$3.ONE_HOUR, prompt: !1, tag: 1117 },
            reject: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1118 },
            autoReject: { ttl: cjs$3.FIVE_MINUTES, prompt: !1, tag: 1119 },
        },
    },
    me$1 = { min: cjs$3.FIVE_MINUTES, max: cjs$3.SEVEN_DAYS },
    L$5 = { idle: "IDLE", active: "ACTIVE" },
    ot$1 = "request",
    at$1 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"],
    ct$1 = "wc",
    lt$1 = "auth",
    pt$1 = "authKeys",
    ht = "pairingTopics",
    dt$1 = "requests",
    oe$2 = `${ct$1}@${1.5}:${lt$1}:`,
    ae$1 = `${oe$2}:PUB_KEY`;
var gs = Object.defineProperty,
    ys = Object.defineProperties,
    ws = Object.getOwnPropertyDescriptors,
    ut$1 = Object.getOwnPropertySymbols,
    ms = Object.prototype.hasOwnProperty,
    _s = Object.prototype.propertyIsEnumerable,
    gt = (q, o, e) => (o in q ? gs(q, o, { enumerable: !0, configurable: !0, writable: !0, value: e }) : (q[o] = e)),
    I$2 = (q, o) => {
        for (var e in o || (o = {})) ms.call(o, e) && gt(q, e, o[e]);
        if (ut$1) for (var e of ut$1(o)) _s.call(o, e) && gt(q, e, o[e]);
        return q;
    },
    V$2 = (q, o) => ys(q, ws(o));
class Es extends M$3 {
    constructor(o) {
        super(o),
            (this.name = nt$1),
            (this.events = new Gg()),
            (this.initialized = !1),
            (this.requestQueue = { state: L$5.idle, queue: [] }),
            (this.sessionRequestQueue = { state: L$5.idle, queue: [] }),
            (this.requestQueueDelay = cjs$3.ONE_SECOND),
            (this.expectedPairingMethodMap = new Map()),
            (this.recentlyDeletedMap = new Map()),
            (this.recentlyDeletedLimit = 200),
            (this.relayMessageCache = []),
            (this.init = async () => {
                this.initialized ||
                    (await this.cleanup(),
                    this.registerRelayerEvents(),
                    this.registerExpirerEvents(),
                    this.registerPairingEvents(),
                    await this.registerLinkModeListeners(),
                    this.client.core.pairing.register({ methods: Object.keys(v$4) }),
                    (this.initialized = !0),
                    setTimeout(() => {
                        (this.sessionRequestQueue.queue = this.getPendingSessionRequests()), this.processSessionRequestQueue();
                    }, cjs$3.toMiliseconds(this.requestQueueDelay)));
            }),
            (this.connect = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow();
                const t = V$2(I$2({}, e), { requiredNamespaces: e.requiredNamespaces || {}, optionalNamespaces: e.optionalNamespaces || {} });
                await this.isValidConnect(t);
                const { pairingTopic: s, requiredNamespaces: i, optionalNamespaces: r, sessionProperties: n, relays: a } = t;
                let c = s,
                    h,
                    p = !1;
                try {
                    c && (p = this.client.core.pairing.pairings.get(c).active);
                } catch (E) {
                    throw (this.client.logger.error(`connect() -> pairing.get(${c}) failed`), E);
                }
                if (!c || !p) {
                    const { topic: E, uri: S } = await this.client.core.pairing.create();
                    (c = E), (h = S);
                }
                if (!c) {
                    const { message: E } = xe$1("NO_MATCHING_KEY", `connect() pairing topic: ${c}`);
                    throw new Error(E);
                }
                const d = await this.client.core.crypto.generateKeyPair(),
                    l = v$4.wc_sessionPropose.req.ttl || cjs$3.FIVE_MINUTES,
                    w = ms$2(l),
                    m = I$2(
                        {
                            requiredNamespaces: i,
                            optionalNamespaces: r,
                            relays: a ?? [{ protocol: _t$1 }],
                            proposer: { publicKey: d, metadata: this.client.metadata },
                            expiryTimestamp: w,
                            pairingTopic: c,
                        },
                        n && { sessionProperties: n }
                    ),
                    { reject: y, resolve: _, done: R } = ls(l, it$1);
                this.events.once(bs$1("session_connect"), async ({ error: E, session: S }) => {
                    if (E) y(E);
                    else if (S) {
                        S.self.publicKey = d;
                        const M = V$2(I$2({}, S), {
                            pairingTopic: m.pairingTopic,
                            requiredNamespaces: m.requiredNamespaces,
                            optionalNamespaces: m.optionalNamespaces,
                            transportType: F$3.relay,
                        });
                        await this.client.session.set(S.topic, M),
                            await this.setExpiry(S.topic, S.expiry),
                            c && (await this.client.core.pairing.updateMetadata({ topic: c, metadata: S.peer.metadata })),
                            this.cleanupDuplicatePairings(M),
                            _(M);
                    }
                });
                const x = await this.sendRequest({ topic: c, method: "wc_sessionPropose", params: m, throwOnFailedPublish: !0 });
                return await this.setProposal(x, I$2({ id: x }, m)), { uri: h, approval: R };
            }),
            (this.pair = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow();
                try {
                    return await this.client.core.pairing.pair(e);
                } catch (t) {
                    throw (this.client.logger.error("pair() failed"), t);
                }
            }),
            (this.approve = async (e) => {
                var t, s, i;
                const r = this.client.core.eventClient.createEvent({
                    properties: { topic: (t = e?.id) == null ? void 0 : t.toString(), trace: [Hr.session_approve_started] },
                });
                try {
                    this.isInitialized(), await this.confirmOnlineStateOrThrow();
                } catch (N) {
                    throw (r.setError(Yr.no_internet_connection), N);
                }
                try {
                    await this.isValidProposalId(e?.id);
                } catch (N) {
                    throw (this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`), r.setError(Yr.proposal_not_found), N);
                }
                try {
                    await this.isValidApprove(e);
                } catch (N) {
                    throw (this.client.logger.error("approve() -> isValidApprove() failed"), r.setError(Yr.session_approve_namespace_validation_failure), N);
                }
                const { id: n, relayProtocol: a, namespaces: c, sessionProperties: h, sessionConfig: p } = e,
                    d = this.client.proposal.get(n);
                this.client.core.eventClient.deleteEvent({ eventId: r.eventId });
                const { pairingTopic: l, proposer: w, requiredNamespaces: m, optionalNamespaces: y } = d;
                let _ = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({ topic: l });
                _ ||
                    (_ =
                        (i = this.client.core.eventClient) == null
                            ? void 0
                            : i.createEvent({
                                  type: Hr.session_approve_started,
                                  properties: { topic: l, trace: [Hr.session_approve_started, Hr.session_namespaces_validation_success] },
                              }));
                const R = await this.client.core.crypto.generateKeyPair(),
                    x = w.publicKey,
                    E = await this.client.core.crypto.generateSharedKey(R, x),
                    S = I$2(
                        I$2(
                            { relay: { protocol: a ?? "irn" }, namespaces: c, controller: { publicKey: R, metadata: this.client.metadata }, expiry: ms$2(z$2) },
                            h && { sessionProperties: h }
                        ),
                        p && { sessionConfig: p }
                    ),
                    M = F$3.relay;
                _.addTrace(Hr.subscribing_session_topic);
                try {
                    await this.client.core.relayer.subscribe(E, { transportType: M });
                } catch (N) {
                    throw (_.setError(Yr.subscribe_session_topic_failure), N);
                }
                _.addTrace(Hr.subscribe_session_topic_success);
                const W = V$2(I$2({}, S), {
                    topic: E,
                    requiredNamespaces: m,
                    optionalNamespaces: y,
                    pairingTopic: l,
                    acknowledged: !1,
                    self: S.controller,
                    peer: { publicKey: w.publicKey, metadata: w.metadata },
                    controller: R,
                    transportType: F$3.relay,
                });
                await this.client.session.set(E, W), _.addTrace(Hr.store_session);
                try {
                    _.addTrace(Hr.publishing_session_settle),
                        await this.sendRequest({ topic: E, method: "wc_sessionSettle", params: S, throwOnFailedPublish: !0 }).catch((N) => {
                            throw (_?.setError(Yr.session_settle_publish_failure), N);
                        }),
                        _.addTrace(Hr.session_settle_publish_success),
                        _.addTrace(Hr.publishing_session_approve),
                        await this.sendResult({
                            id: n,
                            topic: l,
                            result: { relay: { protocol: a ?? "irn" }, responderPublicKey: R },
                            throwOnFailedPublish: !0,
                        }).catch((N) => {
                            throw (_?.setError(Yr.session_approve_publish_failure), N);
                        }),
                        _.addTrace(Hr.session_approve_publish_success);
                } catch (N) {
                    throw (
                        (this.client.logger.error(N),
                        this.client.session.delete(E, er$2("USER_DISCONNECTED")),
                        await this.client.core.relayer.unsubscribe(E),
                        N)
                    );
                }
                return (
                    this.client.core.eventClient.deleteEvent({ eventId: _.eventId }),
                    await this.client.core.pairing.updateMetadata({ topic: l, metadata: w.metadata }),
                    await this.client.proposal.delete(n, er$2("USER_DISCONNECTED")),
                    await this.client.core.pairing.activate({ topic: l }),
                    await this.setExpiry(E, ms$2(z$2)),
                    { topic: E, acknowledged: () => Promise.resolve(this.client.session.get(E)) }
                );
            }),
            (this.reject = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow();
                try {
                    await this.isValidReject(e);
                } catch (r) {
                    throw (this.client.logger.error("reject() -> isValidReject() failed"), r);
                }
                const { id: t, reason: s } = e;
                let i;
                try {
                    i = this.client.proposal.get(t).pairingTopic;
                } catch (r) {
                    throw (this.client.logger.error(`reject() -> proposal.get(${t}) failed`), r);
                }
                i &&
                    (await this.sendError({ id: t, topic: i, error: s, rpcOpts: v$4.wc_sessionPropose.reject }),
                    await this.client.proposal.delete(t, er$2("USER_DISCONNECTED")));
            }),
            (this.update = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow();
                try {
                    await this.isValidUpdate(e);
                } catch (p) {
                    throw (this.client.logger.error("update() -> isValidUpdate() failed"), p);
                }
                const { topic: t, namespaces: s } = e,
                    { done: i, resolve: r, reject: n } = ls(),
                    a = payloadId(),
                    c = getBigIntRpcId().toString(),
                    h = this.client.session.get(t).namespaces;
                return (
                    this.events.once(bs$1("session_update", a), ({ error: p }) => {
                        p ? n(p) : r();
                    }),
                    await this.client.session.update(t, { namespaces: s }),
                    await this.sendRequest({
                        topic: t,
                        method: "wc_sessionUpdate",
                        params: { namespaces: s },
                        throwOnFailedPublish: !0,
                        clientRpcId: a,
                        relayRpcId: c,
                    }).catch((p) => {
                        this.client.logger.error(p), this.client.session.update(t, { namespaces: h }), n(p);
                    }),
                    { acknowledged: i }
                );
            }),
            (this.extend = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow();
                try {
                    await this.isValidExtend(e);
                } catch (a) {
                    throw (this.client.logger.error("extend() -> isValidExtend() failed"), a);
                }
                const { topic: t } = e,
                    s = payloadId(),
                    { done: i, resolve: r, reject: n } = ls();
                return (
                    this.events.once(bs$1("session_extend", s), ({ error: a }) => {
                        a ? n(a) : r();
                    }),
                    await this.setExpiry(t, ms$2(z$2)),
                    this.sendRequest({ topic: t, method: "wc_sessionExtend", params: {}, clientRpcId: s, throwOnFailedPublish: !0 }).catch((a) => {
                        n(a);
                    }),
                    { acknowledged: i }
                );
            }),
            (this.request = async (e) => {
                this.isInitialized();
                try {
                    await this.isValidRequest(e);
                } catch (w) {
                    throw (this.client.logger.error("request() -> isValidRequest() failed"), w);
                }
                const { chainId: t, request: s, topic: i, expiry: r = v$4.wc_sessionRequest.req.ttl } = e,
                    n = this.client.session.get(i);
                n?.transportType === F$3.relay && (await this.confirmOnlineStateOrThrow());
                const a = payloadId(),
                    c = getBigIntRpcId().toString(),
                    { done: h, resolve: p, reject: d } = ls(r, "Request expired. Please try again.");
                this.events.once(bs$1("session_request", a), ({ error: w, result: m }) => {
                    w ? d(w) : p(m);
                });
                const l = this.getAppLinkIfEnabled(n.peer.metadata, n.transportType);
                return l
                    ? (await this.sendRequest({
                          clientRpcId: a,
                          relayRpcId: c,
                          topic: i,
                          method: "wc_sessionRequest",
                          params: { request: V$2(I$2({}, s), { expiryTimestamp: ms$2(r) }), chainId: t },
                          expiry: r,
                          throwOnFailedPublish: !0,
                          appLink: l,
                      }).catch((w) => d(w)),
                      this.client.events.emit("session_request_sent", { topic: i, request: s, chainId: t, id: a }),
                      await h())
                    : await Promise.all([
                          new Promise(async (w) => {
                              await this.sendRequest({
                                  clientRpcId: a,
                                  relayRpcId: c,
                                  topic: i,
                                  method: "wc_sessionRequest",
                                  params: { request: V$2(I$2({}, s), { expiryTimestamp: ms$2(r) }), chainId: t },
                                  expiry: r,
                                  throwOnFailedPublish: !0,
                              }).catch((m) => d(m)),
                                  this.client.events.emit("session_request_sent", { topic: i, request: s, chainId: t, id: a }),
                                  w();
                          }),
                          new Promise(async (w) => {
                              var m;
                              if (!((m = n.sessionConfig) != null && m.disableDeepLink)) {
                                  const y = await ws$2(this.client.core.storage, Le$1);
                                  ys$2({ id: a, topic: i, wcDeepLink: y });
                              }
                              w();
                          }),
                          h(),
                      ]).then((w) => w[2]);
            }),
            (this.respond = async (e) => {
                this.isInitialized(), await this.isValidRespond(e);
                const { topic: t, response: s } = e,
                    { id: i } = s,
                    r = this.client.session.get(t);
                r.transportType === F$3.relay && (await this.confirmOnlineStateOrThrow());
                const n = this.getAppLinkIfEnabled(r.peer.metadata, r.transportType);
                isJsonRpcResult(s)
                    ? await this.sendResult({ id: i, topic: t, result: s.result, throwOnFailedPublish: !0, appLink: n })
                    : isJsonRpcError(s) && (await this.sendError({ id: i, topic: t, error: s.error, appLink: n })),
                    this.cleanupAfterResponse(e);
            }),
            (this.ping = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow();
                try {
                    await this.isValidPing(e);
                } catch (s) {
                    throw (this.client.logger.error("ping() -> isValidPing() failed"), s);
                }
                const { topic: t } = e;
                if (this.client.session.keys.includes(t)) {
                    const s = payloadId(),
                        i = getBigIntRpcId().toString(),
                        { done: r, resolve: n, reject: a } = ls();
                    this.events.once(bs$1("session_ping", s), ({ error: c }) => {
                        c ? a(c) : n();
                    }),
                        await Promise.all([
                            this.sendRequest({ topic: t, method: "wc_sessionPing", params: {}, throwOnFailedPublish: !0, clientRpcId: s, relayRpcId: i }),
                            r(),
                        ]);
                } else this.client.core.pairing.pairings.keys.includes(t) && (await this.client.core.pairing.ping({ topic: t }));
            }),
            (this.emit = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e);
                const { topic: t, event: s, chainId: i } = e,
                    r = getBigIntRpcId().toString();
                await this.sendRequest({ topic: t, method: "wc_sessionEvent", params: { event: s, chainId: i }, throwOnFailedPublish: !0, relayRpcId: r });
            }),
            (this.disconnect = async (e) => {
                this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e);
                const { topic: t } = e;
                if (this.client.session.keys.includes(t))
                    await this.sendRequest({ topic: t, method: "wc_sessionDelete", params: er$2("USER_DISCONNECTED"), throwOnFailedPublish: !0 }),
                        await this.deleteSession({ topic: t, emitEvent: !1 });
                else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({ topic: t });
                else {
                    const { message: s } = xe$1("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t}`);
                    throw new Error(s);
                }
            }),
            (this.find = (e) => (this.isInitialized(), this.client.session.getAll().filter((t) => fh(t, e)))),
            (this.getPendingSessionRequests = () => this.client.pendingRequest.getAll()),
            (this.authenticate = async (e, t) => {
                var s;
                this.isInitialized(), this.isValidAuthenticate(e);
                const i = t && this.client.core.linkModeSupportedApps.includes(t) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode),
                    r = i ? F$3.link_mode : F$3.relay;
                r === F$3.relay && (await this.confirmOnlineStateOrThrow());
                const { chains: n, statement: a = "", uri: c, domain: h, nonce: p, type: d, exp: l, nbf: w, methods: m = [], expiry: y } = e,
                    _ = [...(e.resources || [])],
                    { topic: R, uri: x } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r });
                this.client.logger.info({ message: "Generated new pairing", pairing: { topic: R, uri: x } });
                const E = await this.client.core.crypto.generateKeyPair(),
                    S = Nu(E);
                if (
                    (await Promise.all([
                        this.client.auth.authKeys.set(ae$1, { responseTopic: S, publicKey: E }),
                        this.client.auth.pairingTopics.set(S, { topic: S, pairingTopic: R }),
                    ]),
                    await this.client.core.relayer.subscribe(S, { transportType: r }),
                    this.client.logger.info(`sending request to new pairing topic: ${R}`),
                    m.length > 0)
                ) {
                    const { namespace: O } = mn$1(n[0]);
                    let T = mu(O, "request", m);
                    Vr(_) && (T = Au(T, _.pop())), _.push(T);
                }
                const M = y && y > v$4.wc_sessionAuthenticate.req.ttl ? y : v$4.wc_sessionAuthenticate.req.ttl,
                    W = {
                        authPayload: {
                            type: d ?? "caip122",
                            chains: n,
                            statement: a,
                            aud: c,
                            domain: h,
                            version: "1",
                            nonce: p,
                            iat: new Date().toISOString(),
                            exp: l,
                            nbf: w,
                            resources: _,
                        },
                        requester: { publicKey: E, metadata: this.client.metadata },
                        expiryTimestamp: ms$2(M),
                    },
                    N = { eip155: { chains: n, methods: [...new Set(["personal_sign", ...m])], events: ["chainChanged", "accountsChanged"] } },
                    Ve = {
                        requiredNamespaces: {},
                        optionalNamespaces: N,
                        relays: [{ protocol: "irn" }],
                        pairingTopic: R,
                        proposer: { publicKey: E, metadata: this.client.metadata },
                        expiryTimestamp: ms$2(v$4.wc_sessionPropose.req.ttl),
                    },
                    { done: wt, resolve: xe, reject: Ee } = ls(M, "Request expired"),
                    ce = async ({ error: O, session: T }) => {
                        if ((this.events.off(bs$1("session_request", G), Re), O)) Ee(O);
                        else if (T) {
                            (T.self.publicKey = E),
                                await this.client.session.set(T.topic, T),
                                await this.setExpiry(T.topic, T.expiry),
                                R && (await this.client.core.pairing.updateMetadata({ topic: R, metadata: T.peer.metadata }));
                            const le = this.client.session.get(T.topic);
                            await this.deleteProposal(Z), xe({ session: le });
                        }
                    },
                    Re = async (O) => {
                        var T, le, Me;
                        if ((await this.deletePendingAuthRequest(G, { message: "fulfilled", code: 0 }), O.error)) {
                            const te = er$2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
                            return O.error.code === te.code ? void 0 : (this.events.off(bs$1("session_connect"), ce), Ee(O.error.message));
                        }
                        await this.deleteProposal(Z), this.events.off(bs$1("session_connect"), ce);
                        const { cacaos: ke, responder: j } = O.result,
                            Ie = [],
                            $e = [];
                        for (const te of ke) {
                            (await lu({ cacao: te, projectId: this.client.core.projectId })) ||
                                (this.client.logger.error(te, "Signature verification failed"),
                                Ee(er$2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
                            const { p: fe } = te,
                                ve = Vr(fe.resources),
                                Ke = [cu(fe.iss)],
                                mt = Yi(fe.iss);
                            if (ve) {
                                const qe = bu(ve),
                                    _t = yu(ve);
                                Ie.push(...qe), Ke.push(..._t);
                            }
                            for (const qe of Ke) $e.push(`${qe}:${mt}`);
                        }
                        const ee = await this.client.core.crypto.generateSharedKey(E, j.publicKey);
                        let pe;
                        Ie.length > 0 &&
                            ((pe = {
                                topic: ee,
                                acknowledged: !0,
                                self: { publicKey: E, metadata: this.client.metadata },
                                peer: j,
                                controller: j.publicKey,
                                expiry: ms$2(z$2),
                                requiredNamespaces: {},
                                optionalNamespaces: {},
                                relay: { protocol: "irn" },
                                pairingTopic: R,
                                namespaces: nh([...new Set(Ie)], [...new Set($e)]),
                                transportType: r,
                            }),
                            await this.client.core.relayer.subscribe(ee, { transportType: r }),
                            await this.client.session.set(ee, pe),
                            R && (await this.client.core.pairing.updateMetadata({ topic: R, metadata: j.metadata })),
                            (pe = this.client.session.get(ee))),
                            (T = this.client.metadata.redirect) != null &&
                                T.linkMode &&
                                (le = j.metadata.redirect) != null &&
                                le.linkMode &&
                                (Me = j.metadata.redirect) != null &&
                                Me.universal &&
                                t &&
                                (this.client.core.addLinkModeSupportedApp(j.metadata.redirect.universal),
                                this.client.session.update(ee, { transportType: F$3.link_mode })),
                            xe({ auths: ke, session: pe });
                    },
                    G = payloadId(),
                    Z = payloadId();
                this.events.once(bs$1("session_connect"), ce), this.events.once(bs$1("session_request", G), Re);
                let Se;
                try {
                    if (i) {
                        const O = formatJsonRpcRequest("wc_sessionAuthenticate", W, G);
                        this.client.core.history.set(R, O);
                        const T = await this.client.core.crypto.encode("", O, { type: Sr$1, encoding: wu });
                        Se = Yu(t, R, T);
                    } else
                        await Promise.all([
                            this.sendRequest({
                                topic: R,
                                method: "wc_sessionAuthenticate",
                                params: W,
                                expiry: e.expiry,
                                throwOnFailedPublish: !0,
                                clientRpcId: G,
                            }),
                            this.sendRequest({
                                topic: R,
                                method: "wc_sessionPropose",
                                params: Ve,
                                expiry: v$4.wc_sessionPropose.req.ttl,
                                throwOnFailedPublish: !0,
                                clientRpcId: Z,
                            }),
                        ]);
                } catch (O) {
                    throw (this.events.off(bs$1("session_connect"), ce), this.events.off(bs$1("session_request", G), Re), O);
                }
                return (
                    await this.setProposal(Z, I$2({ id: Z }, Ve)),
                    await this.setAuthRequest(G, { request: V$2(I$2({}, W), { verifyContext: {} }), pairingTopic: R, transportType: r }),
                    { uri: Se ?? x, response: wt }
                );
            }),
            (this.approveSessionAuthenticate = async (e) => {
                const { id: t, auths: s } = e,
                    i = this.client.core.eventClient.createEvent({ properties: { topic: t.toString(), trace: [Jr.authenticated_session_approve_started] } });
                try {
                    this.isInitialized();
                } catch (y) {
                    throw (i.setError(Wr.no_internet_connection), y);
                }
                const r = this.getPendingAuthRequest(t);
                if (!r) throw (i.setError(Wr.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t}`));
                const n = r.transportType || F$3.relay;
                n === F$3.relay && (await this.confirmOnlineStateOrThrow());
                const a = r.requester.publicKey,
                    c = await this.client.core.crypto.generateKeyPair(),
                    h = Nu(a),
                    p = { type: pr$2, receiverPublicKey: a, senderPublicKey: c },
                    d = [],
                    l = [];
                for (const y of s) {
                    if (!(await lu({ cacao: y, projectId: this.client.core.projectId }))) {
                        i.setError(Wr.invalid_cacao);
                        const S = er$2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
                        throw (await this.sendError({ id: t, topic: h, error: S, encodeOpts: p }), new Error(S.message));
                    }
                    i.addTrace(Jr.cacaos_verified);
                    const { p: _ } = y,
                        R = Vr(_.resources),
                        x = [cu(_.iss)],
                        E = Yi(_.iss);
                    if (R) {
                        const S = bu(R),
                            M = yu(R);
                        d.push(...S), x.push(...M);
                    }
                    for (const S of x) l.push(`${S}:${E}`);
                }
                const w = await this.client.core.crypto.generateSharedKey(c, a);
                i.addTrace(Jr.create_authenticated_session_topic);
                let m;
                if (d?.length > 0) {
                    (m = {
                        topic: w,
                        acknowledged: !0,
                        self: { publicKey: c, metadata: this.client.metadata },
                        peer: { publicKey: a, metadata: r.requester.metadata },
                        controller: a,
                        expiry: ms$2(z$2),
                        authentication: s,
                        requiredNamespaces: {},
                        optionalNamespaces: {},
                        relay: { protocol: "irn" },
                        pairingTopic: r.pairingTopic,
                        namespaces: nh([...new Set(d)], [...new Set(l)]),
                        transportType: n,
                    }),
                        i.addTrace(Jr.subscribing_authenticated_session_topic);
                    try {
                        await this.client.core.relayer.subscribe(w, { transportType: n });
                    } catch (y) {
                        throw (i.setError(Wr.subscribe_authenticated_session_topic_failure), y);
                    }
                    i.addTrace(Jr.subscribe_authenticated_session_topic_success),
                        await this.client.session.set(w, m),
                        i.addTrace(Jr.store_authenticated_session),
                        await this.client.core.pairing.updateMetadata({ topic: r.pairingTopic, metadata: r.requester.metadata });
                }
                i.addTrace(Jr.publishing_authenticated_session_approve);
                try {
                    await this.sendResult({
                        topic: h,
                        id: t,
                        result: { cacaos: s, responder: { publicKey: c, metadata: this.client.metadata } },
                        encodeOpts: p,
                        throwOnFailedPublish: !0,
                        appLink: this.getAppLinkIfEnabled(r.requester.metadata, n),
                    });
                } catch (y) {
                    throw (i.setError(Wr.authenticated_session_approve_publish_failure), y);
                }
                return (
                    await this.client.auth.requests.delete(t, { message: "fulfilled", code: 0 }),
                    await this.client.core.pairing.activate({ topic: r.pairingTopic }),
                    this.client.core.eventClient.deleteEvent({ eventId: i.eventId }),
                    { session: m }
                );
            }),
            (this.rejectSessionAuthenticate = async (e) => {
                this.isInitialized();
                const { id: t, reason: s } = e,
                    i = this.getPendingAuthRequest(t);
                if (!i) throw new Error(`Could not find pending auth request with id ${t}`);
                i.transportType === F$3.relay && (await this.confirmOnlineStateOrThrow());
                const r = i.requester.publicKey,
                    n = await this.client.core.crypto.generateKeyPair(),
                    a = Nu(r),
                    c = { type: pr$2, receiverPublicKey: r, senderPublicKey: n };
                await this.sendError({
                    id: t,
                    topic: a,
                    error: s,
                    encodeOpts: c,
                    rpcOpts: v$4.wc_sessionAuthenticate.reject,
                    appLink: this.getAppLinkIfEnabled(i.requester.metadata, i.transportType),
                }),
                    await this.client.auth.requests.delete(t, { message: "rejected", code: 0 }),
                    await this.client.proposal.delete(t, er$2("USER_DISCONNECTED"));
            }),
            (this.formatAuthMessage = (e) => {
                this.isInitialized();
                const { request: t, iss: s } = e;
                return Jf(t, s);
            }),
            (this.processRelayMessageCache = () => {
                setTimeout(async () => {
                    if (this.relayMessageCache.length !== 0)
                        for (; this.relayMessageCache.length > 0; )
                            try {
                                const e = this.relayMessageCache.shift();
                                e && (await this.onRelayMessage(e));
                            } catch (e) {
                                this.client.logger.error(e);
                            }
                }, 50);
            }),
            (this.cleanupDuplicatePairings = async (e) => {
                if (e.pairingTopic)
                    try {
                        const t = this.client.core.pairing.pairings.get(e.pairingTopic),
                            s = this.client.core.pairing.pairings.getAll().filter((i) => {
                                var r, n;
                                return (
                                    ((r = i.peerMetadata) == null ? void 0 : r.url) &&
                                    ((n = i.peerMetadata) == null ? void 0 : n.url) === e.peer.metadata.url &&
                                    i.topic &&
                                    i.topic !== t.topic
                                );
                            });
                        if (s.length === 0) return;
                        this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`),
                            await Promise.all(s.map((i) => this.client.core.pairing.disconnect({ topic: i.topic }))),
                            this.client.logger.info("Duplicate pairings clean up finished");
                    } catch (t) {
                        this.client.logger.error(t);
                    }
            }),
            (this.deleteSession = async (e) => {
                var t;
                const { topic: s, expirerHasDeleted: i = !1, emitEvent: r = !0, id: n = 0 } = e,
                    { self: a } = this.client.session.get(s);
                await this.client.core.relayer.unsubscribe(s),
                    await this.client.session.delete(s, er$2("USER_DISCONNECTED")),
                    this.addToRecentlyDeleted(s, "session"),
                    this.client.core.crypto.keychain.has(a.publicKey) && (await this.client.core.crypto.deleteKeyPair(a.publicKey)),
                    this.client.core.crypto.keychain.has(s) && (await this.client.core.crypto.deleteSymKey(s)),
                    i || this.client.core.expirer.del(s),
                    this.client.core.storage.removeItem(Le$1).catch((c) => this.client.logger.warn(c)),
                    this.getPendingSessionRequests().forEach((c) => {
                        c.topic === s && this.deletePendingSessionRequest(c.id, er$2("USER_DISCONNECTED"));
                    }),
                    s === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = L$5.idle),
                    r && this.client.events.emit("session_delete", { id: n, topic: s });
            }),
            (this.deleteProposal = async (e, t) => {
                if (t)
                    try {
                        const s = this.client.proposal.get(e),
                            i = this.client.core.eventClient.getEvent({ topic: s.pairingTopic });
                        i?.setError(Yr.proposal_expired);
                    } catch {}
                await Promise.all([this.client.proposal.delete(e, er$2("USER_DISCONNECTED")), t ? Promise.resolve() : this.client.core.expirer.del(e)]),
                    this.addToRecentlyDeleted(e, "proposal");
            }),
            (this.deletePendingSessionRequest = async (e, t, s = !1) => {
                await Promise.all([this.client.pendingRequest.delete(e, t), s ? Promise.resolve() : this.client.core.expirer.del(e)]),
                    this.addToRecentlyDeleted(e, "request"),
                    (this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i) => i.id !== e)),
                    s && ((this.sessionRequestQueue.state = L$5.idle), this.client.events.emit("session_request_expire", { id: e }));
            }),
            (this.deletePendingAuthRequest = async (e, t, s = !1) => {
                await Promise.all([this.client.auth.requests.delete(e, t), s ? Promise.resolve() : this.client.core.expirer.del(e)]);
            }),
            (this.setExpiry = async (e, t) => {
                this.client.session.keys.includes(e) && (this.client.core.expirer.set(e, t), await this.client.session.update(e, { expiry: t }));
            }),
            (this.setProposal = async (e, t) => {
                this.client.core.expirer.set(e, ms$2(v$4.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e, t);
            }),
            (this.setAuthRequest = async (e, t) => {
                const { request: s, pairingTopic: i, transportType: r = F$3.relay } = t;
                this.client.core.expirer.set(e, s.expiryTimestamp),
                    await this.client.auth.requests.set(e, {
                        authPayload: s.authPayload,
                        requester: s.requester,
                        expiryTimestamp: s.expiryTimestamp,
                        id: e,
                        pairingTopic: i,
                        verifyContext: s.verifyContext,
                        transportType: r,
                    });
            }),
            (this.setPendingSessionRequest = async (e) => {
                const { id: t, topic: s, params: i, verifyContext: r } = e,
                    n = i.request.expiryTimestamp || ms$2(v$4.wc_sessionRequest.req.ttl);
                this.client.core.expirer.set(t, n), await this.client.pendingRequest.set(t, { id: t, topic: s, params: i, verifyContext: r });
            }),
            (this.sendRequest = async (e) => {
                const { topic: t, method: s, params: i, expiry: r, relayRpcId: n, clientRpcId: a, throwOnFailedPublish: c, appLink: h } = e,
                    p = formatJsonRpcRequest(s, i, a);
                let d;
                const l = !!h;
                try {
                    const y = l ? wu : $i;
                    d = await this.client.core.crypto.encode(t, p, { encoding: y });
                } catch (y) {
                    throw (await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`), y);
                }
                let w;
                if (at$1.includes(s)) {
                    const y = Iu(JSON.stringify(p)),
                        _ = Iu(d);
                    w = await this.client.core.verify.register({ id: _, decryptedId: y });
                }
                const m = v$4[s].req;
                if (((m.attestation = w), r && (m.ttl = r), n && (m.id = n), this.client.core.history.set(t, p), l)) {
                    const y = Yu(h, t, d);
                    await global.Linking.openURL(y, this.client.name);
                } else {
                    const y = v$4[s].req;
                    r && (y.ttl = r),
                        n && (y.id = n),
                        c
                            ? ((y.internal = V$2(I$2({}, y.internal), { throwOnFailedPublish: !0 })), await this.client.core.relayer.publish(t, d, y))
                            : this.client.core.relayer.publish(t, d, y).catch((_) => this.client.logger.error(_));
                }
                return p.id;
            }),
            (this.sendResult = async (e) => {
                const { id: t, topic: s, result: i, throwOnFailedPublish: r, encodeOpts: n, appLink: a } = e,
                    c = formatJsonRpcResult(t, i);
                let h;
                const p = a && typeof (global == null ? void 0 : global.Linking) < "u";
                try {
                    const l = p ? wu : $i;
                    h = await this.client.core.crypto.encode(s, c, V$2(I$2({}, n || {}), { encoding: l }));
                } catch (l) {
                    throw (await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), l);
                }
                let d;
                try {
                    d = await this.client.core.history.get(s, t);
                } catch (l) {
                    throw (this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`), l);
                }
                if (p) {
                    const l = Yu(a, s, h);
                    await global.Linking.openURL(l, this.client.name);
                } else {
                    const l = v$4[d.request.method].res;
                    r
                        ? ((l.internal = V$2(I$2({}, l.internal), { throwOnFailedPublish: !0 })), await this.client.core.relayer.publish(s, h, l))
                        : this.client.core.relayer.publish(s, h, l).catch((w) => this.client.logger.error(w));
                }
                await this.client.core.history.resolve(c);
            }),
            (this.sendError = async (e) => {
                const { id: t, topic: s, error: i, encodeOpts: r, rpcOpts: n, appLink: a } = e,
                    c = formatJsonRpcError(t, i);
                let h;
                const p = a && typeof (global == null ? void 0 : global.Linking) < "u";
                try {
                    const l = p ? wu : $i;
                    h = await this.client.core.crypto.encode(s, c, V$2(I$2({}, r || {}), { encoding: l }));
                } catch (l) {
                    throw (await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), l);
                }
                let d;
                try {
                    d = await this.client.core.history.get(s, t);
                } catch (l) {
                    throw (this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`), l);
                }
                if (p) {
                    const l = Yu(a, s, h);
                    await global.Linking.openURL(l, this.client.name);
                } else {
                    const l = n || v$4[d.request.method].res;
                    this.client.core.relayer.publish(s, h, l);
                }
                await this.client.core.history.resolve(c);
            }),
            (this.cleanup = async () => {
                const e = [],
                    t = [];
                this.client.session.getAll().forEach((s) => {
                    let i = !1;
                    As$1(s.expiry) && (i = !0), this.client.core.crypto.keychain.has(s.topic) || (i = !0), i && e.push(s.topic);
                }),
                    this.client.proposal.getAll().forEach((s) => {
                        As$1(s.expiryTimestamp) && t.push(s.id);
                    }),
                    await Promise.all([...e.map((s) => this.deleteSession({ topic: s })), ...t.map((s) => this.deleteProposal(s))]);
            }),
            (this.onRelayEventRequest = async (e) => {
                this.requestQueue.queue.push(e), await this.processRequestsQueue();
            }),
            (this.processRequestsQueue = async () => {
                if (this.requestQueue.state === L$5.active) {
                    this.client.logger.info("Request queue already active, skipping...");
                    return;
                }
                for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
                    this.requestQueue.state = L$5.active;
                    const e = this.requestQueue.queue.shift();
                    if (e)
                        try {
                            await this.processRequest(e);
                        } catch (t) {
                            this.client.logger.warn(t);
                        }
                }
                this.requestQueue.state = L$5.idle;
            }),
            (this.processRequest = async (e) => {
                const { topic: t, payload: s, attestation: i, transportType: r, encryptedId: n } = e,
                    a = s.method;
                if (!this.shouldIgnorePairingRequest({ topic: t, requestMethod: a }))
                    switch (a) {
                        case "wc_sessionPropose":
                            return await this.onSessionProposeRequest({ topic: t, payload: s, attestation: i, encryptedId: n });
                        case "wc_sessionSettle":
                            return await this.onSessionSettleRequest(t, s);
                        case "wc_sessionUpdate":
                            return await this.onSessionUpdateRequest(t, s);
                        case "wc_sessionExtend":
                            return await this.onSessionExtendRequest(t, s);
                        case "wc_sessionPing":
                            return await this.onSessionPingRequest(t, s);
                        case "wc_sessionDelete":
                            return await this.onSessionDeleteRequest(t, s);
                        case "wc_sessionRequest":
                            return await this.onSessionRequest({ topic: t, payload: s, attestation: i, encryptedId: n, transportType: r });
                        case "wc_sessionEvent":
                            return await this.onSessionEventRequest(t, s);
                        case "wc_sessionAuthenticate":
                            return await this.onSessionAuthenticateRequest({ topic: t, payload: s, attestation: i, encryptedId: n, transportType: r });
                        default:
                            return this.client.logger.info(`Unsupported request method ${a}`);
                    }
            }),
            (this.onRelayEventResponse = async (e) => {
                const { topic: t, payload: s, transportType: i } = e,
                    r = (await this.client.core.history.get(t, s.id)).request.method;
                switch (r) {
                    case "wc_sessionPropose":
                        return this.onSessionProposeResponse(t, s, i);
                    case "wc_sessionSettle":
                        return this.onSessionSettleResponse(t, s);
                    case "wc_sessionUpdate":
                        return this.onSessionUpdateResponse(t, s);
                    case "wc_sessionExtend":
                        return this.onSessionExtendResponse(t, s);
                    case "wc_sessionPing":
                        return this.onSessionPingResponse(t, s);
                    case "wc_sessionRequest":
                        return this.onSessionRequestResponse(t, s);
                    case "wc_sessionAuthenticate":
                        return this.onSessionAuthenticateResponse(t, s);
                    default:
                        return this.client.logger.info(`Unsupported response method ${r}`);
                }
            }),
            (this.onRelayEventUnknownPayload = (e) => {
                const { topic: t } = e,
                    { message: s } = xe$1("MISSING_OR_INVALID", `Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);
                throw new Error(s);
            }),
            (this.shouldIgnorePairingRequest = (e) => {
                const { topic: t, requestMethod: s } = e,
                    i = this.expectedPairingMethodMap.get(t);
                return !i || i.includes(s) ? !1 : !!(i.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
            }),
            (this.onSessionProposeRequest = async (e) => {
                const { topic: t, payload: s, attestation: i, encryptedId: r } = e,
                    { params: n, id: a } = s;
                try {
                    const c = this.client.core.eventClient.getEvent({ topic: t });
                    this.isValidConnect(I$2({}, s.params));
                    const h = n.expiryTimestamp || ms$2(v$4.wc_sessionPropose.req.ttl),
                        p = I$2({ id: a, pairingTopic: t, expiryTimestamp: h }, n);
                    await this.setProposal(a, p);
                    const d = await this.getVerifyContext({ attestationId: i, hash: Iu(JSON.stringify(s)), encryptedId: r, metadata: p.proposer.metadata });
                    this.client.events.listenerCount("session_proposal") === 0 &&
                        (console.warn("No listener for session_proposal event"), c?.setError($$3.proposal_listener_not_found)),
                        c?.addTrace(z$3.emit_session_proposal),
                        this.client.events.emit("session_proposal", { id: a, params: p, verifyContext: d });
                } catch (c) {
                    await this.sendError({ id: a, topic: t, error: c, rpcOpts: v$4.wc_sessionPropose.autoReject }), this.client.logger.error(c);
                }
            }),
            (this.onSessionProposeResponse = async (e, t, s) => {
                const { id: i } = t;
                if (isJsonRpcResult(t)) {
                    const { result: r } = t;
                    this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r });
                    const n = this.client.proposal.get(i);
                    this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n });
                    const a = n.proposer.publicKey;
                    this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a });
                    const c = r.responderPublicKey;
                    this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: c });
                    const h = await this.client.core.crypto.generateSharedKey(a, c);
                    this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", sessionTopic: h });
                    const p = await this.client.core.relayer.subscribe(h, { transportType: s });
                    this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: p }),
                        await this.client.core.pairing.activate({ topic: e });
                } else if (isJsonRpcError(t)) {
                    await this.client.proposal.delete(i, er$2("USER_DISCONNECTED"));
                    const r = bs$1("session_connect");
                    if (this.events.listenerCount(r) === 0) throw new Error(`emitting ${r} without any listeners, 954`);
                    this.events.emit(bs$1("session_connect"), { error: t.error });
                }
            }),
            (this.onSessionSettleRequest = async (e, t) => {
                const { id: s, params: i } = t;
                try {
                    this.isValidSessionSettleRequest(i);
                    const { relay: r, controller: n, expiry: a, namespaces: c, sessionProperties: h, sessionConfig: p } = t.params,
                        d = V$2(
                            I$2(
                                I$2(
                                    {
                                        topic: e,
                                        relay: r,
                                        expiry: a,
                                        namespaces: c,
                                        acknowledged: !0,
                                        pairingTopic: "",
                                        requiredNamespaces: {},
                                        optionalNamespaces: {},
                                        controller: n.publicKey,
                                        self: { publicKey: "", metadata: this.client.metadata },
                                        peer: { publicKey: n.publicKey, metadata: n.metadata },
                                    },
                                    h && { sessionProperties: h }
                                ),
                                p && { sessionConfig: p }
                            ),
                            { transportType: F$3.relay }
                        ),
                        l = bs$1("session_connect");
                    if (this.events.listenerCount(l) === 0) throw new Error(`emitting ${l} without any listeners 997`);
                    this.events.emit(bs$1("session_connect"), { session: d }),
                        await this.sendResult({ id: t.id, topic: e, result: !0, throwOnFailedPublish: !0 });
                } catch (r) {
                    await this.sendError({ id: s, topic: e, error: r }), this.client.logger.error(r);
                }
            }),
            (this.onSessionSettleResponse = async (e, t) => {
                const { id: s } = t;
                isJsonRpcResult(t)
                    ? (await this.client.session.update(e, { acknowledged: !0 }), this.events.emit(bs$1("session_approve", s), {}))
                    : isJsonRpcError(t) &&
                      (await this.client.session.delete(e, er$2("USER_DISCONNECTED")), this.events.emit(bs$1("session_approve", s), { error: t.error }));
            }),
            (this.onSessionUpdateRequest = async (e, t) => {
                const { params: s, id: i } = t;
                try {
                    const r = `${e}_session_update`,
                        n = Nh.get(r);
                    if (n && this.isRequestOutOfSync(n, i)) {
                        this.client.logger.info(`Discarding out of sync request - ${i}`),
                            this.sendError({ id: i, topic: e, error: er$2("INVALID_UPDATE_REQUEST") });
                        return;
                    }
                    this.isValidUpdate(I$2({ topic: e }, s));
                    try {
                        Nh.set(r, i),
                            await this.client.session.update(e, { namespaces: s.namespaces }),
                            await this.sendResult({ id: i, topic: e, result: !0, throwOnFailedPublish: !0 });
                    } catch (a) {
                        throw (Nh.delete(r), a);
                    }
                    this.client.events.emit("session_update", { id: i, topic: e, params: s });
                } catch (r) {
                    await this.sendError({ id: i, topic: e, error: r }), this.client.logger.error(r);
                }
            }),
            (this.isRequestOutOfSync = (e, t) => parseInt(t.toString().slice(0, -3)) <= parseInt(e.toString().slice(0, -3))),
            (this.onSessionUpdateResponse = (e, t) => {
                const { id: s } = t,
                    i = bs$1("session_update", s);
                if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);
                isJsonRpcResult(t)
                    ? this.events.emit(bs$1("session_update", s), {})
                    : isJsonRpcError(t) && this.events.emit(bs$1("session_update", s), { error: t.error });
            }),
            (this.onSessionExtendRequest = async (e, t) => {
                const { id: s } = t;
                try {
                    this.isValidExtend({ topic: e }),
                        await this.setExpiry(e, ms$2(z$2)),
                        await this.sendResult({ id: s, topic: e, result: !0, throwOnFailedPublish: !0 }),
                        this.client.events.emit("session_extend", { id: s, topic: e });
                } catch (i) {
                    await this.sendError({ id: s, topic: e, error: i }), this.client.logger.error(i);
                }
            }),
            (this.onSessionExtendResponse = (e, t) => {
                const { id: s } = t,
                    i = bs$1("session_extend", s);
                if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);
                isJsonRpcResult(t)
                    ? this.events.emit(bs$1("session_extend", s), {})
                    : isJsonRpcError(t) && this.events.emit(bs$1("session_extend", s), { error: t.error });
            }),
            (this.onSessionPingRequest = async (e, t) => {
                const { id: s } = t;
                try {
                    this.isValidPing({ topic: e }),
                        await this.sendResult({ id: s, topic: e, result: !0, throwOnFailedPublish: !0 }),
                        this.client.events.emit("session_ping", { id: s, topic: e });
                } catch (i) {
                    await this.sendError({ id: s, topic: e, error: i }), this.client.logger.error(i);
                }
            }),
            (this.onSessionPingResponse = (e, t) => {
                const { id: s } = t,
                    i = bs$1("session_ping", s);
                if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);
                setTimeout(() => {
                    isJsonRpcResult(t)
                        ? this.events.emit(bs$1("session_ping", s), {})
                        : isJsonRpcError(t) && this.events.emit(bs$1("session_ping", s), { error: t.error });
                }, 500);
            }),
            (this.onSessionDeleteRequest = async (e, t) => {
                const { id: s } = t;
                try {
                    this.isValidDisconnect({ topic: e, reason: t.params }),
                        Promise.all([
                            new Promise((i) => {
                                this.client.core.relayer.once(w$3.publish, async () => {
                                    i(await this.deleteSession({ topic: e, id: s }));
                                });
                            }),
                            this.sendResult({ id: s, topic: e, result: !0, throwOnFailedPublish: !0 }),
                            this.cleanupPendingSentRequestsForTopic({ topic: e, error: er$2("USER_DISCONNECTED") }),
                        ]).catch((i) => this.client.logger.error(i));
                } catch (i) {
                    this.client.logger.error(i);
                }
            }),
            (this.onSessionRequest = async (e) => {
                var t, s, i;
                const { topic: r, payload: n, attestation: a, encryptedId: c, transportType: h } = e,
                    { id: p, params: d } = n;
                try {
                    await this.isValidRequest(I$2({ topic: r }, d));
                    const l = this.client.session.get(r),
                        w = await this.getVerifyContext({
                            attestationId: a,
                            hash: Iu(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", d, p))),
                            encryptedId: c,
                            metadata: l.peer.metadata,
                            transportType: h,
                        }),
                        m = { id: p, topic: r, params: d, verifyContext: w };
                    await this.setPendingSessionRequest(m),
                        h === F$3.link_mode &&
                            (t = l.peer.metadata.redirect) != null &&
                            t.universal &&
                            this.client.core.addLinkModeSupportedApp((s = l.peer.metadata.redirect) == null ? void 0 : s.universal),
                        (i = this.client.signConfig) != null && i.disableRequestQueue
                            ? this.emitSessionRequest(m)
                            : (this.addSessionRequestToSessionRequestQueue(m), this.processSessionRequestQueue());
                } catch (l) {
                    await this.sendError({ id: p, topic: r, error: l }), this.client.logger.error(l);
                }
            }),
            (this.onSessionRequestResponse = (e, t) => {
                const { id: s } = t,
                    i = bs$1("session_request", s);
                if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);
                isJsonRpcResult(t)
                    ? this.events.emit(bs$1("session_request", s), { result: t.result })
                    : isJsonRpcError(t) && this.events.emit(bs$1("session_request", s), { error: t.error });
            }),
            (this.onSessionEventRequest = async (e, t) => {
                const { id: s, params: i } = t;
                try {
                    const r = `${e}_session_event_${i.event.name}`,
                        n = Nh.get(r);
                    if (n && this.isRequestOutOfSync(n, s)) {
                        this.client.logger.info(`Discarding out of sync request - ${s}`);
                        return;
                    }
                    this.isValidEmit(I$2({ topic: e }, i)), this.client.events.emit("session_event", { id: s, topic: e, params: i }), Nh.set(r, s);
                } catch (r) {
                    await this.sendError({ id: s, topic: e, error: r }), this.client.logger.error(r);
                }
            }),
            (this.onSessionAuthenticateResponse = (e, t) => {
                const { id: s } = t;
                this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e, payload: t }),
                    isJsonRpcResult(t)
                        ? this.events.emit(bs$1("session_request", s), { result: t.result })
                        : isJsonRpcError(t) && this.events.emit(bs$1("session_request", s), { error: t.error });
            }),
            (this.onSessionAuthenticateRequest = async (e) => {
                var t;
                const { topic: s, payload: i, attestation: r, encryptedId: n, transportType: a } = e;
                try {
                    const { requester: c, authPayload: h, expiryTimestamp: p } = i.params,
                        d = await this.getVerifyContext({
                            attestationId: r,
                            hash: Iu(JSON.stringify(i)),
                            encryptedId: n,
                            metadata: c.metadata,
                            transportType: a,
                        }),
                        l = { requester: c, pairingTopic: s, id: i.id, authPayload: h, verifyContext: d, expiryTimestamp: p };
                    await this.setAuthRequest(i.id, { request: l, pairingTopic: s, transportType: a }),
                        a === F$3.link_mode &&
                            (t = c.metadata.redirect) != null &&
                            t.universal &&
                            this.client.core.addLinkModeSupportedApp(c.metadata.redirect.universal),
                        this.client.events.emit("session_authenticate", { topic: s, params: i.params, id: i.id, verifyContext: d });
                } catch (c) {
                    this.client.logger.error(c);
                    const h = i.params.requester.publicKey,
                        p = await this.client.core.crypto.generateKeyPair(),
                        d = this.getAppLinkIfEnabled(i.params.requester.metadata, a),
                        l = { type: pr$2, receiverPublicKey: h, senderPublicKey: p };
                    await this.sendError({ id: i.id, topic: s, error: c, encodeOpts: l, rpcOpts: v$4.wc_sessionAuthenticate.autoReject, appLink: d });
                }
            }),
            (this.addSessionRequestToSessionRequestQueue = (e) => {
                this.sessionRequestQueue.queue.push(e);
            }),
            (this.cleanupAfterResponse = (e) => {
                this.deletePendingSessionRequest(e.response.id, { message: "fulfilled", code: 0 }),
                    setTimeout(() => {
                        (this.sessionRequestQueue.state = L$5.idle), this.processSessionRequestQueue();
                    }, cjs$3.toMiliseconds(this.requestQueueDelay));
            }),
            (this.cleanupPendingSentRequestsForTopic = ({ topic: e, error: t }) => {
                const s = this.client.core.history.pending;
                s.length > 0 &&
                    s
                        .filter((i) => i.topic === e && i.request.method === "wc_sessionRequest")
                        .forEach((i) => {
                            const r = i.request.id,
                                n = bs$1("session_request", r);
                            if (this.events.listenerCount(n) === 0) throw new Error(`emitting ${n} without any listeners`);
                            this.events.emit(bs$1("session_request", i.request.id), { error: t });
                        });
            }),
            (this.processSessionRequestQueue = () => {
                if (this.sessionRequestQueue.state === L$5.active) {
                    this.client.logger.info("session request queue is already active.");
                    return;
                }
                const e = this.sessionRequestQueue.queue[0];
                if (!e) {
                    this.client.logger.info("session request queue is empty.");
                    return;
                }
                try {
                    (this.sessionRequestQueue.state = L$5.active), this.emitSessionRequest(e);
                } catch (t) {
                    this.client.logger.error(t);
                }
            }),
            (this.emitSessionRequest = (e) => {
                this.client.events.emit("session_request", e);
            }),
            (this.onPairingCreated = (e) => {
                if ((e.methods && this.expectedPairingMethodMap.set(e.topic, e.methods), e.active)) return;
                const t = this.client.proposal.getAll().find((s) => s.pairingTopic === e.topic);
                t &&
                    this.onSessionProposeRequest({
                        topic: e.topic,
                        payload: formatJsonRpcRequest(
                            "wc_sessionPropose",
                            {
                                requiredNamespaces: t.requiredNamespaces,
                                optionalNamespaces: t.optionalNamespaces,
                                relays: t.relays,
                                proposer: t.proposer,
                                sessionProperties: t.sessionProperties,
                            },
                            t.id
                        ),
                    });
            }),
            (this.isValidConnect = async (e) => {
                if (!dh(e)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e)}`);
                    throw new Error(a);
                }
                const { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: i, sessionProperties: r, relays: n } = e;
                if ((Pe$1(t) || (await this.isValidPairingTopic(t)), !ch(n))) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `connect() relays: ${n}`);
                    throw new Error(a);
                }
                !Pe$1(s) && Xr$1(s) !== 0 && this.validateNamespaces(s, "requiredNamespaces"),
                    !Pe$1(i) && Xr$1(i) !== 0 && this.validateNamespaces(i, "optionalNamespaces"),
                    Pe$1(r) || this.validateSessionProps(r, "sessionProperties");
            }),
            (this.validateNamespaces = (e, t) => {
                const s = hh(e, "connect()", t);
                if (s) throw new Error(s.message);
            }),
            (this.isValidApprove = async (e) => {
                if (!dh(e)) throw new Error(xe$1("MISSING_OR_INVALID", `approve() params: ${e}`).message);
                const { id: t, namespaces: s, relayProtocol: i, sessionProperties: r } = e;
                this.checkRecentlyDeleted(t), await this.isValidProposalId(t);
                const n = this.client.proposal.get(t),
                    a = _o(s, "approve()");
                if (a) throw new Error(a.message);
                const c = Co$1(n.requiredNamespaces, s, "approve()");
                if (c) throw new Error(c.message);
                if (!Yt$2(i, !0)) {
                    const { message: h } = xe$1("MISSING_OR_INVALID", `approve() relayProtocol: ${i}`);
                    throw new Error(h);
                }
                Pe$1(r) || this.validateSessionProps(r, "sessionProperties");
            }),
            (this.isValidReject = async (e) => {
                if (!dh(e)) {
                    const { message: i } = xe$1("MISSING_OR_INVALID", `reject() params: ${e}`);
                    throw new Error(i);
                }
                const { id: t, reason: s } = e;
                if ((this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !ph(s))) {
                    const { message: i } = xe$1("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s)}`);
                    throw new Error(i);
                }
            }),
            (this.isValidSessionSettleRequest = (e) => {
                if (!dh(e)) {
                    const { message: c } = xe$1("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e}`);
                    throw new Error(c);
                }
                const { relay: t, controller: s, namespaces: i, expiry: r } = e;
                if (!Bo(t)) {
                    const { message: c } = xe$1("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
                    throw new Error(c);
                }
                const n = uh(s, "onSessionSettleRequest()");
                if (n) throw new Error(n.message);
                const a = _o(i, "onSessionSettleRequest()");
                if (a) throw new Error(a.message);
                if (As$1(r)) {
                    const { message: c } = xe$1("EXPIRED", "onSessionSettleRequest()");
                    throw new Error(c);
                }
            }),
            (this.isValidUpdate = async (e) => {
                if (!dh(e)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `update() params: ${e}`);
                    throw new Error(a);
                }
                const { topic: t, namespaces: s } = e;
                this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
                const i = this.client.session.get(t),
                    r = _o(s, "update()");
                if (r) throw new Error(r.message);
                const n = Co$1(i.requiredNamespaces, s, "update()");
                if (n) throw new Error(n.message);
            }),
            (this.isValidExtend = async (e) => {
                if (!dh(e)) {
                    const { message: s } = xe$1("MISSING_OR_INVALID", `extend() params: ${e}`);
                    throw new Error(s);
                }
                const { topic: t } = e;
                this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
            }),
            (this.isValidRequest = async (e) => {
                if (!dh(e)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `request() params: ${e}`);
                    throw new Error(a);
                }
                const { topic: t, request: s, chainId: i, expiry: r } = e;
                this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
                const { namespaces: n } = this.client.session.get(t);
                if (!Ah(n, i)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `request() chainId: ${i}`);
                    throw new Error(a);
                }
                if (!vh(s)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `request() ${JSON.stringify(s)}`);
                    throw new Error(a);
                }
                if (!bh(n, i, s.method)) {
                    const { message: a } = xe$1("MISSING_OR_INVALID", `request() method: ${s.method}`);
                    throw new Error(a);
                }
                if (r && !Mh(r, me$1)) {
                    const { message: a } = xe$1(
                        "MISSING_OR_INVALID",
                        `request() expiry: ${r}. Expiry must be a number (in seconds) between ${me$1.min} and ${me$1.max}`
                    );
                    throw new Error(a);
                }
            }),
            (this.isValidRespond = async (e) => {
                var t;
                if (!dh(e)) {
                    const { message: r } = xe$1("MISSING_OR_INVALID", `respond() params: ${e}`);
                    throw new Error(r);
                }
                const { topic: s, response: i } = e;
                try {
                    await this.isValidSessionTopic(s);
                } catch (r) {
                    throw ((t = e?.response) != null && t.id && this.cleanupAfterResponse(e), r);
                }
                if (!gh(i)) {
                    const { message: r } = xe$1("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i)}`);
                    throw new Error(r);
                }
            }),
            (this.isValidPing = async (e) => {
                if (!dh(e)) {
                    const { message: s } = xe$1("MISSING_OR_INVALID", `ping() params: ${e}`);
                    throw new Error(s);
                }
                const { topic: t } = e;
                await this.isValidSessionOrPairingTopic(t);
            }),
            (this.isValidEmit = async (e) => {
                if (!dh(e)) {
                    const { message: n } = xe$1("MISSING_OR_INVALID", `emit() params: ${e}`);
                    throw new Error(n);
                }
                const { topic: t, event: s, chainId: i } = e;
                await this.isValidSessionTopic(t);
                const { namespaces: r } = this.client.session.get(t);
                if (!Ah(r, i)) {
                    const { message: n } = xe$1("MISSING_OR_INVALID", `emit() chainId: ${i}`);
                    throw new Error(n);
                }
                if (!mh(s)) {
                    const { message: n } = xe$1("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
                    throw new Error(n);
                }
                if (!yh(r, i, s.name)) {
                    const { message: n } = xe$1("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
                    throw new Error(n);
                }
            }),
            (this.isValidDisconnect = async (e) => {
                if (!dh(e)) {
                    const { message: s } = xe$1("MISSING_OR_INVALID", `disconnect() params: ${e}`);
                    throw new Error(s);
                }
                const { topic: t } = e;
                await this.isValidSessionOrPairingTopic(t);
            }),
            (this.isValidAuthenticate = (e) => {
                const { chains: t, uri: s, domain: i, nonce: r } = e;
                if (!Array.isArray(t) || t.length === 0) throw new Error("chains is required and must be a non-empty array");
                if (!Yt$2(s, !1)) throw new Error("uri is required parameter");
                if (!Yt$2(i, !1)) throw new Error("domain is required parameter");
                if (!Yt$2(r, !1)) throw new Error("nonce is required parameter");
                if ([...new Set(t.map((a) => mn$1(a).namespace))].length > 1)
                    throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
                const { namespace: n } = mn$1(t[0]);
                if (n !== "eip155")
                    throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
            }),
            (this.getVerifyContext = async (e) => {
                const { attestationId: t, hash: s, encryptedId: i, metadata: r, transportType: n } = e,
                    a = { verified: { verifyUrl: r.verifyUrl || Q$3, validation: "UNKNOWN", origin: r.url || "" } };
                try {
                    if (n === F$3.link_mode) {
                        const h = this.getAppLinkIfEnabled(r, n);
                        return (a.verified.validation = h && new URL(h).origin === new URL(r.url).origin ? "VALID" : "INVALID"), a;
                    }
                    const c = await this.client.core.verify.resolve({ attestationId: t, hash: s, encryptedId: i, verifyUrl: r.verifyUrl });
                    c &&
                        ((a.verified.origin = c.origin),
                        (a.verified.isScam = c.isScam),
                        (a.verified.validation = c.origin === new URL(r.url).origin ? "VALID" : "INVALID"));
                } catch (c) {
                    this.client.logger.warn(c);
                }
                return this.client.logger.debug(`Verify context: ${JSON.stringify(a)}`), a;
            }),
            (this.validateSessionProps = (e, t) => {
                Object.values(e).forEach((s) => {
                    if (!Yt$2(s, !1)) {
                        const { message: i } = xe$1("MISSING_OR_INVALID", `${t} must be in Record<string, string> format. Received: ${JSON.stringify(s)}`);
                        throw new Error(i);
                    }
                });
            }),
            (this.getPendingAuthRequest = (e) => {
                const t = this.client.auth.requests.get(e);
                return typeof t == "object" ? t : void 0;
            }),
            (this.addToRecentlyDeleted = (e, t) => {
                if ((this.recentlyDeletedMap.set(e, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit)) {
                    let s = 0;
                    const i = this.recentlyDeletedLimit / 2;
                    for (const r of this.recentlyDeletedMap.keys()) {
                        if (s++ >= i) break;
                        this.recentlyDeletedMap.delete(r);
                    }
                }
            }),
            (this.checkRecentlyDeleted = (e) => {
                const t = this.recentlyDeletedMap.get(e);
                if (t) {
                    const { message: s } = xe$1("MISSING_OR_INVALID", `Record was recently deleted - ${t}: ${e}`);
                    throw new Error(s);
                }
            }),
            (this.isLinkModeEnabled = (e, t) => {
                var s, i, r, n, a, c, h, p, d;
                return !e || t !== F$3.link_mode
                    ? !1
                    : ((i = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i.linkMode) === !0 &&
                          ((n = (r = this.client.metadata) == null ? void 0 : r.redirect) == null ? void 0 : n.universal) !== void 0 &&
                          ((c = (a = this.client.metadata) == null ? void 0 : a.redirect) == null ? void 0 : c.universal) !== "" &&
                          ((h = e?.redirect) == null ? void 0 : h.universal) !== void 0 &&
                          ((p = e?.redirect) == null ? void 0 : p.universal) !== "" &&
                          ((d = e?.redirect) == null ? void 0 : d.linkMode) === !0 &&
                          this.client.core.linkModeSupportedApps.includes(e.redirect.universal) &&
                          typeof (global == null ? void 0 : global.Linking) < "u";
            }),
            (this.getAppLinkIfEnabled = (e, t) => {
                var s;
                return this.isLinkModeEnabled(e, t) ? ((s = e?.redirect) == null ? void 0 : s.universal) : void 0;
            }),
            (this.handleLinkModeMessage = ({ url: e }) => {
                if (!e || !e.includes("wc_ev") || !e.includes("topic")) return;
                const t = xs$1(e, "topic") || "",
                    s = decodeURIComponent(xs$1(e, "wc_ev") || ""),
                    i = this.client.session.keys.includes(t);
                i && this.client.session.update(t, { transportType: F$3.link_mode }),
                    this.client.core.dispatchEnvelope({ topic: t, message: s, sessionExists: i });
            }),
            (this.registerLinkModeListeners = async () => {
                var e;
                if ((typeof process < "u" && process.env.IS_VITEST) || (rr$2() && (e = this.client.metadata.redirect) != null && e.linkMode)) {
                    const t = global == null ? void 0 : global.Linking;
                    if (typeof t < "u") {
                        t.addEventListener("url", this.handleLinkModeMessage, this.client.name);
                        const s = await t.getInitialURL();
                        s &&
                            setTimeout(() => {
                                this.handleLinkModeMessage({ url: s });
                            }, 50);
                    }
                }
            });
    }
    isInitialized() {
        if (!this.initialized) {
            const { message: o } = xe$1("NOT_INITIALIZED", this.name);
            throw new Error(o);
        }
    }
    async confirmOnlineStateOrThrow() {
        await this.client.core.relayer.confirmOnlineStateOrThrow();
    }
    registerRelayerEvents() {
        this.client.core.relayer.on(w$3.message, (o) => {
            !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(o) : this.onRelayMessage(o);
        });
    }
    async onRelayMessage(o) {
        const { topic: e, message: t, attestation: s, transportType: i } = o,
            { publicKey: r } = this.client.auth.authKeys.keys.includes(ae$1)
                ? this.client.auth.authKeys.get(ae$1)
                : { responseTopic: void 0, publicKey: void 0 },
            n = await this.client.core.crypto.decode(e, t, { receiverPublicKey: r, encoding: i === F$3.link_mode ? wu : $i });
        try {
            isJsonRpcRequest(n)
                ? (this.client.core.history.set(e, n), this.onRelayEventRequest({ topic: e, payload: n, attestation: s, transportType: i, encryptedId: Iu(t) }))
                : isJsonRpcResponse(n)
                ? (await this.client.core.history.resolve(n),
                  await this.onRelayEventResponse({ topic: e, payload: n, transportType: i }),
                  this.client.core.history.delete(e, n.id))
                : this.onRelayEventUnknownPayload({ topic: e, payload: n, transportType: i });
        } catch (a) {
            this.client.logger.error(a);
        }
    }
    registerExpirerEvents() {
        this.client.core.expirer.on(R$3.expired, async (o) => {
            const { topic: e, id: t } = gs$1(o.target);
            if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, xe$1("EXPIRED"), !0);
            if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, xe$1("EXPIRED"), !0);
            e
                ? this.client.session.keys.includes(e) &&
                  (await this.deleteSession({ topic: e, expirerHasDeleted: !0 }), this.client.events.emit("session_expire", { topic: e }))
                : t && (await this.deleteProposal(t, !0), this.client.events.emit("proposal_expire", { id: t }));
        });
    }
    registerPairingEvents() {
        this.client.core.pairing.events.on(Z$3.create, (o) => this.onPairingCreated(o)),
            this.client.core.pairing.events.on(Z$3.delete, (o) => {
                this.addToRecentlyDeleted(o.topic, "pairing");
            });
    }
    isValidPairingTopic(o) {
        if (!Yt$2(o, !1)) {
            const { message: e } = xe$1("MISSING_OR_INVALID", `pairing topic should be a string: ${o}`);
            throw new Error(e);
        }
        if (!this.client.core.pairing.pairings.keys.includes(o)) {
            const { message: e } = xe$1("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o}`);
            throw new Error(e);
        }
        if (As$1(this.client.core.pairing.pairings.get(o).expiry)) {
            const { message: e } = xe$1("EXPIRED", `pairing topic: ${o}`);
            throw new Error(e);
        }
    }
    async isValidSessionTopic(o) {
        if (!Yt$2(o, !1)) {
            const { message: e } = xe$1("MISSING_OR_INVALID", `session topic should be a string: ${o}`);
            throw new Error(e);
        }
        if ((this.checkRecentlyDeleted(o), !this.client.session.keys.includes(o))) {
            const { message: e } = xe$1("NO_MATCHING_KEY", `session topic doesn't exist: ${o}`);
            throw new Error(e);
        }
        if (As$1(this.client.session.get(o).expiry)) {
            await this.deleteSession({ topic: o });
            const { message: e } = xe$1("EXPIRED", `session topic: ${o}`);
            throw new Error(e);
        }
        if (!this.client.core.crypto.keychain.has(o)) {
            const { message: e } = xe$1("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o}`);
            throw (await this.deleteSession({ topic: o }), new Error(e));
        }
    }
    async isValidSessionOrPairingTopic(o) {
        if ((this.checkRecentlyDeleted(o), this.client.session.keys.includes(o))) await this.isValidSessionTopic(o);
        else if (this.client.core.pairing.pairings.keys.includes(o)) this.isValidPairingTopic(o);
        else if (Yt$2(o, !1)) {
            const { message: e } = xe$1("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o}`);
            throw new Error(e);
        } else {
            const { message: e } = xe$1("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o}`);
            throw new Error(e);
        }
    }
    async isValidProposalId(o) {
        if (!lh(o)) {
            const { message: e } = xe$1("MISSING_OR_INVALID", `proposal id should be a number: ${o}`);
            throw new Error(e);
        }
        if (!this.client.proposal.keys.includes(o)) {
            const { message: e } = xe$1("NO_MATCHING_KEY", `proposal id doesn't exist: ${o}`);
            throw new Error(e);
        }
        if (As$1(this.client.proposal.get(o).expiryTimestamp)) {
            await this.deleteProposal(o);
            const { message: e } = xe$1("EXPIRED", `proposal id: ${o}`);
            throw new Error(e);
        }
    }
}
class Rs extends ri {
    constructor(o, e) {
        super(o, e, st$1, ye$1), (this.core = o), (this.logger = e);
    }
}
let yt$1 = class yt extends ri {
    constructor(o, e) {
        super(o, e, rt$1, ye$1), (this.core = o), (this.logger = e);
    }
};
class Ss extends ri {
    constructor(o, e) {
        super(o, e, ot$1, ye$1, (t) => t.id), (this.core = o), (this.logger = e);
    }
}
class Is extends ri {
    constructor(o, e) {
        super(o, e, pt$1, oe$2, () => ae$1), (this.core = o), (this.logger = e);
    }
}
class fs extends ri {
    constructor(o, e) {
        super(o, e, ht, oe$2), (this.core = o), (this.logger = e);
    }
}
class vs extends ri {
    constructor(o, e) {
        super(o, e, dt$1, oe$2, (t) => t.id), (this.core = o), (this.logger = e);
    }
}
class qs {
    constructor(o, e) {
        (this.core = o),
            (this.logger = e),
            (this.authKeys = new Is(this.core, this.logger)),
            (this.pairingTopics = new fs(this.core, this.logger)),
            (this.requests = new vs(this.core, this.logger));
    }
    async init() {
        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
    }
}
let _e$2 = class _e extends S$5 {
    constructor(o) {
        super(o),
            (this.protocol = be$1),
            (this.version = Ce$1),
            (this.name = we$1.name),
            (this.events = new eventsExports.EventEmitter()),
            (this.on = (t, s) => this.events.on(t, s)),
            (this.once = (t, s) => this.events.once(t, s)),
            (this.off = (t, s) => this.events.off(t, s)),
            (this.removeListener = (t, s) => this.events.removeListener(t, s)),
            (this.removeAllListeners = (t) => this.events.removeAllListeners(t)),
            (this.connect = async (t) => {
                try {
                    return await this.engine.connect(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.pair = async (t) => {
                try {
                    return await this.engine.pair(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.approve = async (t) => {
                try {
                    return await this.engine.approve(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.reject = async (t) => {
                try {
                    return await this.engine.reject(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.update = async (t) => {
                try {
                    return await this.engine.update(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.extend = async (t) => {
                try {
                    return await this.engine.extend(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.request = async (t) => {
                try {
                    return await this.engine.request(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.respond = async (t) => {
                try {
                    return await this.engine.respond(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.ping = async (t) => {
                try {
                    return await this.engine.ping(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.emit = async (t) => {
                try {
                    return await this.engine.emit(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.disconnect = async (t) => {
                try {
                    return await this.engine.disconnect(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.find = (t) => {
                try {
                    return this.engine.find(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.getPendingSessionRequests = () => {
                try {
                    return this.engine.getPendingSessionRequests();
                } catch (t) {
                    throw (this.logger.error(t.message), t);
                }
            }),
            (this.authenticate = async (t, s) => {
                try {
                    return await this.engine.authenticate(t, s);
                } catch (i) {
                    throw (this.logger.error(i.message), i);
                }
            }),
            (this.formatAuthMessage = (t) => {
                try {
                    return this.engine.formatAuthMessage(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.approveSessionAuthenticate = async (t) => {
                try {
                    return await this.engine.approveSessionAuthenticate(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.rejectSessionAuthenticate = async (t) => {
                try {
                    return await this.engine.rejectSessionAuthenticate(t);
                } catch (s) {
                    throw (this.logger.error(s.message), s);
                }
            }),
            (this.name = o?.name || we$1.name),
            (this.metadata = o?.metadata || es()),
            (this.signConfig = o?.signConfig);
        const e = typeof o?.logger < "u" && typeof o?.logger != "string" ? o.logger : Wg(k$2({ level: o?.logger || we$1.logger }));
        (this.core = o?.core || new Pn(o)),
            (this.logger = E$4(e, this.name)),
            (this.session = new yt$1(this.core, this.logger)),
            (this.proposal = new Rs(this.core, this.logger)),
            (this.pendingRequest = new Ss(this.core, this.logger)),
            (this.engine = new Es(this)),
            (this.auth = new qs(this.core, this.logger));
    }
    static async init(o) {
        const e = new _e(o);
        return await e.initialize(), e;
    }
    get context() {
        return y$6(this.logger);
    }
    get pairing() {
        return this.core.pairing.pairings;
    }
    async initialize() {
        this.logger.trace("Initialized");
        try {
            await this.core.start(),
                await this.session.init(),
                await this.proposal.init(),
                await this.pendingRequest.init(),
                await this.auth.init(),
                await this.engine.init(),
                this.logger.info("SignClient Initialization Success"),
                this.engine.processRelayMessageCache();
        } catch (o) {
            throw (this.logger.info("SignClient Initialization Failure"), this.logger.error(o.message), o);
        }
    }
};

var browserPonyfill = { exports: {} };

(function (module, exports) {
    var global = typeof self !== "undefined" ? self : commonjsGlobal;
    var __self__ = (function () {
        function F() {
            this.fetch = false;
            this.DOMException = global.DOMException;
        }
        F.prototype = global;
        return new F();
    })();
    (function (self) {
        (function (exports) {
            var support = {
                searchParams: "URLSearchParams" in self,
                iterable: "Symbol" in self && "iterator" in Symbol,
                blob:
                    "FileReader" in self &&
                    "Blob" in self &&
                    (function () {
                        try {
                            new Blob();
                            return true;
                        } catch (e) {
                            return false;
                        }
                    })(),
                formData: "FormData" in self,
                arrayBuffer: "ArrayBuffer" in self,
            };

            function isDataView(obj) {
                return obj && DataView.prototype.isPrototypeOf(obj);
            }

            if (support.arrayBuffer) {
                var viewClasses = [
                    "[object Int8Array]",
                    "[object Uint8Array]",
                    "[object Uint8ClampedArray]",
                    "[object Int16Array]",
                    "[object Uint16Array]",
                    "[object Int32Array]",
                    "[object Uint32Array]",
                    "[object Float32Array]",
                    "[object Float64Array]",
                ];

                var isArrayBufferView =
                    ArrayBuffer.isView ||
                    function (obj) {
                        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                    };
            }

            function normalizeName(name) {
                if (typeof name !== "string") {
                    name = String(name);
                }
                if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
                    throw new TypeError("Invalid character in header field name");
                }
                return name.toLowerCase();
            }

            function normalizeValue(value) {
                if (typeof value !== "string") {
                    value = String(value);
                }
                return value;
            }

            // Build a destructive iterator for the value list
            function iteratorFor(items) {
                var iterator = {
                    next: function () {
                        var value = items.shift();
                        return { done: value === undefined, value: value };
                    },
                };

                if (support.iterable) {
                    iterator[Symbol.iterator] = function () {
                        return iterator;
                    };
                }

                return iterator;
            }

            function Headers(headers) {
                this.map = {};

                if (headers instanceof Headers) {
                    headers.forEach(function (value, name) {
                        this.append(name, value);
                    }, this);
                } else if (Array.isArray(headers)) {
                    headers.forEach(function (header) {
                        this.append(header[0], header[1]);
                    }, this);
                } else if (headers) {
                    Object.getOwnPropertyNames(headers).forEach(function (name) {
                        this.append(name, headers[name]);
                    }, this);
                }
            }

            Headers.prototype.append = function (name, value) {
                name = normalizeName(name);
                value = normalizeValue(value);
                var oldValue = this.map[name];
                this.map[name] = oldValue ? oldValue + ", " + value : value;
            };

            Headers.prototype["delete"] = function (name) {
                delete this.map[normalizeName(name)];
            };

            Headers.prototype.get = function (name) {
                name = normalizeName(name);
                return this.has(name) ? this.map[name] : null;
            };

            Headers.prototype.has = function (name) {
                return this.map.hasOwnProperty(normalizeName(name));
            };

            Headers.prototype.set = function (name, value) {
                this.map[normalizeName(name)] = normalizeValue(value);
            };

            Headers.prototype.forEach = function (callback, thisArg) {
                for (var name in this.map) {
                    if (this.map.hasOwnProperty(name)) {
                        callback.call(thisArg, this.map[name], name, this);
                    }
                }
            };

            Headers.prototype.keys = function () {
                var items = [];
                this.forEach(function (value, name) {
                    items.push(name);
                });
                return iteratorFor(items);
            };

            Headers.prototype.values = function () {
                var items = [];
                this.forEach(function (value) {
                    items.push(value);
                });
                return iteratorFor(items);
            };

            Headers.prototype.entries = function () {
                var items = [];
                this.forEach(function (value, name) {
                    items.push([name, value]);
                });
                return iteratorFor(items);
            };

            if (support.iterable) {
                Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
            }

            function consumed(body) {
                if (body.bodyUsed) {
                    return Promise.reject(new TypeError("Already read"));
                }
                body.bodyUsed = true;
            }

            function fileReaderReady(reader) {
                return new Promise(function (resolve, reject) {
                    reader.onload = function () {
                        resolve(reader.result);
                    };
                    reader.onerror = function () {
                        reject(reader.error);
                    };
                });
            }

            function readBlobAsArrayBuffer(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsArrayBuffer(blob);
                return promise;
            }

            function readBlobAsText(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsText(blob);
                return promise;
            }

            function readArrayBufferAsText(buf) {
                var view = new Uint8Array(buf);
                var chars = new Array(view.length);

                for (var i = 0; i < view.length; i++) {
                    chars[i] = String.fromCharCode(view[i]);
                }
                return chars.join("");
            }

            function bufferClone(buf) {
                if (buf.slice) {
                    return buf.slice(0);
                } else {
                    var view = new Uint8Array(buf.byteLength);
                    view.set(new Uint8Array(buf));
                    return view.buffer;
                }
            }

            function Body() {
                this.bodyUsed = false;

                this._initBody = function (body) {
                    this._bodyInit = body;
                    if (!body) {
                        this._bodyText = "";
                    } else if (typeof body === "string") {
                        this._bodyText = body;
                    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                        this._bodyBlob = body;
                    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                        this._bodyFormData = body;
                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                        this._bodyText = body.toString();
                    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                        this._bodyArrayBuffer = bufferClone(body.buffer);
                        // IE 10-11 can't handle a DataView body.
                        this._bodyInit = new Blob([this._bodyArrayBuffer]);
                    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                        this._bodyArrayBuffer = bufferClone(body);
                    } else {
                        this._bodyText = body = Object.prototype.toString.call(body);
                    }

                    if (!this.headers.get("content-type")) {
                        if (typeof body === "string") {
                            this.headers.set("content-type", "text/plain;charset=UTF-8");
                        } else if (this._bodyBlob && this._bodyBlob.type) {
                            this.headers.set("content-type", this._bodyBlob.type);
                        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                            this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                        }
                    }
                };

                if (support.blob) {
                    this.blob = function () {
                        var rejected = consumed(this);
                        if (rejected) {
                            return rejected;
                        }

                        if (this._bodyBlob) {
                            return Promise.resolve(this._bodyBlob);
                        } else if (this._bodyArrayBuffer) {
                            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                        } else if (this._bodyFormData) {
                            throw new Error("could not read FormData body as blob");
                        } else {
                            return Promise.resolve(new Blob([this._bodyText]));
                        }
                    };

                    this.arrayBuffer = function () {
                        if (this._bodyArrayBuffer) {
                            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                        } else {
                            return this.blob().then(readBlobAsArrayBuffer);
                        }
                    };
                }

                this.text = function () {
                    var rejected = consumed(this);
                    if (rejected) {
                        return rejected;
                    }

                    if (this._bodyBlob) {
                        return readBlobAsText(this._bodyBlob);
                    } else if (this._bodyArrayBuffer) {
                        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                    } else if (this._bodyFormData) {
                        throw new Error("could not read FormData body as text");
                    } else {
                        return Promise.resolve(this._bodyText);
                    }
                };

                if (support.formData) {
                    this.formData = function () {
                        return this.text().then(decode);
                    };
                }

                this.json = function () {
                    return this.text().then(JSON.parse);
                };

                return this;
            }

            // HTTP methods whose capitalization should be normalized
            var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

            function normalizeMethod(method) {
                var upcased = method.toUpperCase();
                return methods.indexOf(upcased) > -1 ? upcased : method;
            }

            function Request(input, options) {
                options = options || {};
                var body = options.body;

                if (input instanceof Request) {
                    if (input.bodyUsed) {
                        throw new TypeError("Already read");
                    }
                    this.url = input.url;
                    this.credentials = input.credentials;
                    if (!options.headers) {
                        this.headers = new Headers(input.headers);
                    }
                    this.method = input.method;
                    this.mode = input.mode;
                    this.signal = input.signal;
                    if (!body && input._bodyInit != null) {
                        body = input._bodyInit;
                        input.bodyUsed = true;
                    }
                } else {
                    this.url = String(input);
                }

                this.credentials = options.credentials || this.credentials || "same-origin";
                if (options.headers || !this.headers) {
                    this.headers = new Headers(options.headers);
                }
                this.method = normalizeMethod(options.method || this.method || "GET");
                this.mode = options.mode || this.mode || null;
                this.signal = options.signal || this.signal;
                this.referrer = null;

                if ((this.method === "GET" || this.method === "HEAD") && body) {
                    throw new TypeError("Body not allowed for GET or HEAD requests");
                }
                this._initBody(body);
            }

            Request.prototype.clone = function () {
                return new Request(this, { body: this._bodyInit });
            };

            function decode(body) {
                var form = new FormData();
                body.trim()
                    .split("&")
                    .forEach(function (bytes) {
                        if (bytes) {
                            var split = bytes.split("=");
                            var name = split.shift().replace(/\+/g, " ");
                            var value = split.join("=").replace(/\+/g, " ");
                            form.append(decodeURIComponent(name), decodeURIComponent(value));
                        }
                    });
                return form;
            }

            function parseHeaders(rawHeaders) {
                var headers = new Headers();
                // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
                // https://tools.ietf.org/html/rfc7230#section-3.2
                var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
                preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
                    var parts = line.split(":");
                    var key = parts.shift().trim();
                    if (key) {
                        var value = parts.join(":").trim();
                        headers.append(key, value);
                    }
                });
                return headers;
            }

            Body.call(Request.prototype);

            function Response(bodyInit, options) {
                if (!options) {
                    options = {};
                }

                this.type = "default";
                this.status = options.status === undefined ? 200 : options.status;
                this.ok = this.status >= 200 && this.status < 300;
                this.statusText = "statusText" in options ? options.statusText : "OK";
                this.headers = new Headers(options.headers);
                this.url = options.url || "";
                this._initBody(bodyInit);
            }

            Body.call(Response.prototype);

            Response.prototype.clone = function () {
                return new Response(this._bodyInit, {
                    status: this.status,
                    statusText: this.statusText,
                    headers: new Headers(this.headers),
                    url: this.url,
                });
            };

            Response.error = function () {
                var response = new Response(null, { status: 0, statusText: "" });
                response.type = "error";
                return response;
            };

            var redirectStatuses = [301, 302, 303, 307, 308];

            Response.redirect = function (url, status) {
                if (redirectStatuses.indexOf(status) === -1) {
                    throw new RangeError("Invalid status code");
                }

                return new Response(null, { status: status, headers: { location: url } });
            };

            exports.DOMException = self.DOMException;
            try {
                new exports.DOMException();
            } catch (err) {
                exports.DOMException = function (message, name) {
                    this.message = message;
                    this.name = name;
                    var error = Error(message);
                    this.stack = error.stack;
                };
                exports.DOMException.prototype = Object.create(Error.prototype);
                exports.DOMException.prototype.constructor = exports.DOMException;
            }

            function fetch(input, init) {
                return new Promise(function (resolve, reject) {
                    var request = new Request(input, init);

                    if (request.signal && request.signal.aborted) {
                        return reject(new exports.DOMException("Aborted", "AbortError"));
                    }

                    var xhr = new XMLHttpRequest();

                    function abortXhr() {
                        xhr.abort();
                    }

                    xhr.onload = function () {
                        var options = {
                            status: xhr.status,
                            statusText: xhr.statusText,
                            headers: parseHeaders(xhr.getAllResponseHeaders() || ""),
                        };
                        options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                        var body = "response" in xhr ? xhr.response : xhr.responseText;
                        resolve(new Response(body, options));
                    };

                    xhr.onerror = function () {
                        reject(new TypeError("Network request failed"));
                    };

                    xhr.ontimeout = function () {
                        reject(new TypeError("Network request failed"));
                    };

                    xhr.onabort = function () {
                        reject(new exports.DOMException("Aborted", "AbortError"));
                    };

                    xhr.open(request.method, request.url, true);

                    if (request.credentials === "include") {
                        xhr.withCredentials = true;
                    } else if (request.credentials === "omit") {
                        xhr.withCredentials = false;
                    }

                    if ("responseType" in xhr && support.blob) {
                        xhr.responseType = "blob";
                    }

                    request.headers.forEach(function (value, name) {
                        xhr.setRequestHeader(name, value);
                    });

                    if (request.signal) {
                        request.signal.addEventListener("abort", abortXhr);

                        xhr.onreadystatechange = function () {
                            // DONE (success or failure)
                            if (xhr.readyState === 4) {
                                request.signal.removeEventListener("abort", abortXhr);
                            }
                        };
                    }

                    xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
                });
            }

            fetch.polyfill = true;

            if (!self.fetch) {
                self.fetch = fetch;
                self.Headers = Headers;
                self.Request = Request;
                self.Response = Response;
            }

            exports.Headers = Headers;
            exports.Request = Request;
            exports.Response = Response;
            exports.fetch = fetch;

            Object.defineProperty(exports, "__esModule", { value: true });

            return exports;
        })({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    // Remove "polyfill" property added by whatwg-fetch
    delete __self__.fetch.polyfill;
    // Choose between native implementation (global) or custom implementation (__self__)
    // var ctx = global.fetch ? global : __self__;
    var ctx = __self__; // this line disable service worker support temporarily
    exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
    exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
    exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
})(browserPonyfill, browserPonyfill.exports);

var browserPonyfillExports = browserPonyfill.exports;
var o$6 = /*@__PURE__*/ getDefaultExportFromCjs(browserPonyfillExports);

var P$1 = Object.defineProperty,
    w$2 = Object.defineProperties,
    E$3 = Object.getOwnPropertyDescriptors,
    c$5 = Object.getOwnPropertySymbols,
    L$4 = Object.prototype.hasOwnProperty,
    O$2 = Object.prototype.propertyIsEnumerable,
    l$5 = (r, t, e) => (t in r ? P$1(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : (r[t] = e)),
    p$3 = (r, t) => {
        for (var e in t || (t = {})) L$4.call(t, e) && l$5(r, e, t[e]);
        if (c$5) for (var e of c$5(t)) O$2.call(t, e) && l$5(r, e, t[e]);
        return r;
    },
    v$3 = (r, t) => w$2(r, E$3(t));
const j$3 = { Accept: "application/json", "Content-Type": "application/json" },
    T$4 = "POST",
    d$4 = { headers: j$3, method: T$4 },
    g$3 = 10;
let f$1 = class f {
    constructor(t, e = !1) {
        if (
            ((this.url = t),
            (this.disableProviderPing = e),
            (this.events = new eventsExports.EventEmitter()),
            (this.isAvailable = !1),
            (this.registering = !1),
            !isHttpUrl(t))
        )
            throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
        (this.url = t), (this.disableProviderPing = e);
    }
    get connected() {
        return this.isAvailable;
    }
    get connecting() {
        return this.registering;
    }
    on(t, e) {
        this.events.on(t, e);
    }
    once(t, e) {
        this.events.once(t, e);
    }
    off(t, e) {
        this.events.off(t, e);
    }
    removeListener(t, e) {
        this.events.removeListener(t, e);
    }
    async open(t = this.url) {
        await this.register(t);
    }
    async close() {
        if (!this.isAvailable) throw new Error("Connection already closed");
        this.onClose();
    }
    async send(t) {
        this.isAvailable || (await this.register());
        try {
            const e = safeJsonStringify(t),
                s = await (await o$6(this.url, v$3(p$3({}, d$4), { body: e }))).json();
            this.onPayload({ data: s });
        } catch (e) {
            this.onError(t.id, e);
        }
    }
    async register(t = this.url) {
        if (!isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
        if (this.registering) {
            const e = this.events.getMaxListeners();
            return (
                (this.events.listenerCount("register_error") >= e || this.events.listenerCount("open") >= e) && this.events.setMaxListeners(e + 1),
                new Promise((s, i) => {
                    this.events.once("register_error", (n) => {
                        this.resetMaxListeners(), i(n);
                    }),
                        this.events.once("open", () => {
                            if ((this.resetMaxListeners(), typeof this.isAvailable > "u")) return i(new Error("HTTP connection is missing or invalid"));
                            s();
                        });
                })
            );
        }
        (this.url = t), (this.registering = !0);
        try {
            if (!this.disableProviderPing) {
                const e = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
                await o$6(t, v$3(p$3({}, d$4), { body: e }));
            }
            this.onOpen();
        } catch (e) {
            const s = this.parseError(e);
            throw (this.events.emit("register_error", s), this.onClose(), s);
        }
    }
    onOpen() {
        (this.isAvailable = !0), (this.registering = !1), this.events.emit("open");
    }
    onClose() {
        (this.isAvailable = !1), (this.registering = !1), this.events.emit("close");
    }
    onPayload(t) {
        if (typeof t.data > "u") return;
        const e = typeof t.data == "string" ? safeJsonParse(t.data) : t.data;
        this.events.emit("payload", e);
    }
    onError(t, e) {
        const s = this.parseError(e),
            i = s.message || s.toString(),
            n = formatJsonRpcError(t, i);
        this.events.emit("payload", n);
    }
    parseError(t, e = this.url) {
        return parseConnectionError(t, e, "HTTP");
    }
    resetMaxListeners() {
        this.events.getMaxListeners() > g$3 && this.events.setMaxListeners(g$3);
    }
};

const ya = "error",
    Kg = "wss://relay.walletconnect.com",
    Jg = "wc",
    Yg = "universal_provider",
    Sa = `${Jg}@2:${Yg}:`,
    Zg = "https://rpc.walletconnect.com/v1/",
    Kn = "generic",
    Tt$1 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
var _e$1 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {},
    Ui = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ (function (P, s) {
    (function () {
        var i,
            p = "4.17.21",
            w = 200,
            x = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
            O = "Expected a function",
            k = "Invalid `variable` option passed into `_.template`",
            tn = "__lodash_hash_undefined__",
            Jn = 500,
            xn = "__lodash_placeholder__",
            Ht = 1,
            Mt = 2,
            En = 4,
            yn = 1,
            me = 2,
            vt = 1,
            ln = 2,
            Gi = 4,
            Dt = 8,
            Sn = 16,
            Nt = 32,
            On = 64,
            Bt = 128,
            Yn = 256,
            gr = 512,
            Wa = 30,
            Ma = "...",
            Ba = 800,
            Ga = 16,
            zi = 1,
            za = 2,
            Ka = 3,
            pn = 1 / 0,
            nn = 9007199254740991,
            Ja = 17976931348623157e292,
            we = 0 / 0,
            $t = 4294967295,
            Ya = $t - 1,
            Za = $t >>> 1,
            Xa = [
                ["ary", Bt],
                ["bind", vt],
                ["bindKey", ln],
                ["curry", Dt],
                ["curryRight", Sn],
                ["flip", gr],
                ["partial", Nt],
                ["partialRight", On],
                ["rearg", Yn],
            ],
            Rn = "[object Arguments]",
            Pe = "[object Array]",
            Qa = "[object AsyncFunction]",
            Zn = "[object Boolean]",
            Xn = "[object Date]",
            Va = "[object DOMException]",
            Ce = "[object Error]",
            Ae = "[object Function]",
            Ki = "[object GeneratorFunction]",
            Et = "[object Map]",
            Qn = "[object Number]",
            ka = "[object Null]",
            Gt = "[object Object]",
            Ji = "[object Promise]",
            ja = "[object Proxy]",
            Vn = "[object RegExp]",
            yt = "[object Set]",
            kn = "[object String]",
            Ie = "[object Symbol]",
            to = "[object Undefined]",
            jn = "[object WeakMap]",
            no = "[object WeakSet]",
            te = "[object ArrayBuffer]",
            bn = "[object DataView]",
            vr = "[object Float32Array]",
            _r = "[object Float64Array]",
            mr = "[object Int8Array]",
            wr = "[object Int16Array]",
            Pr = "[object Int32Array]",
            Cr = "[object Uint8Array]",
            Ar = "[object Uint8ClampedArray]",
            Ir = "[object Uint16Array]",
            xr = "[object Uint32Array]",
            eo = /\b__p \+= '';/g,
            ro = /\b(__p \+=) '' \+/g,
            io = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
            Yi = /&(?:amp|lt|gt|quot|#39);/g,
            Zi = /[&<>"']/g,
            so = RegExp(Yi.source),
            uo = RegExp(Zi.source),
            ao = /<%-([\s\S]+?)%>/g,
            oo = /<%([\s\S]+?)%>/g,
            Xi = /<%=([\s\S]+?)%>/g,
            fo = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            co = /^\w*$/,
            ho = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
            Er = /[\\^$.*+?()[\]{}|]/g,
            lo = RegExp(Er.source),
            yr = /^\s+/,
            po = /\s/,
            go = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            vo = /\{\n\/\* \[wrapped with (.+)\] \*/,
            _o = /,? & /,
            mo = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
            wo = /[()=,{}\[\]\/\s]/,
            Po = /\\(\\)?/g,
            Co = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
            Qi = /\w*$/,
            Ao = /^[-+]0x[0-9a-f]+$/i,
            Io = /^0b[01]+$/i,
            xo = /^\[object .+?Constructor\]$/,
            Eo = /^0o[0-7]+$/i,
            yo = /^(?:0|[1-9]\d*)$/,
            So = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
            xe = /($^)/,
            Oo = /['\n\r\u2028\u2029\\]/g,
            Ee = "\\ud800-\\udfff",
            Ro = "\\u0300-\\u036f",
            bo = "\\ufe20-\\ufe2f",
            To = "\\u20d0-\\u20ff",
            Vi = Ro + bo + To,
            ki = "\\u2700-\\u27bf",
            ji = "a-z\\xdf-\\xf6\\xf8-\\xff",
            Lo = "\\xac\\xb1\\xd7\\xf7",
            Ho = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
            Do = "\\u2000-\\u206f",
            No =
                " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
            ts = "A-Z\\xc0-\\xd6\\xd8-\\xde",
            ns = "\\ufe0e\\ufe0f",
            es = Lo + Ho + Do + No,
            Sr = "['\u2019]",
            $o = "[" + Ee + "]",
            rs = "[" + es + "]",
            ye = "[" + Vi + "]",
            is = "\\d+",
            qo = "[" + ki + "]",
            ss = "[" + ji + "]",
            us = "[^" + Ee + es + is + ki + ji + ts + "]",
            Or = "\\ud83c[\\udffb-\\udfff]",
            Uo = "(?:" + ye + "|" + Or + ")",
            as = "[^" + Ee + "]",
            Rr = "(?:\\ud83c[\\udde6-\\uddff]){2}",
            br = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            Tn = "[" + ts + "]",
            os = "\\u200d",
            fs = "(?:" + ss + "|" + us + ")",
            Fo = "(?:" + Tn + "|" + us + ")",
            cs = "(?:" + Sr + "(?:d|ll|m|re|s|t|ve))?",
            hs = "(?:" + Sr + "(?:D|LL|M|RE|S|T|VE))?",
            ls = Uo + "?",
            ps = "[" + ns + "]?",
            Wo = "(?:" + os + "(?:" + [as, Rr, br].join("|") + ")" + ps + ls + ")*",
            Mo = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
            Bo = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
            ds = ps + ls + Wo,
            Go = "(?:" + [qo, Rr, br].join("|") + ")" + ds,
            zo = "(?:" + [as + ye + "?", ye, Rr, br, $o].join("|") + ")",
            Ko = RegExp(Sr, "g"),
            Jo = RegExp(ye, "g"),
            Tr = RegExp(Or + "(?=" + Or + ")|" + zo + ds, "g"),
            Yo = RegExp(
                [
                    Tn + "?" + ss + "+" + cs + "(?=" + [rs, Tn, "$"].join("|") + ")",
                    Fo + "+" + hs + "(?=" + [rs, Tn + fs, "$"].join("|") + ")",
                    Tn + "?" + fs + "+" + cs,
                    Tn + "+" + hs,
                    Bo,
                    Mo,
                    is,
                    Go,
                ].join("|"),
                "g"
            ),
            Zo = RegExp("[" + os + Ee + Vi + ns + "]"),
            Xo = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
            Qo = [
                "Array",
                "Buffer",
                "DataView",
                "Date",
                "Error",
                "Float32Array",
                "Float64Array",
                "Function",
                "Int8Array",
                "Int16Array",
                "Int32Array",
                "Map",
                "Math",
                "Object",
                "Promise",
                "RegExp",
                "Set",
                "String",
                "Symbol",
                "TypeError",
                "Uint8Array",
                "Uint8ClampedArray",
                "Uint16Array",
                "Uint32Array",
                "WeakMap",
                "_",
                "clearTimeout",
                "isFinite",
                "parseInt",
                "setTimeout",
            ],
            Vo = -1,
            G = {};
        (G[vr] = G[_r] = G[mr] = G[wr] = G[Pr] = G[Cr] = G[Ar] = G[Ir] = G[xr] = !0),
            (G[Rn] = G[Pe] = G[te] = G[Zn] = G[bn] = G[Xn] = G[Ce] = G[Ae] = G[Et] = G[Qn] = G[Gt] = G[Vn] = G[yt] = G[kn] = G[jn] = !1);
        var B = {};
        (B[Rn] =
            B[Pe] =
            B[te] =
            B[bn] =
            B[Zn] =
            B[Xn] =
            B[vr] =
            B[_r] =
            B[mr] =
            B[wr] =
            B[Pr] =
            B[Et] =
            B[Qn] =
            B[Gt] =
            B[Vn] =
            B[yt] =
            B[kn] =
            B[Ie] =
            B[Cr] =
            B[Ar] =
            B[Ir] =
            B[xr] =
                !0),
            (B[Ce] = B[Ae] = B[jn] = !1);
        var ko = {
                À: "A",
                Á: "A",
                Â: "A",
                Ã: "A",
                Ä: "A",
                Å: "A",
                à: "a",
                á: "a",
                â: "a",
                ã: "a",
                ä: "a",
                å: "a",
                Ç: "C",
                ç: "c",
                Ð: "D",
                ð: "d",
                È: "E",
                É: "E",
                Ê: "E",
                Ë: "E",
                è: "e",
                é: "e",
                ê: "e",
                ë: "e",
                Ì: "I",
                Í: "I",
                Î: "I",
                Ï: "I",
                ì: "i",
                í: "i",
                î: "i",
                ï: "i",
                Ñ: "N",
                ñ: "n",
                Ò: "O",
                Ó: "O",
                Ô: "O",
                Õ: "O",
                Ö: "O",
                Ø: "O",
                ò: "o",
                ó: "o",
                ô: "o",
                õ: "o",
                ö: "o",
                ø: "o",
                Ù: "U",
                Ú: "U",
                Û: "U",
                Ü: "U",
                ù: "u",
                ú: "u",
                û: "u",
                ü: "u",
                Ý: "Y",
                ý: "y",
                ÿ: "y",
                Æ: "Ae",
                æ: "ae",
                Þ: "Th",
                þ: "th",
                ß: "ss",
                Ā: "A",
                Ă: "A",
                Ą: "A",
                ā: "a",
                ă: "a",
                ą: "a",
                Ć: "C",
                Ĉ: "C",
                Ċ: "C",
                Č: "C",
                ć: "c",
                ĉ: "c",
                ċ: "c",
                č: "c",
                Ď: "D",
                Đ: "D",
                ď: "d",
                đ: "d",
                Ē: "E",
                Ĕ: "E",
                Ė: "E",
                Ę: "E",
                Ě: "E",
                ē: "e",
                ĕ: "e",
                ė: "e",
                ę: "e",
                ě: "e",
                Ĝ: "G",
                Ğ: "G",
                Ġ: "G",
                Ģ: "G",
                ĝ: "g",
                ğ: "g",
                ġ: "g",
                ģ: "g",
                Ĥ: "H",
                Ħ: "H",
                ĥ: "h",
                ħ: "h",
                Ĩ: "I",
                Ī: "I",
                Ĭ: "I",
                Į: "I",
                İ: "I",
                ĩ: "i",
                ī: "i",
                ĭ: "i",
                į: "i",
                ı: "i",
                Ĵ: "J",
                ĵ: "j",
                Ķ: "K",
                ķ: "k",
                ĸ: "k",
                Ĺ: "L",
                Ļ: "L",
                Ľ: "L",
                Ŀ: "L",
                Ł: "L",
                ĺ: "l",
                ļ: "l",
                ľ: "l",
                ŀ: "l",
                ł: "l",
                Ń: "N",
                Ņ: "N",
                Ň: "N",
                Ŋ: "N",
                ń: "n",
                ņ: "n",
                ň: "n",
                ŋ: "n",
                Ō: "O",
                Ŏ: "O",
                Ő: "O",
                ō: "o",
                ŏ: "o",
                ő: "o",
                Ŕ: "R",
                Ŗ: "R",
                Ř: "R",
                ŕ: "r",
                ŗ: "r",
                ř: "r",
                Ś: "S",
                Ŝ: "S",
                Ş: "S",
                Š: "S",
                ś: "s",
                ŝ: "s",
                ş: "s",
                š: "s",
                Ţ: "T",
                Ť: "T",
                Ŧ: "T",
                ţ: "t",
                ť: "t",
                ŧ: "t",
                Ũ: "U",
                Ū: "U",
                Ŭ: "U",
                Ů: "U",
                Ű: "U",
                Ų: "U",
                ũ: "u",
                ū: "u",
                ŭ: "u",
                ů: "u",
                ű: "u",
                ų: "u",
                Ŵ: "W",
                ŵ: "w",
                Ŷ: "Y",
                ŷ: "y",
                Ÿ: "Y",
                Ź: "Z",
                Ż: "Z",
                Ž: "Z",
                ź: "z",
                ż: "z",
                ž: "z",
                Ĳ: "IJ",
                ĳ: "ij",
                Œ: "Oe",
                œ: "oe",
                ŉ: "'n",
                ſ: "s",
            },
            jo = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" },
            tf = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" },
            nf = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" },
            ef = parseFloat,
            rf = parseInt,
            gs = typeof _e$1 == "object" && _e$1 && _e$1.Object === Object && _e$1,
            sf = typeof self == "object" && self && self.Object === Object && self,
            j = gs || sf || Function("return this")(),
            Lr = s && !s.nodeType && s,
            dn = Lr && !0 && P && !P.nodeType && P,
            vs = dn && dn.exports === Lr,
            Hr = vs && gs.process,
            _t = (function () {
                try {
                    var h = dn && dn.require && dn.require("util").types;
                    return h || (Hr && Hr.binding && Hr.binding("util"));
                } catch {}
            })(),
            _s = _t && _t.isArrayBuffer,
            ms = _t && _t.isDate,
            ws = _t && _t.isMap,
            Ps = _t && _t.isRegExp,
            Cs = _t && _t.isSet,
            As = _t && _t.isTypedArray;
        function ct(h, g, d) {
            switch (d.length) {
                case 0:
                    return h.call(g);
                case 1:
                    return h.call(g, d[0]);
                case 2:
                    return h.call(g, d[0], d[1]);
                case 3:
                    return h.call(g, d[0], d[1], d[2]);
            }
            return h.apply(g, d);
        }
        function uf(h, g, d, A) {
            for (var R = -1, q = h == null ? 0 : h.length; ++R < q; ) {
                var X = h[R];
                g(A, X, d(X), h);
            }
            return A;
        }
        function mt(h, g) {
            for (var d = -1, A = h == null ? 0 : h.length; ++d < A && g(h[d], d, h) !== !1; );
            return h;
        }
        function af(h, g) {
            for (var d = h == null ? 0 : h.length; d-- && g(h[d], d, h) !== !1; );
            return h;
        }
        function Is(h, g) {
            for (var d = -1, A = h == null ? 0 : h.length; ++d < A; ) if (!g(h[d], d, h)) return !1;
            return !0;
        }
        function en(h, g) {
            for (var d = -1, A = h == null ? 0 : h.length, R = 0, q = []; ++d < A; ) {
                var X = h[d];
                g(X, d, h) && (q[R++] = X);
            }
            return q;
        }
        function Se(h, g) {
            var d = h == null ? 0 : h.length;
            return !!d && Ln(h, g, 0) > -1;
        }
        function Dr(h, g, d) {
            for (var A = -1, R = h == null ? 0 : h.length; ++A < R; ) if (d(g, h[A])) return !0;
            return !1;
        }
        function z(h, g) {
            for (var d = -1, A = h == null ? 0 : h.length, R = Array(A); ++d < A; ) R[d] = g(h[d], d, h);
            return R;
        }
        function rn(h, g) {
            for (var d = -1, A = g.length, R = h.length; ++d < A; ) h[R + d] = g[d];
            return h;
        }
        function Nr(h, g, d, A) {
            var R = -1,
                q = h == null ? 0 : h.length;
            for (A && q && (d = h[++R]); ++R < q; ) d = g(d, h[R], R, h);
            return d;
        }
        function of(h, g, d, A) {
            var R = h == null ? 0 : h.length;
            for (A && R && (d = h[--R]); R--; ) d = g(d, h[R], R, h);
            return d;
        }
        function $r(h, g) {
            for (var d = -1, A = h == null ? 0 : h.length; ++d < A; ) if (g(h[d], d, h)) return !0;
            return !1;
        }
        var ff = qr("length");
        function cf(h) {
            return h.split("");
        }
        function hf(h) {
            return h.match(mo) || [];
        }
        function xs(h, g, d) {
            var A;
            return (
                d(h, function (R, q, X) {
                    if (g(R, q, X)) return (A = q), !1;
                }),
                A
            );
        }
        function Oe(h, g, d, A) {
            for (var R = h.length, q = d + (A ? 1 : -1); A ? q-- : ++q < R; ) if (g(h[q], q, h)) return q;
            return -1;
        }
        function Ln(h, g, d) {
            return g === g ? If(h, g, d) : Oe(h, Es, d);
        }
        function lf(h, g, d, A) {
            for (var R = d - 1, q = h.length; ++R < q; ) if (A(h[R], g)) return R;
            return -1;
        }
        function Es(h) {
            return h !== h;
        }
        function ys(h, g) {
            var d = h == null ? 0 : h.length;
            return d ? Fr(h, g) / d : we;
        }
        function qr(h) {
            return function (g) {
                return g == null ? i : g[h];
            };
        }
        function Ur(h) {
            return function (g) {
                return h == null ? i : h[g];
            };
        }
        function Ss(h, g, d, A, R) {
            return (
                R(h, function (q, X, M) {
                    d = A ? ((A = !1), q) : g(d, q, X, M);
                }),
                d
            );
        }
        function pf(h, g) {
            var d = h.length;
            for (h.sort(g); d--; ) h[d] = h[d].value;
            return h;
        }
        function Fr(h, g) {
            for (var d, A = -1, R = h.length; ++A < R; ) {
                var q = g(h[A]);
                q !== i && (d = d === i ? q : d + q);
            }
            return d;
        }
        function Wr(h, g) {
            for (var d = -1, A = Array(h); ++d < h; ) A[d] = g(d);
            return A;
        }
        function df(h, g) {
            return z(g, function (d) {
                return [d, h[d]];
            });
        }
        function Os(h) {
            return h && h.slice(0, Ls(h) + 1).replace(yr, "");
        }
        function ht(h) {
            return function (g) {
                return h(g);
            };
        }
        function Mr(h, g) {
            return z(g, function (d) {
                return h[d];
            });
        }
        function ne(h, g) {
            return h.has(g);
        }
        function Rs(h, g) {
            for (var d = -1, A = h.length; ++d < A && Ln(g, h[d], 0) > -1; );
            return d;
        }
        function bs(h, g) {
            for (var d = h.length; d-- && Ln(g, h[d], 0) > -1; );
            return d;
        }
        function gf(h, g) {
            for (var d = h.length, A = 0; d--; ) h[d] === g && ++A;
            return A;
        }
        var vf = Ur(ko),
            _f = Ur(jo);
        function mf(h) {
            return "\\" + nf[h];
        }
        function wf(h, g) {
            return h == null ? i : h[g];
        }
        function Hn(h) {
            return Zo.test(h);
        }
        function Pf(h) {
            return Xo.test(h);
        }
        function Cf(h) {
            for (var g, d = []; !(g = h.next()).done; ) d.push(g.value);
            return d;
        }
        function Br(h) {
            var g = -1,
                d = Array(h.size);
            return (
                h.forEach(function (A, R) {
                    d[++g] = [R, A];
                }),
                d
            );
        }
        function Ts(h, g) {
            return function (d) {
                return h(g(d));
            };
        }
        function sn(h, g) {
            for (var d = -1, A = h.length, R = 0, q = []; ++d < A; ) {
                var X = h[d];
                (X === g || X === xn) && ((h[d] = xn), (q[R++] = d));
            }
            return q;
        }
        function Re(h) {
            var g = -1,
                d = Array(h.size);
            return (
                h.forEach(function (A) {
                    d[++g] = A;
                }),
                d
            );
        }
        function Af(h) {
            var g = -1,
                d = Array(h.size);
            return (
                h.forEach(function (A) {
                    d[++g] = [A, A];
                }),
                d
            );
        }
        function If(h, g, d) {
            for (var A = d - 1, R = h.length; ++A < R; ) if (h[A] === g) return A;
            return -1;
        }
        function xf(h, g, d) {
            for (var A = d + 1; A--; ) if (h[A] === g) return A;
            return A;
        }
        function Dn(h) {
            return Hn(h) ? yf(h) : ff(h);
        }
        function St(h) {
            return Hn(h) ? Sf(h) : cf(h);
        }
        function Ls(h) {
            for (var g = h.length; g-- && po.test(h.charAt(g)); );
            return g;
        }
        var Ef = Ur(tf);
        function yf(h) {
            for (var g = (Tr.lastIndex = 0); Tr.test(h); ) ++g;
            return g;
        }
        function Sf(h) {
            return h.match(Tr) || [];
        }
        function Of(h) {
            return h.match(Yo) || [];
        }
        var Rf = function h(g) {
                g = g == null ? j : Nn.defaults(j.Object(), g, Nn.pick(j, Qo));
                var d = g.Array,
                    A = g.Date,
                    R = g.Error,
                    q = g.Function,
                    X = g.Math,
                    M = g.Object,
                    Gr = g.RegExp,
                    bf = g.String,
                    wt = g.TypeError,
                    be = d.prototype,
                    Tf = q.prototype,
                    $n = M.prototype,
                    Te = g["__core-js_shared__"],
                    Le = Tf.toString,
                    W = $n.hasOwnProperty,
                    Lf = 0,
                    Hs = (function () {
                        var t = /[^.]+$/.exec((Te && Te.keys && Te.keys.IE_PROTO) || "");
                        return t ? "Symbol(src)_1." + t : "";
                    })(),
                    He = $n.toString,
                    Hf = Le.call(M),
                    Df = j._,
                    Nf = Gr(
                        "^" +
                            Le.call(W)
                                .replace(Er, "\\$&")
                                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
                            "$"
                    ),
                    De = vs ? g.Buffer : i,
                    un = g.Symbol,
                    Ne = g.Uint8Array,
                    Ds = De ? De.allocUnsafe : i,
                    $e = Ts(M.getPrototypeOf, M),
                    Ns = M.create,
                    $s = $n.propertyIsEnumerable,
                    qe = be.splice,
                    qs = un ? un.isConcatSpreadable : i,
                    ee = un ? un.iterator : i,
                    gn = un ? un.toStringTag : i,
                    Ue = (function () {
                        try {
                            var t = Pn(M, "defineProperty");
                            return t({}, "", {}), t;
                        } catch {}
                    })(),
                    $f = g.clearTimeout !== j.clearTimeout && g.clearTimeout,
                    qf = A && A.now !== j.Date.now && A.now,
                    Uf = g.setTimeout !== j.setTimeout && g.setTimeout,
                    Fe = X.ceil,
                    We = X.floor,
                    zr = M.getOwnPropertySymbols,
                    Ff = De ? De.isBuffer : i,
                    Us = g.isFinite,
                    Wf = be.join,
                    Mf = Ts(M.keys, M),
                    Q = X.max,
                    nt = X.min,
                    Bf = A.now,
                    Gf = g.parseInt,
                    Fs = X.random,
                    zf = be.reverse,
                    Kr = Pn(g, "DataView"),
                    re = Pn(g, "Map"),
                    Jr = Pn(g, "Promise"),
                    qn = Pn(g, "Set"),
                    ie = Pn(g, "WeakMap"),
                    se = Pn(M, "create"),
                    Me = ie && new ie(),
                    Un = {},
                    Kf = Cn(Kr),
                    Jf = Cn(re),
                    Yf = Cn(Jr),
                    Zf = Cn(qn),
                    Xf = Cn(ie),
                    Be = un ? un.prototype : i,
                    ue = Be ? Be.valueOf : i,
                    Ws = Be ? Be.toString : i;
                function a(t) {
                    if (J(t) && !b(t) && !(t instanceof N)) {
                        if (t instanceof Pt) return t;
                        if (W.call(t, "__wrapped__")) return Mu(t);
                    }
                    return new Pt(t);
                }
                var Fn = (function () {
                    function t() {}
                    return function (n) {
                        if (!K(n)) return {};
                        if (Ns) return Ns(n);
                        t.prototype = n;
                        var e = new t();
                        return (t.prototype = i), e;
                    };
                })();
                function Ge() {}
                function Pt(t, n) {
                    (this.__wrapped__ = t), (this.__actions__ = []), (this.__chain__ = !!n), (this.__index__ = 0), (this.__values__ = i);
                }
                (a.templateSettings = { escape: ao, evaluate: oo, interpolate: Xi, variable: "", imports: { _: a } }),
                    (a.prototype = Ge.prototype),
                    (a.prototype.constructor = a),
                    (Pt.prototype = Fn(Ge.prototype)),
                    (Pt.prototype.constructor = Pt);
                function N(t) {
                    (this.__wrapped__ = t),
                        (this.__actions__ = []),
                        (this.__dir__ = 1),
                        (this.__filtered__ = !1),
                        (this.__iteratees__ = []),
                        (this.__takeCount__ = $t),
                        (this.__views__ = []);
                }
                function Qf() {
                    var t = new N(this.__wrapped__);
                    return (
                        (t.__actions__ = ut(this.__actions__)),
                        (t.__dir__ = this.__dir__),
                        (t.__filtered__ = this.__filtered__),
                        (t.__iteratees__ = ut(this.__iteratees__)),
                        (t.__takeCount__ = this.__takeCount__),
                        (t.__views__ = ut(this.__views__)),
                        t
                    );
                }
                function Vf() {
                    if (this.__filtered__) {
                        var t = new N(this);
                        (t.__dir__ = -1), (t.__filtered__ = !0);
                    } else (t = this.clone()), (t.__dir__ *= -1);
                    return t;
                }
                function kf() {
                    var t = this.__wrapped__.value(),
                        n = this.__dir__,
                        e = b(t),
                        r = n < 0,
                        u = e ? t.length : 0,
                        o = ch(0, u, this.__views__),
                        f = o.start,
                        c = o.end,
                        l = c - f,
                        v = r ? c : f - 1,
                        _ = this.__iteratees__,
                        m = _.length,
                        C = 0,
                        I = nt(l, this.__takeCount__);
                    if (!e || (!r && u == l && I == l)) return cu(t, this.__actions__);
                    var y = [];
                    t: for (; l-- && C < I; ) {
                        v += n;
                        for (var L = -1, S = t[v]; ++L < m; ) {
                            var D = _[L],
                                $ = D.iteratee,
                                dt = D.type,
                                st = $(S);
                            if (dt == za) S = st;
                            else if (!st) {
                                if (dt == zi) continue t;
                                break t;
                            }
                        }
                        y[C++] = S;
                    }
                    return y;
                }
                (N.prototype = Fn(Ge.prototype)), (N.prototype.constructor = N);
                function vn(t) {
                    var n = -1,
                        e = t == null ? 0 : t.length;
                    for (this.clear(); ++n < e; ) {
                        var r = t[n];
                        this.set(r[0], r[1]);
                    }
                }
                function jf() {
                    (this.__data__ = se ? se(null) : {}), (this.size = 0);
                }
                function tc(t) {
                    var n = this.has(t) && delete this.__data__[t];
                    return (this.size -= n ? 1 : 0), n;
                }
                function nc(t) {
                    var n = this.__data__;
                    if (se) {
                        var e = n[t];
                        return e === tn ? i : e;
                    }
                    return W.call(n, t) ? n[t] : i;
                }
                function ec(t) {
                    var n = this.__data__;
                    return se ? n[t] !== i : W.call(n, t);
                }
                function rc(t, n) {
                    var e = this.__data__;
                    return (this.size += this.has(t) ? 0 : 1), (e[t] = se && n === i ? tn : n), this;
                }
                (vn.prototype.clear = jf), (vn.prototype.delete = tc), (vn.prototype.get = nc), (vn.prototype.has = ec), (vn.prototype.set = rc);
                function zt(t) {
                    var n = -1,
                        e = t == null ? 0 : t.length;
                    for (this.clear(); ++n < e; ) {
                        var r = t[n];
                        this.set(r[0], r[1]);
                    }
                }
                function ic() {
                    (this.__data__ = []), (this.size = 0);
                }
                function sc(t) {
                    var n = this.__data__,
                        e = ze(n, t);
                    if (e < 0) return !1;
                    var r = n.length - 1;
                    return e == r ? n.pop() : qe.call(n, e, 1), --this.size, !0;
                }
                function uc(t) {
                    var n = this.__data__,
                        e = ze(n, t);
                    return e < 0 ? i : n[e][1];
                }
                function ac(t) {
                    return ze(this.__data__, t) > -1;
                }
                function oc(t, n) {
                    var e = this.__data__,
                        r = ze(e, t);
                    return r < 0 ? (++this.size, e.push([t, n])) : (e[r][1] = n), this;
                }
                (zt.prototype.clear = ic), (zt.prototype.delete = sc), (zt.prototype.get = uc), (zt.prototype.has = ac), (zt.prototype.set = oc);
                function Kt(t) {
                    var n = -1,
                        e = t == null ? 0 : t.length;
                    for (this.clear(); ++n < e; ) {
                        var r = t[n];
                        this.set(r[0], r[1]);
                    }
                }
                function fc() {
                    (this.size = 0), (this.__data__ = { hash: new vn(), map: new (re || zt)(), string: new vn() });
                }
                function cc(t) {
                    var n = er(this, t).delete(t);
                    return (this.size -= n ? 1 : 0), n;
                }
                function hc(t) {
                    return er(this, t).get(t);
                }
                function lc(t) {
                    return er(this, t).has(t);
                }
                function pc(t, n) {
                    var e = er(this, t),
                        r = e.size;
                    return e.set(t, n), (this.size += e.size == r ? 0 : 1), this;
                }
                (Kt.prototype.clear = fc), (Kt.prototype.delete = cc), (Kt.prototype.get = hc), (Kt.prototype.has = lc), (Kt.prototype.set = pc);
                function _n(t) {
                    var n = -1,
                        e = t == null ? 0 : t.length;
                    for (this.__data__ = new Kt(); ++n < e; ) this.add(t[n]);
                }
                function dc(t) {
                    return this.__data__.set(t, tn), this;
                }
                function gc(t) {
                    return this.__data__.has(t);
                }
                (_n.prototype.add = _n.prototype.push = dc), (_n.prototype.has = gc);
                function Ot(t) {
                    var n = (this.__data__ = new zt(t));
                    this.size = n.size;
                }
                function vc() {
                    (this.__data__ = new zt()), (this.size = 0);
                }
                function _c(t) {
                    var n = this.__data__,
                        e = n.delete(t);
                    return (this.size = n.size), e;
                }
                function mc(t) {
                    return this.__data__.get(t);
                }
                function wc(t) {
                    return this.__data__.has(t);
                }
                function Pc(t, n) {
                    var e = this.__data__;
                    if (e instanceof zt) {
                        var r = e.__data__;
                        if (!re || r.length < w - 1) return r.push([t, n]), (this.size = ++e.size), this;
                        e = this.__data__ = new Kt(r);
                    }
                    return e.set(t, n), (this.size = e.size), this;
                }
                (Ot.prototype.clear = vc), (Ot.prototype.delete = _c), (Ot.prototype.get = mc), (Ot.prototype.has = wc), (Ot.prototype.set = Pc);
                function Ms(t, n) {
                    var e = b(t),
                        r = !e && An(t),
                        u = !e && !r && hn(t),
                        o = !e && !r && !u && Gn(t),
                        f = e || r || u || o,
                        c = f ? Wr(t.length, bf) : [],
                        l = c.length;
                    for (var v in t)
                        (n || W.call(t, v)) &&
                            !(
                                f &&
                                (v == "length" ||
                                    (u && (v == "offset" || v == "parent")) ||
                                    (o && (v == "buffer" || v == "byteLength" || v == "byteOffset")) ||
                                    Xt(v, l))
                            ) &&
                            c.push(v);
                    return c;
                }
                function Bs(t) {
                    var n = t.length;
                    return n ? t[ri(0, n - 1)] : i;
                }
                function Cc(t, n) {
                    return rr(ut(t), mn(n, 0, t.length));
                }
                function Ac(t) {
                    return rr(ut(t));
                }
                function Yr(t, n, e) {
                    ((e !== i && !Rt(t[n], e)) || (e === i && !(n in t))) && Jt(t, n, e);
                }
                function ae(t, n, e) {
                    var r = t[n];
                    (!(W.call(t, n) && Rt(r, e)) || (e === i && !(n in t))) && Jt(t, n, e);
                }
                function ze(t, n) {
                    for (var e = t.length; e--; ) if (Rt(t[e][0], n)) return e;
                    return -1;
                }
                function Ic(t, n, e, r) {
                    return (
                        an(t, function (u, o, f) {
                            n(r, u, e(u), f);
                        }),
                        r
                    );
                }
                function Gs(t, n) {
                    return t && Ut(n, V(n), t);
                }
                function xc(t, n) {
                    return t && Ut(n, ot(n), t);
                }
                function Jt(t, n, e) {
                    n == "__proto__" && Ue ? Ue(t, n, { configurable: !0, enumerable: !0, value: e, writable: !0 }) : (t[n] = e);
                }
                function Zr(t, n) {
                    for (var e = -1, r = n.length, u = d(r), o = t == null; ++e < r; ) u[e] = o ? i : Oi(t, n[e]);
                    return u;
                }
                function mn(t, n, e) {
                    return t === t && (e !== i && (t = t <= e ? t : e), n !== i && (t = t >= n ? t : n)), t;
                }
                function Ct(t, n, e, r, u, o) {
                    var f,
                        c = n & Ht,
                        l = n & Mt,
                        v = n & En;
                    if ((e && (f = u ? e(t, r, u, o) : e(t)), f !== i)) return f;
                    if (!K(t)) return t;
                    var _ = b(t);
                    if (_) {
                        if (((f = lh(t)), !c)) return ut(t, f);
                    } else {
                        var m = et(t),
                            C = m == Ae || m == Ki;
                        if (hn(t)) return pu(t, c);
                        if (m == Gt || m == Rn || (C && !u)) {
                            if (((f = l || C ? {} : Lu(t)), !c)) return l ? nh(t, xc(f, t)) : th(t, Gs(f, t));
                        } else {
                            if (!B[m]) return u ? t : {};
                            f = ph(t, m, c);
                        }
                    }
                    o || (o = new Ot());
                    var I = o.get(t);
                    if (I) return I;
                    o.set(t, f),
                        aa(t)
                            ? t.forEach(function (S) {
                                  f.add(Ct(S, n, e, S, t, o));
                              })
                            : sa(t) &&
                              t.forEach(function (S, D) {
                                  f.set(D, Ct(S, n, e, D, t, o));
                              });
                    var y = v ? (l ? di : pi) : l ? ot : V,
                        L = _ ? i : y(t);
                    return (
                        mt(L || t, function (S, D) {
                            L && ((D = S), (S = t[D])), ae(f, D, Ct(S, n, e, D, t, o));
                        }),
                        f
                    );
                }
                function Ec(t) {
                    var n = V(t);
                    return function (e) {
                        return zs(e, t, n);
                    };
                }
                function zs(t, n, e) {
                    var r = e.length;
                    if (t == null) return !r;
                    for (t = M(t); r--; ) {
                        var u = e[r],
                            o = n[u],
                            f = t[u];
                        if ((f === i && !(u in t)) || !o(f)) return !1;
                    }
                    return !0;
                }
                function Ks(t, n, e) {
                    if (typeof t != "function") throw new wt(O);
                    return de(function () {
                        t.apply(i, e);
                    }, n);
                }
                function oe(t, n, e, r) {
                    var u = -1,
                        o = Se,
                        f = !0,
                        c = t.length,
                        l = [],
                        v = n.length;
                    if (!c) return l;
                    e && (n = z(n, ht(e))), r ? ((o = Dr), (f = !1)) : n.length >= w && ((o = ne), (f = !1), (n = new _n(n)));
                    t: for (; ++u < c; ) {
                        var _ = t[u],
                            m = e == null ? _ : e(_);
                        if (((_ = r || _ !== 0 ? _ : 0), f && m === m)) {
                            for (var C = v; C--; ) if (n[C] === m) continue t;
                            l.push(_);
                        } else o(n, m, r) || l.push(_);
                    }
                    return l;
                }
                var an = mu(qt),
                    Js = mu(Qr, !0);
                function yc(t, n) {
                    var e = !0;
                    return (
                        an(t, function (r, u, o) {
                            return (e = !!n(r, u, o)), e;
                        }),
                        e
                    );
                }
                function Ke(t, n, e) {
                    for (var r = -1, u = t.length; ++r < u; ) {
                        var o = t[r],
                            f = n(o);
                        if (f != null && (c === i ? f === f && !pt(f) : e(f, c)))
                            var c = f,
                                l = o;
                    }
                    return l;
                }
                function Sc(t, n, e, r) {
                    var u = t.length;
                    for (e = T(e), e < 0 && (e = -e > u ? 0 : u + e), r = r === i || r > u ? u : T(r), r < 0 && (r += u), r = e > r ? 0 : fa(r); e < r; )
                        t[e++] = n;
                    return t;
                }
                function Ys(t, n) {
                    var e = [];
                    return (
                        an(t, function (r, u, o) {
                            n(r, u, o) && e.push(r);
                        }),
                        e
                    );
                }
                function tt(t, n, e, r, u) {
                    var o = -1,
                        f = t.length;
                    for (e || (e = gh), u || (u = []); ++o < f; ) {
                        var c = t[o];
                        n > 0 && e(c) ? (n > 1 ? tt(c, n - 1, e, r, u) : rn(u, c)) : r || (u[u.length] = c);
                    }
                    return u;
                }
                var Xr = wu(),
                    Zs = wu(!0);
                function qt(t, n) {
                    return t && Xr(t, n, V);
                }
                function Qr(t, n) {
                    return t && Zs(t, n, V);
                }
                function Je(t, n) {
                    return en(n, function (e) {
                        return Qt(t[e]);
                    });
                }
                function wn(t, n) {
                    n = fn(n, t);
                    for (var e = 0, r = n.length; t != null && e < r; ) t = t[Ft(n[e++])];
                    return e && e == r ? t : i;
                }
                function Xs(t, n, e) {
                    var r = n(t);
                    return b(t) ? r : rn(r, e(t));
                }
                function rt(t) {
                    return t == null ? (t === i ? to : ka) : gn && gn in M(t) ? fh(t) : Ah(t);
                }
                function Vr(t, n) {
                    return t > n;
                }
                function Oc(t, n) {
                    return t != null && W.call(t, n);
                }
                function Rc(t, n) {
                    return t != null && n in M(t);
                }
                function bc(t, n, e) {
                    return t >= nt(n, e) && t < Q(n, e);
                }
                function kr(t, n, e) {
                    for (var r = e ? Dr : Se, u = t[0].length, o = t.length, f = o, c = d(o), l = 1 / 0, v = []; f--; ) {
                        var _ = t[f];
                        f && n && (_ = z(_, ht(n))), (l = nt(_.length, l)), (c[f] = !e && (n || (u >= 120 && _.length >= 120)) ? new _n(f && _) : i);
                    }
                    _ = t[0];
                    var m = -1,
                        C = c[0];
                    t: for (; ++m < u && v.length < l; ) {
                        var I = _[m],
                            y = n ? n(I) : I;
                        if (((I = e || I !== 0 ? I : 0), !(C ? ne(C, y) : r(v, y, e)))) {
                            for (f = o; --f; ) {
                                var L = c[f];
                                if (!(L ? ne(L, y) : r(t[f], y, e))) continue t;
                            }
                            C && C.push(y), v.push(I);
                        }
                    }
                    return v;
                }
                function Tc(t, n, e, r) {
                    return (
                        qt(t, function (u, o, f) {
                            n(r, e(u), o, f);
                        }),
                        r
                    );
                }
                function fe(t, n, e) {
                    (n = fn(n, t)), (t = $u(t, n));
                    var r = t == null ? t : t[Ft(It(n))];
                    return r == null ? i : ct(r, t, e);
                }
                function Qs(t) {
                    return J(t) && rt(t) == Rn;
                }
                function Lc(t) {
                    return J(t) && rt(t) == te;
                }
                function Hc(t) {
                    return J(t) && rt(t) == Xn;
                }
                function ce(t, n, e, r, u) {
                    return t === n ? !0 : t == null || n == null || (!J(t) && !J(n)) ? t !== t && n !== n : Dc(t, n, e, r, ce, u);
                }
                function Dc(t, n, e, r, u, o) {
                    var f = b(t),
                        c = b(n),
                        l = f ? Pe : et(t),
                        v = c ? Pe : et(n);
                    (l = l == Rn ? Gt : l), (v = v == Rn ? Gt : v);
                    var _ = l == Gt,
                        m = v == Gt,
                        C = l == v;
                    if (C && hn(t)) {
                        if (!hn(n)) return !1;
                        (f = !0), (_ = !1);
                    }
                    if (C && !_) return o || (o = new Ot()), f || Gn(t) ? Ru(t, n, e, r, u, o) : ah(t, n, l, e, r, u, o);
                    if (!(e & yn)) {
                        var I = _ && W.call(t, "__wrapped__"),
                            y = m && W.call(n, "__wrapped__");
                        if (I || y) {
                            var L = I ? t.value() : t,
                                S = y ? n.value() : n;
                            return o || (o = new Ot()), u(L, S, e, r, o);
                        }
                    }
                    return C ? (o || (o = new Ot()), oh(t, n, e, r, u, o)) : !1;
                }
                function Nc(t) {
                    return J(t) && et(t) == Et;
                }
                function jr(t, n, e, r) {
                    var u = e.length,
                        o = u,
                        f = !r;
                    if (t == null) return !o;
                    for (t = M(t); u--; ) {
                        var c = e[u];
                        if (f && c[2] ? c[1] !== t[c[0]] : !(c[0] in t)) return !1;
                    }
                    for (; ++u < o; ) {
                        c = e[u];
                        var l = c[0],
                            v = t[l],
                            _ = c[1];
                        if (f && c[2]) {
                            if (v === i && !(l in t)) return !1;
                        } else {
                            var m = new Ot();
                            if (r) var C = r(v, _, l, t, n, m);
                            if (!(C === i ? ce(_, v, yn | me, r, m) : C)) return !1;
                        }
                    }
                    return !0;
                }
                function Vs(t) {
                    if (!K(t) || _h(t)) return !1;
                    var n = Qt(t) ? Nf : xo;
                    return n.test(Cn(t));
                }
                function $c(t) {
                    return J(t) && rt(t) == Vn;
                }
                function qc(t) {
                    return J(t) && et(t) == yt;
                }
                function Uc(t) {
                    return J(t) && fr(t.length) && !!G[rt(t)];
                }
                function ks(t) {
                    return typeof t == "function" ? t : t == null ? ft : typeof t == "object" ? (b(t) ? nu(t[0], t[1]) : tu(t)) : Pa(t);
                }
                function ti(t) {
                    if (!pe(t)) return Mf(t);
                    var n = [];
                    for (var e in M(t)) W.call(t, e) && e != "constructor" && n.push(e);
                    return n;
                }
                function Fc(t) {
                    if (!K(t)) return Ch(t);
                    var n = pe(t),
                        e = [];
                    for (var r in t) (r == "constructor" && (n || !W.call(t, r))) || e.push(r);
                    return e;
                }
                function ni(t, n) {
                    return t < n;
                }
                function js(t, n) {
                    var e = -1,
                        r = at(t) ? d(t.length) : [];
                    return (
                        an(t, function (u, o, f) {
                            r[++e] = n(u, o, f);
                        }),
                        r
                    );
                }
                function tu(t) {
                    var n = vi(t);
                    return n.length == 1 && n[0][2]
                        ? Du(n[0][0], n[0][1])
                        : function (e) {
                              return e === t || jr(e, t, n);
                          };
                }
                function nu(t, n) {
                    return mi(t) && Hu(n)
                        ? Du(Ft(t), n)
                        : function (e) {
                              var r = Oi(e, t);
                              return r === i && r === n ? Ri(e, t) : ce(n, r, yn | me);
                          };
                }
                function Ye(t, n, e, r, u) {
                    t !== n &&
                        Xr(
                            n,
                            function (o, f) {
                                if ((u || (u = new Ot()), K(o))) Wc(t, n, f, e, Ye, r, u);
                                else {
                                    var c = r ? r(Pi(t, f), o, f + "", t, n, u) : i;
                                    c === i && (c = o), Yr(t, f, c);
                                }
                            },
                            ot
                        );
                }
                function Wc(t, n, e, r, u, o, f) {
                    var c = Pi(t, e),
                        l = Pi(n, e),
                        v = f.get(l);
                    if (v) {
                        Yr(t, e, v);
                        return;
                    }
                    var _ = o ? o(c, l, e + "", t, n, f) : i,
                        m = _ === i;
                    if (m) {
                        var C = b(l),
                            I = !C && hn(l),
                            y = !C && !I && Gn(l);
                        (_ = l),
                            C || I || y
                                ? b(c)
                                    ? (_ = c)
                                    : Y(c)
                                    ? (_ = ut(c))
                                    : I
                                    ? ((m = !1), (_ = pu(l, !0)))
                                    : y
                                    ? ((m = !1), (_ = du(l, !0)))
                                    : (_ = [])
                                : ge(l) || An(l)
                                ? ((_ = c), An(c) ? (_ = ca(c)) : (!K(c) || Qt(c)) && (_ = Lu(l)))
                                : (m = !1);
                    }
                    m && (f.set(l, _), u(_, l, r, o, f), f.delete(l)), Yr(t, e, _);
                }
                function eu(t, n) {
                    var e = t.length;
                    if (e) return (n += n < 0 ? e : 0), Xt(n, e) ? t[n] : i;
                }
                function ru(t, n, e) {
                    n.length
                        ? (n = z(n, function (o) {
                              return b(o)
                                  ? function (f) {
                                        return wn(f, o.length === 1 ? o[0] : o);
                                    }
                                  : o;
                          }))
                        : (n = [ft]);
                    var r = -1;
                    n = z(n, ht(E()));
                    var u = js(t, function (o, f, c) {
                        var l = z(n, function (v) {
                            return v(o);
                        });
                        return { criteria: l, index: ++r, value: o };
                    });
                    return pf(u, function (o, f) {
                        return jc(o, f, e);
                    });
                }
                function Mc(t, n) {
                    return iu(t, n, function (e, r) {
                        return Ri(t, r);
                    });
                }
                function iu(t, n, e) {
                    for (var r = -1, u = n.length, o = {}; ++r < u; ) {
                        var f = n[r],
                            c = wn(t, f);
                        e(c, f) && he(o, fn(f, t), c);
                    }
                    return o;
                }
                function Bc(t) {
                    return function (n) {
                        return wn(n, t);
                    };
                }
                function ei(t, n, e, r) {
                    var u = r ? lf : Ln,
                        o = -1,
                        f = n.length,
                        c = t;
                    for (t === n && (n = ut(n)), e && (c = z(t, ht(e))); ++o < f; )
                        for (var l = 0, v = n[o], _ = e ? e(v) : v; (l = u(c, _, l, r)) > -1; ) c !== t && qe.call(c, l, 1), qe.call(t, l, 1);
                    return t;
                }
                function su(t, n) {
                    for (var e = t ? n.length : 0, r = e - 1; e--; ) {
                        var u = n[e];
                        if (e == r || u !== o) {
                            var o = u;
                            Xt(u) ? qe.call(t, u, 1) : ui(t, u);
                        }
                    }
                    return t;
                }
                function ri(t, n) {
                    return t + We(Fs() * (n - t + 1));
                }
                function Gc(t, n, e, r) {
                    for (var u = -1, o = Q(Fe((n - t) / (e || 1)), 0), f = d(o); o--; ) (f[r ? o : ++u] = t), (t += e);
                    return f;
                }
                function ii(t, n) {
                    var e = "";
                    if (!t || n < 1 || n > nn) return e;
                    do n % 2 && (e += t), (n = We(n / 2)), n && (t += t);
                    while (n);
                    return e;
                }
                function H(t, n) {
                    return Ci(Nu(t, n, ft), t + "");
                }
                function zc(t) {
                    return Bs(zn(t));
                }
                function Kc(t, n) {
                    var e = zn(t);
                    return rr(e, mn(n, 0, e.length));
                }
                function he(t, n, e, r) {
                    if (!K(t)) return t;
                    n = fn(n, t);
                    for (var u = -1, o = n.length, f = o - 1, c = t; c != null && ++u < o; ) {
                        var l = Ft(n[u]),
                            v = e;
                        if (l === "__proto__" || l === "constructor" || l === "prototype") return t;
                        if (u != f) {
                            var _ = c[l];
                            (v = r ? r(_, l, c) : i), v === i && (v = K(_) ? _ : Xt(n[u + 1]) ? [] : {});
                        }
                        ae(c, l, v), (c = c[l]);
                    }
                    return t;
                }
                var uu = Me
                        ? function (t, n) {
                              return Me.set(t, n), t;
                          }
                        : ft,
                    Jc = Ue
                        ? function (t, n) {
                              return Ue(t, "toString", { configurable: !0, enumerable: !1, value: Ti(n), writable: !0 });
                          }
                        : ft;
                function Yc(t) {
                    return rr(zn(t));
                }
                function At(t, n, e) {
                    var r = -1,
                        u = t.length;
                    n < 0 && (n = -n > u ? 0 : u + n), (e = e > u ? u : e), e < 0 && (e += u), (u = n > e ? 0 : (e - n) >>> 0), (n >>>= 0);
                    for (var o = d(u); ++r < u; ) o[r] = t[r + n];
                    return o;
                }
                function Zc(t, n) {
                    var e;
                    return (
                        an(t, function (r, u, o) {
                            return (e = n(r, u, o)), !e;
                        }),
                        !!e
                    );
                }
                function Ze(t, n, e) {
                    var r = 0,
                        u = t == null ? r : t.length;
                    if (typeof n == "number" && n === n && u <= Za) {
                        for (; r < u; ) {
                            var o = (r + u) >>> 1,
                                f = t[o];
                            f !== null && !pt(f) && (e ? f <= n : f < n) ? (r = o + 1) : (u = o);
                        }
                        return u;
                    }
                    return si(t, n, ft, e);
                }
                function si(t, n, e, r) {
                    var u = 0,
                        o = t == null ? 0 : t.length;
                    if (o === 0) return 0;
                    n = e(n);
                    for (var f = n !== n, c = n === null, l = pt(n), v = n === i; u < o; ) {
                        var _ = We((u + o) / 2),
                            m = e(t[_]),
                            C = m !== i,
                            I = m === null,
                            y = m === m,
                            L = pt(m);
                        if (f) var S = r || y;
                        else
                            v
                                ? (S = y && (r || C))
                                : c
                                ? (S = y && C && (r || !I))
                                : l
                                ? (S = y && C && !I && (r || !L))
                                : I || L
                                ? (S = !1)
                                : (S = r ? m <= n : m < n);
                        S ? (u = _ + 1) : (o = _);
                    }
                    return nt(o, Ya);
                }
                function au(t, n) {
                    for (var e = -1, r = t.length, u = 0, o = []; ++e < r; ) {
                        var f = t[e],
                            c = n ? n(f) : f;
                        if (!e || !Rt(c, l)) {
                            var l = c;
                            o[u++] = f === 0 ? 0 : f;
                        }
                    }
                    return o;
                }
                function ou(t) {
                    return typeof t == "number" ? t : pt(t) ? we : +t;
                }
                function lt(t) {
                    if (typeof t == "string") return t;
                    if (b(t)) return z(t, lt) + "";
                    if (pt(t)) return Ws ? Ws.call(t) : "";
                    var n = t + "";
                    return n == "0" && 1 / t == -pn ? "-0" : n;
                }
                function on(t, n, e) {
                    var r = -1,
                        u = Se,
                        o = t.length,
                        f = !0,
                        c = [],
                        l = c;
                    if (e) (f = !1), (u = Dr);
                    else if (o >= w) {
                        var v = n ? null : sh(t);
                        if (v) return Re(v);
                        (f = !1), (u = ne), (l = new _n());
                    } else l = n ? [] : c;
                    t: for (; ++r < o; ) {
                        var _ = t[r],
                            m = n ? n(_) : _;
                        if (((_ = e || _ !== 0 ? _ : 0), f && m === m)) {
                            for (var C = l.length; C--; ) if (l[C] === m) continue t;
                            n && l.push(m), c.push(_);
                        } else u(l, m, e) || (l !== c && l.push(m), c.push(_));
                    }
                    return c;
                }
                function ui(t, n) {
                    return (n = fn(n, t)), (t = $u(t, n)), t == null || delete t[Ft(It(n))];
                }
                function fu(t, n, e, r) {
                    return he(t, n, e(wn(t, n)), r);
                }
                function Xe(t, n, e, r) {
                    for (var u = t.length, o = r ? u : -1; (r ? o-- : ++o < u) && n(t[o], o, t); );
                    return e ? At(t, r ? 0 : o, r ? o + 1 : u) : At(t, r ? o + 1 : 0, r ? u : o);
                }
                function cu(t, n) {
                    var e = t;
                    return (
                        e instanceof N && (e = e.value()),
                        Nr(
                            n,
                            function (r, u) {
                                return u.func.apply(u.thisArg, rn([r], u.args));
                            },
                            e
                        )
                    );
                }
                function ai(t, n, e) {
                    var r = t.length;
                    if (r < 2) return r ? on(t[0]) : [];
                    for (var u = -1, o = d(r); ++u < r; ) for (var f = t[u], c = -1; ++c < r; ) c != u && (o[u] = oe(o[u] || f, t[c], n, e));
                    return on(tt(o, 1), n, e);
                }
                function hu(t, n, e) {
                    for (var r = -1, u = t.length, o = n.length, f = {}; ++r < u; ) {
                        var c = r < o ? n[r] : i;
                        e(f, t[r], c);
                    }
                    return f;
                }
                function oi(t) {
                    return Y(t) ? t : [];
                }
                function fi(t) {
                    return typeof t == "function" ? t : ft;
                }
                function fn(t, n) {
                    return b(t) ? t : mi(t, n) ? [t] : Wu(U(t));
                }
                var Xc = H;
                function cn(t, n, e) {
                    var r = t.length;
                    return (e = e === i ? r : e), !n && e >= r ? t : At(t, n, e);
                }
                var lu =
                    $f ||
                    function (t) {
                        return j.clearTimeout(t);
                    };
                function pu(t, n) {
                    if (n) return t.slice();
                    var e = t.length,
                        r = Ds ? Ds(e) : new t.constructor(e);
                    return t.copy(r), r;
                }
                function ci(t) {
                    var n = new t.constructor(t.byteLength);
                    return new Ne(n).set(new Ne(t)), n;
                }
                function Qc(t, n) {
                    var e = n ? ci(t.buffer) : t.buffer;
                    return new t.constructor(e, t.byteOffset, t.byteLength);
                }
                function Vc(t) {
                    var n = new t.constructor(t.source, Qi.exec(t));
                    return (n.lastIndex = t.lastIndex), n;
                }
                function kc(t) {
                    return ue ? M(ue.call(t)) : {};
                }
                function du(t, n) {
                    var e = n ? ci(t.buffer) : t.buffer;
                    return new t.constructor(e, t.byteOffset, t.length);
                }
                function gu(t, n) {
                    if (t !== n) {
                        var e = t !== i,
                            r = t === null,
                            u = t === t,
                            o = pt(t),
                            f = n !== i,
                            c = n === null,
                            l = n === n,
                            v = pt(n);
                        if ((!c && !v && !o && t > n) || (o && f && l && !c && !v) || (r && f && l) || (!e && l) || !u) return 1;
                        if ((!r && !o && !v && t < n) || (v && e && u && !r && !o) || (c && e && u) || (!f && u) || !l) return -1;
                    }
                    return 0;
                }
                function jc(t, n, e) {
                    for (var r = -1, u = t.criteria, o = n.criteria, f = u.length, c = e.length; ++r < f; ) {
                        var l = gu(u[r], o[r]);
                        if (l) {
                            if (r >= c) return l;
                            var v = e[r];
                            return l * (v == "desc" ? -1 : 1);
                        }
                    }
                    return t.index - n.index;
                }
                function vu(t, n, e, r) {
                    for (var u = -1, o = t.length, f = e.length, c = -1, l = n.length, v = Q(o - f, 0), _ = d(l + v), m = !r; ++c < l; ) _[c] = n[c];
                    for (; ++u < f; ) (m || u < o) && (_[e[u]] = t[u]);
                    for (; v--; ) _[c++] = t[u++];
                    return _;
                }
                function _u(t, n, e, r) {
                    for (var u = -1, o = t.length, f = -1, c = e.length, l = -1, v = n.length, _ = Q(o - c, 0), m = d(_ + v), C = !r; ++u < _; ) m[u] = t[u];
                    for (var I = u; ++l < v; ) m[I + l] = n[l];
                    for (; ++f < c; ) (C || u < o) && (m[I + e[f]] = t[u++]);
                    return m;
                }
                function ut(t, n) {
                    var e = -1,
                        r = t.length;
                    for (n || (n = d(r)); ++e < r; ) n[e] = t[e];
                    return n;
                }
                function Ut(t, n, e, r) {
                    var u = !e;
                    e || (e = {});
                    for (var o = -1, f = n.length; ++o < f; ) {
                        var c = n[o],
                            l = r ? r(e[c], t[c], c, e, t) : i;
                        l === i && (l = t[c]), u ? Jt(e, c, l) : ae(e, c, l);
                    }
                    return e;
                }
                function th(t, n) {
                    return Ut(t, _i(t), n);
                }
                function nh(t, n) {
                    return Ut(t, bu(t), n);
                }
                function Qe(t, n) {
                    return function (e, r) {
                        var u = b(e) ? uf : Ic,
                            o = n ? n() : {};
                        return u(e, t, E(r, 2), o);
                    };
                }
                function Wn(t) {
                    return H(function (n, e) {
                        var r = -1,
                            u = e.length,
                            o = u > 1 ? e[u - 1] : i,
                            f = u > 2 ? e[2] : i;
                        for (
                            o = t.length > 3 && typeof o == "function" ? (u--, o) : i, f && it(e[0], e[1], f) && ((o = u < 3 ? i : o), (u = 1)), n = M(n);
                            ++r < u;

                        ) {
                            var c = e[r];
                            c && t(n, c, r, o);
                        }
                        return n;
                    });
                }
                function mu(t, n) {
                    return function (e, r) {
                        if (e == null) return e;
                        if (!at(e)) return t(e, r);
                        for (var u = e.length, o = n ? u : -1, f = M(e); (n ? o-- : ++o < u) && r(f[o], o, f) !== !1; );
                        return e;
                    };
                }
                function wu(t) {
                    return function (n, e, r) {
                        for (var u = -1, o = M(n), f = r(n), c = f.length; c--; ) {
                            var l = f[t ? c : ++u];
                            if (e(o[l], l, o) === !1) break;
                        }
                        return n;
                    };
                }
                function eh(t, n, e) {
                    var r = n & vt,
                        u = le(t);
                    function o() {
                        var f = this && this !== j && this instanceof o ? u : t;
                        return f.apply(r ? e : this, arguments);
                    }
                    return o;
                }
                function Pu(t) {
                    return function (n) {
                        n = U(n);
                        var e = Hn(n) ? St(n) : i,
                            r = e ? e[0] : n.charAt(0),
                            u = e ? cn(e, 1).join("") : n.slice(1);
                        return r[t]() + u;
                    };
                }
                function Mn(t) {
                    return function (n) {
                        return Nr(ma(_a(n).replace(Ko, "")), t, "");
                    };
                }
                function le(t) {
                    return function () {
                        var n = arguments;
                        switch (n.length) {
                            case 0:
                                return new t();
                            case 1:
                                return new t(n[0]);
                            case 2:
                                return new t(n[0], n[1]);
                            case 3:
                                return new t(n[0], n[1], n[2]);
                            case 4:
                                return new t(n[0], n[1], n[2], n[3]);
                            case 5:
                                return new t(n[0], n[1], n[2], n[3], n[4]);
                            case 6:
                                return new t(n[0], n[1], n[2], n[3], n[4], n[5]);
                            case 7:
                                return new t(n[0], n[1], n[2], n[3], n[4], n[5], n[6]);
                        }
                        var e = Fn(t.prototype),
                            r = t.apply(e, n);
                        return K(r) ? r : e;
                    };
                }
                function rh(t, n, e) {
                    var r = le(t);
                    function u() {
                        for (var o = arguments.length, f = d(o), c = o, l = Bn(u); c--; ) f[c] = arguments[c];
                        var v = o < 3 && f[0] !== l && f[o - 1] !== l ? [] : sn(f, l);
                        if (((o -= v.length), o < e)) return Eu(t, n, Ve, u.placeholder, i, f, v, i, i, e - o);
                        var _ = this && this !== j && this instanceof u ? r : t;
                        return ct(_, this, f);
                    }
                    return u;
                }
                function Cu(t) {
                    return function (n, e, r) {
                        var u = M(n);
                        if (!at(n)) {
                            var o = E(e, 3);
                            (n = V(n)),
                                (e = function (c) {
                                    return o(u[c], c, u);
                                });
                        }
                        var f = t(n, e, r);
                        return f > -1 ? u[o ? n[f] : f] : i;
                    };
                }
                function Au(t) {
                    return Zt(function (n) {
                        var e = n.length,
                            r = e,
                            u = Pt.prototype.thru;
                        for (t && n.reverse(); r--; ) {
                            var o = n[r];
                            if (typeof o != "function") throw new wt(O);
                            if (u && !f && nr(o) == "wrapper") var f = new Pt([], !0);
                        }
                        for (r = f ? r : e; ++r < e; ) {
                            o = n[r];
                            var c = nr(o),
                                l = c == "wrapper" ? gi(o) : i;
                            l && wi(l[0]) && l[1] == (Bt | Dt | Nt | Yn) && !l[4].length && l[9] == 1
                                ? (f = f[nr(l[0])].apply(f, l[3]))
                                : (f = o.length == 1 && wi(o) ? f[c]() : f.thru(o));
                        }
                        return function () {
                            var v = arguments,
                                _ = v[0];
                            if (f && v.length == 1 && b(_)) return f.plant(_).value();
                            for (var m = 0, C = e ? n[m].apply(this, v) : _; ++m < e; ) C = n[m].call(this, C);
                            return C;
                        };
                    });
                }
                function Ve(t, n, e, r, u, o, f, c, l, v) {
                    var _ = n & Bt,
                        m = n & vt,
                        C = n & ln,
                        I = n & (Dt | Sn),
                        y = n & gr,
                        L = C ? i : le(t);
                    function S() {
                        for (var D = arguments.length, $ = d(D), dt = D; dt--; ) $[dt] = arguments[dt];
                        if (I)
                            var st = Bn(S),
                                gt = gf($, st);
                        if ((r && ($ = vu($, r, u, I)), o && ($ = _u($, o, f, I)), (D -= gt), I && D < v)) {
                            var Z = sn($, st);
                            return Eu(t, n, Ve, S.placeholder, e, $, Z, c, l, v - D);
                        }
                        var bt = m ? e : this,
                            kt = C ? bt[t] : t;
                        return (
                            (D = $.length),
                            c ? ($ = Ih($, c)) : y && D > 1 && $.reverse(),
                            _ && l < D && ($.length = l),
                            this && this !== j && this instanceof S && (kt = L || le(kt)),
                            kt.apply(bt, $)
                        );
                    }
                    return S;
                }
                function Iu(t, n) {
                    return function (e, r) {
                        return Tc(e, t, n(r), {});
                    };
                }
                function ke(t, n) {
                    return function (e, r) {
                        var u;
                        if (e === i && r === i) return n;
                        if ((e !== i && (u = e), r !== i)) {
                            if (u === i) return r;
                            typeof e == "string" || typeof r == "string" ? ((e = lt(e)), (r = lt(r))) : ((e = ou(e)), (r = ou(r))), (u = t(e, r));
                        }
                        return u;
                    };
                }
                function hi(t) {
                    return Zt(function (n) {
                        return (
                            (n = z(n, ht(E()))),
                            H(function (e) {
                                var r = this;
                                return t(n, function (u) {
                                    return ct(u, r, e);
                                });
                            })
                        );
                    });
                }
                function je(t, n) {
                    n = n === i ? " " : lt(n);
                    var e = n.length;
                    if (e < 2) return e ? ii(n, t) : n;
                    var r = ii(n, Fe(t / Dn(n)));
                    return Hn(n) ? cn(St(r), 0, t).join("") : r.slice(0, t);
                }
                function ih(t, n, e, r) {
                    var u = n & vt,
                        o = le(t);
                    function f() {
                        for (
                            var c = -1, l = arguments.length, v = -1, _ = r.length, m = d(_ + l), C = this && this !== j && this instanceof f ? o : t;
                            ++v < _;

                        )
                            m[v] = r[v];
                        for (; l--; ) m[v++] = arguments[++c];
                        return ct(C, u ? e : this, m);
                    }
                    return f;
                }
                function xu(t) {
                    return function (n, e, r) {
                        return (
                            r && typeof r != "number" && it(n, e, r) && (e = r = i),
                            (n = Vt(n)),
                            e === i ? ((e = n), (n = 0)) : (e = Vt(e)),
                            (r = r === i ? (n < e ? 1 : -1) : Vt(r)),
                            Gc(n, e, r, t)
                        );
                    };
                }
                function tr(t) {
                    return function (n, e) {
                        return (typeof n == "string" && typeof e == "string") || ((n = xt(n)), (e = xt(e))), t(n, e);
                    };
                }
                function Eu(t, n, e, r, u, o, f, c, l, v) {
                    var _ = n & Dt,
                        m = _ ? f : i,
                        C = _ ? i : f,
                        I = _ ? o : i,
                        y = _ ? i : o;
                    (n |= _ ? Nt : On), (n &= ~(_ ? On : Nt)), n & Gi || (n &= ~(vt | ln));
                    var L = [t, n, u, I, m, y, C, c, l, v],
                        S = e.apply(i, L);
                    return wi(t) && qu(S, L), (S.placeholder = r), Uu(S, t, n);
                }
                function li(t) {
                    var n = X[t];
                    return function (e, r) {
                        if (((e = xt(e)), (r = r == null ? 0 : nt(T(r), 292)), r && Us(e))) {
                            var u = (U(e) + "e").split("e"),
                                o = n(u[0] + "e" + (+u[1] + r));
                            return (u = (U(o) + "e").split("e")), +(u[0] + "e" + (+u[1] - r));
                        }
                        return n(e);
                    };
                }
                var sh =
                    qn && 1 / Re(new qn([, -0]))[1] == pn
                        ? function (t) {
                              return new qn(t);
                          }
                        : Di;
                function yu(t) {
                    return function (n) {
                        var e = et(n);
                        return e == Et ? Br(n) : e == yt ? Af(n) : df(n, t(n));
                    };
                }
                function Yt(t, n, e, r, u, o, f, c) {
                    var l = n & ln;
                    if (!l && typeof t != "function") throw new wt(O);
                    var v = r ? r.length : 0;
                    if ((v || ((n &= ~(Nt | On)), (r = u = i)), (f = f === i ? f : Q(T(f), 0)), (c = c === i ? c : T(c)), (v -= u ? u.length : 0), n & On)) {
                        var _ = r,
                            m = u;
                        r = u = i;
                    }
                    var C = l ? i : gi(t),
                        I = [t, n, e, r, u, _, m, o, f, c];
                    if (
                        (C && Ph(I, C),
                        (t = I[0]),
                        (n = I[1]),
                        (e = I[2]),
                        (r = I[3]),
                        (u = I[4]),
                        (c = I[9] = I[9] === i ? (l ? 0 : t.length) : Q(I[9] - v, 0)),
                        !c && n & (Dt | Sn) && (n &= ~(Dt | Sn)),
                        !n || n == vt)
                    )
                        var y = eh(t, n, e);
                    else n == Dt || n == Sn ? (y = rh(t, n, c)) : (n == Nt || n == (vt | Nt)) && !u.length ? (y = ih(t, n, e, r)) : (y = Ve.apply(i, I));
                    var L = C ? uu : qu;
                    return Uu(L(y, I), t, n);
                }
                function Su(t, n, e, r) {
                    return t === i || (Rt(t, $n[e]) && !W.call(r, e)) ? n : t;
                }
                function Ou(t, n, e, r, u, o) {
                    return K(t) && K(n) && (o.set(n, t), Ye(t, n, i, Ou, o), o.delete(n)), t;
                }
                function uh(t) {
                    return ge(t) ? i : t;
                }
                function Ru(t, n, e, r, u, o) {
                    var f = e & yn,
                        c = t.length,
                        l = n.length;
                    if (c != l && !(f && l > c)) return !1;
                    var v = o.get(t),
                        _ = o.get(n);
                    if (v && _) return v == n && _ == t;
                    var m = -1,
                        C = !0,
                        I = e & me ? new _n() : i;
                    for (o.set(t, n), o.set(n, t); ++m < c; ) {
                        var y = t[m],
                            L = n[m];
                        if (r) var S = f ? r(L, y, m, n, t, o) : r(y, L, m, t, n, o);
                        if (S !== i) {
                            if (S) continue;
                            C = !1;
                            break;
                        }
                        if (I) {
                            if (
                                !$r(n, function (D, $) {
                                    if (!ne(I, $) && (y === D || u(y, D, e, r, o))) return I.push($);
                                })
                            ) {
                                C = !1;
                                break;
                            }
                        } else if (!(y === L || u(y, L, e, r, o))) {
                            C = !1;
                            break;
                        }
                    }
                    return o.delete(t), o.delete(n), C;
                }
                function ah(t, n, e, r, u, o, f) {
                    switch (e) {
                        case bn:
                            if (t.byteLength != n.byteLength || t.byteOffset != n.byteOffset) return !1;
                            (t = t.buffer), (n = n.buffer);
                        case te:
                            return !(t.byteLength != n.byteLength || !o(new Ne(t), new Ne(n)));
                        case Zn:
                        case Xn:
                        case Qn:
                            return Rt(+t, +n);
                        case Ce:
                            return t.name == n.name && t.message == n.message;
                        case Vn:
                        case kn:
                            return t == n + "";
                        case Et:
                            var c = Br;
                        case yt:
                            var l = r & yn;
                            if ((c || (c = Re), t.size != n.size && !l)) return !1;
                            var v = f.get(t);
                            if (v) return v == n;
                            (r |= me), f.set(t, n);
                            var _ = Ru(c(t), c(n), r, u, o, f);
                            return f.delete(t), _;
                        case Ie:
                            if (ue) return ue.call(t) == ue.call(n);
                    }
                    return !1;
                }
                function oh(t, n, e, r, u, o) {
                    var f = e & yn,
                        c = pi(t),
                        l = c.length,
                        v = pi(n),
                        _ = v.length;
                    if (l != _ && !f) return !1;
                    for (var m = l; m--; ) {
                        var C = c[m];
                        if (!(f ? C in n : W.call(n, C))) return !1;
                    }
                    var I = o.get(t),
                        y = o.get(n);
                    if (I && y) return I == n && y == t;
                    var L = !0;
                    o.set(t, n), o.set(n, t);
                    for (var S = f; ++m < l; ) {
                        C = c[m];
                        var D = t[C],
                            $ = n[C];
                        if (r) var dt = f ? r($, D, C, n, t, o) : r(D, $, C, t, n, o);
                        if (!(dt === i ? D === $ || u(D, $, e, r, o) : dt)) {
                            L = !1;
                            break;
                        }
                        S || (S = C == "constructor");
                    }
                    if (L && !S) {
                        var st = t.constructor,
                            gt = n.constructor;
                        st != gt &&
                            "constructor" in t &&
                            "constructor" in n &&
                            !(typeof st == "function" && st instanceof st && typeof gt == "function" && gt instanceof gt) &&
                            (L = !1);
                    }
                    return o.delete(t), o.delete(n), L;
                }
                function Zt(t) {
                    return Ci(Nu(t, i, zu), t + "");
                }
                function pi(t) {
                    return Xs(t, V, _i);
                }
                function di(t) {
                    return Xs(t, ot, bu);
                }
                var gi = Me
                    ? function (t) {
                          return Me.get(t);
                      }
                    : Di;
                function nr(t) {
                    for (var n = t.name + "", e = Un[n], r = W.call(Un, n) ? e.length : 0; r--; ) {
                        var u = e[r],
                            o = u.func;
                        if (o == null || o == t) return u.name;
                    }
                    return n;
                }
                function Bn(t) {
                    var n = W.call(a, "placeholder") ? a : t;
                    return n.placeholder;
                }
                function E() {
                    var t = a.iteratee || Li;
                    return (t = t === Li ? ks : t), arguments.length ? t(arguments[0], arguments[1]) : t;
                }
                function er(t, n) {
                    var e = t.__data__;
                    return vh(n) ? e[typeof n == "string" ? "string" : "hash"] : e.map;
                }
                function vi(t) {
                    for (var n = V(t), e = n.length; e--; ) {
                        var r = n[e],
                            u = t[r];
                        n[e] = [r, u, Hu(u)];
                    }
                    return n;
                }
                function Pn(t, n) {
                    var e = wf(t, n);
                    return Vs(e) ? e : i;
                }
                function fh(t) {
                    var n = W.call(t, gn),
                        e = t[gn];
                    try {
                        t[gn] = i;
                        var r = !0;
                    } catch {}
                    var u = He.call(t);
                    return r && (n ? (t[gn] = e) : delete t[gn]), u;
                }
                var _i = zr
                        ? function (t) {
                              return t == null
                                  ? []
                                  : ((t = M(t)),
                                    en(zr(t), function (n) {
                                        return $s.call(t, n);
                                    }));
                          }
                        : Ni,
                    bu = zr
                        ? function (t) {
                              for (var n = []; t; ) rn(n, _i(t)), (t = $e(t));
                              return n;
                          }
                        : Ni,
                    et = rt;
                ((Kr && et(new Kr(new ArrayBuffer(1))) != bn) ||
                    (re && et(new re()) != Et) ||
                    (Jr && et(Jr.resolve()) != Ji) ||
                    (qn && et(new qn()) != yt) ||
                    (ie && et(new ie()) != jn)) &&
                    (et = function (t) {
                        var n = rt(t),
                            e = n == Gt ? t.constructor : i,
                            r = e ? Cn(e) : "";
                        if (r)
                            switch (r) {
                                case Kf:
                                    return bn;
                                case Jf:
                                    return Et;
                                case Yf:
                                    return Ji;
                                case Zf:
                                    return yt;
                                case Xf:
                                    return jn;
                            }
                        return n;
                    });
                function ch(t, n, e) {
                    for (var r = -1, u = e.length; ++r < u; ) {
                        var o = e[r],
                            f = o.size;
                        switch (o.type) {
                            case "drop":
                                t += f;
                                break;
                            case "dropRight":
                                n -= f;
                                break;
                            case "take":
                                n = nt(n, t + f);
                                break;
                            case "takeRight":
                                t = Q(t, n - f);
                                break;
                        }
                    }
                    return { start: t, end: n };
                }
                function hh(t) {
                    var n = t.match(vo);
                    return n ? n[1].split(_o) : [];
                }
                function Tu(t, n, e) {
                    n = fn(n, t);
                    for (var r = -1, u = n.length, o = !1; ++r < u; ) {
                        var f = Ft(n[r]);
                        if (!(o = t != null && e(t, f))) break;
                        t = t[f];
                    }
                    return o || ++r != u ? o : ((u = t == null ? 0 : t.length), !!u && fr(u) && Xt(f, u) && (b(t) || An(t)));
                }
                function lh(t) {
                    var n = t.length,
                        e = new t.constructor(n);
                    return n && typeof t[0] == "string" && W.call(t, "index") && ((e.index = t.index), (e.input = t.input)), e;
                }
                function Lu(t) {
                    return typeof t.constructor == "function" && !pe(t) ? Fn($e(t)) : {};
                }
                function ph(t, n, e) {
                    var r = t.constructor;
                    switch (n) {
                        case te:
                            return ci(t);
                        case Zn:
                        case Xn:
                            return new r(+t);
                        case bn:
                            return Qc(t, e);
                        case vr:
                        case _r:
                        case mr:
                        case wr:
                        case Pr:
                        case Cr:
                        case Ar:
                        case Ir:
                        case xr:
                            return du(t, e);
                        case Et:
                            return new r();
                        case Qn:
                        case kn:
                            return new r(t);
                        case Vn:
                            return Vc(t);
                        case yt:
                            return new r();
                        case Ie:
                            return kc(t);
                    }
                }
                function dh(t, n) {
                    var e = n.length;
                    if (!e) return t;
                    var r = e - 1;
                    return (
                        (n[r] = (e > 1 ? "& " : "") + n[r]),
                        (n = n.join(e > 2 ? ", " : " ")),
                        t.replace(
                            go,
                            `{
/* [wrapped with ` +
                                n +
                                `] */
`
                        )
                    );
                }
                function gh(t) {
                    return b(t) || An(t) || !!(qs && t && t[qs]);
                }
                function Xt(t, n) {
                    var e = typeof t;
                    return (n = n ?? nn), !!n && (e == "number" || (e != "symbol" && yo.test(t))) && t > -1 && t % 1 == 0 && t < n;
                }
                function it(t, n, e) {
                    if (!K(e)) return !1;
                    var r = typeof n;
                    return (r == "number" ? at(e) && Xt(n, e.length) : r == "string" && n in e) ? Rt(e[n], t) : !1;
                }
                function mi(t, n) {
                    if (b(t)) return !1;
                    var e = typeof t;
                    return e == "number" || e == "symbol" || e == "boolean" || t == null || pt(t) ? !0 : co.test(t) || !fo.test(t) || (n != null && t in M(n));
                }
                function vh(t) {
                    var n = typeof t;
                    return n == "string" || n == "number" || n == "symbol" || n == "boolean" ? t !== "__proto__" : t === null;
                }
                function wi(t) {
                    var n = nr(t),
                        e = a[n];
                    if (typeof e != "function" || !(n in N.prototype)) return !1;
                    if (t === e) return !0;
                    var r = gi(e);
                    return !!r && t === r[0];
                }
                function _h(t) {
                    return !!Hs && Hs in t;
                }
                var mh = Te ? Qt : $i;
                function pe(t) {
                    var n = t && t.constructor,
                        e = (typeof n == "function" && n.prototype) || $n;
                    return t === e;
                }
                function Hu(t) {
                    return t === t && !K(t);
                }
                function Du(t, n) {
                    return function (e) {
                        return e == null ? !1 : e[t] === n && (n !== i || t in M(e));
                    };
                }
                function wh(t) {
                    var n = ar(t, function (r) {
                            return e.size === Jn && e.clear(), r;
                        }),
                        e = n.cache;
                    return n;
                }
                function Ph(t, n) {
                    var e = t[1],
                        r = n[1],
                        u = e | r,
                        o = u < (vt | ln | Bt),
                        f = (r == Bt && e == Dt) || (r == Bt && e == Yn && t[7].length <= n[8]) || (r == (Bt | Yn) && n[7].length <= n[8] && e == Dt);
                    if (!(o || f)) return t;
                    r & vt && ((t[2] = n[2]), (u |= e & vt ? 0 : Gi));
                    var c = n[3];
                    if (c) {
                        var l = t[3];
                        (t[3] = l ? vu(l, c, n[4]) : c), (t[4] = l ? sn(t[3], xn) : n[4]);
                    }
                    return (
                        (c = n[5]),
                        c && ((l = t[5]), (t[5] = l ? _u(l, c, n[6]) : c), (t[6] = l ? sn(t[5], xn) : n[6])),
                        (c = n[7]),
                        c && (t[7] = c),
                        r & Bt && (t[8] = t[8] == null ? n[8] : nt(t[8], n[8])),
                        t[9] == null && (t[9] = n[9]),
                        (t[0] = n[0]),
                        (t[1] = u),
                        t
                    );
                }
                function Ch(t) {
                    var n = [];
                    if (t != null) for (var e in M(t)) n.push(e);
                    return n;
                }
                function Ah(t) {
                    return He.call(t);
                }
                function Nu(t, n, e) {
                    return (
                        (n = Q(n === i ? t.length - 1 : n, 0)),
                        function () {
                            for (var r = arguments, u = -1, o = Q(r.length - n, 0), f = d(o); ++u < o; ) f[u] = r[n + u];
                            u = -1;
                            for (var c = d(n + 1); ++u < n; ) c[u] = r[u];
                            return (c[n] = e(f)), ct(t, this, c);
                        }
                    );
                }
                function $u(t, n) {
                    return n.length < 2 ? t : wn(t, At(n, 0, -1));
                }
                function Ih(t, n) {
                    for (var e = t.length, r = nt(n.length, e), u = ut(t); r--; ) {
                        var o = n[r];
                        t[r] = Xt(o, e) ? u[o] : i;
                    }
                    return t;
                }
                function Pi(t, n) {
                    if (!(n === "constructor" && typeof t[n] == "function") && n != "__proto__") return t[n];
                }
                var qu = Fu(uu),
                    de =
                        Uf ||
                        function (t, n) {
                            return j.setTimeout(t, n);
                        },
                    Ci = Fu(Jc);
                function Uu(t, n, e) {
                    var r = n + "";
                    return Ci(t, dh(r, xh(hh(r), e)));
                }
                function Fu(t) {
                    var n = 0,
                        e = 0;
                    return function () {
                        var r = Bf(),
                            u = Ga - (r - e);
                        if (((e = r), u > 0)) {
                            if (++n >= Ba) return arguments[0];
                        } else n = 0;
                        return t.apply(i, arguments);
                    };
                }
                function rr(t, n) {
                    var e = -1,
                        r = t.length,
                        u = r - 1;
                    for (n = n === i ? r : n; ++e < n; ) {
                        var o = ri(e, u),
                            f = t[o];
                        (t[o] = t[e]), (t[e] = f);
                    }
                    return (t.length = n), t;
                }
                var Wu = wh(function (t) {
                    var n = [];
                    return (
                        t.charCodeAt(0) === 46 && n.push(""),
                        t.replace(ho, function (e, r, u, o) {
                            n.push(u ? o.replace(Po, "$1") : r || e);
                        }),
                        n
                    );
                });
                function Ft(t) {
                    if (typeof t == "string" || pt(t)) return t;
                    var n = t + "";
                    return n == "0" && 1 / t == -pn ? "-0" : n;
                }
                function Cn(t) {
                    if (t != null) {
                        try {
                            return Le.call(t);
                        } catch {}
                        try {
                            return t + "";
                        } catch {}
                    }
                    return "";
                }
                function xh(t, n) {
                    return (
                        mt(Xa, function (e) {
                            var r = "_." + e[0];
                            n & e[1] && !Se(t, r) && t.push(r);
                        }),
                        t.sort()
                    );
                }
                function Mu(t) {
                    if (t instanceof N) return t.clone();
                    var n = new Pt(t.__wrapped__, t.__chain__);
                    return (n.__actions__ = ut(t.__actions__)), (n.__index__ = t.__index__), (n.__values__ = t.__values__), n;
                }
                function Eh(t, n, e) {
                    (e ? it(t, n, e) : n === i) ? (n = 1) : (n = Q(T(n), 0));
                    var r = t == null ? 0 : t.length;
                    if (!r || n < 1) return [];
                    for (var u = 0, o = 0, f = d(Fe(r / n)); u < r; ) f[o++] = At(t, u, (u += n));
                    return f;
                }
                function yh(t) {
                    for (var n = -1, e = t == null ? 0 : t.length, r = 0, u = []; ++n < e; ) {
                        var o = t[n];
                        o && (u[r++] = o);
                    }
                    return u;
                }
                function Sh() {
                    var t = arguments.length;
                    if (!t) return [];
                    for (var n = d(t - 1), e = arguments[0], r = t; r--; ) n[r - 1] = arguments[r];
                    return rn(b(e) ? ut(e) : [e], tt(n, 1));
                }
                var Oh = H(function (t, n) {
                        return Y(t) ? oe(t, tt(n, 1, Y, !0)) : [];
                    }),
                    Rh = H(function (t, n) {
                        var e = It(n);
                        return Y(e) && (e = i), Y(t) ? oe(t, tt(n, 1, Y, !0), E(e, 2)) : [];
                    }),
                    bh = H(function (t, n) {
                        var e = It(n);
                        return Y(e) && (e = i), Y(t) ? oe(t, tt(n, 1, Y, !0), i, e) : [];
                    });
                function Th(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    return r ? ((n = e || n === i ? 1 : T(n)), At(t, n < 0 ? 0 : n, r)) : [];
                }
                function Lh(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    return r ? ((n = e || n === i ? 1 : T(n)), (n = r - n), At(t, 0, n < 0 ? 0 : n)) : [];
                }
                function Hh(t, n) {
                    return t && t.length ? Xe(t, E(n, 3), !0, !0) : [];
                }
                function Dh(t, n) {
                    return t && t.length ? Xe(t, E(n, 3), !0) : [];
                }
                function Nh(t, n, e, r) {
                    var u = t == null ? 0 : t.length;
                    return u ? (e && typeof e != "number" && it(t, n, e) && ((e = 0), (r = u)), Sc(t, n, e, r)) : [];
                }
                function Bu(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    if (!r) return -1;
                    var u = e == null ? 0 : T(e);
                    return u < 0 && (u = Q(r + u, 0)), Oe(t, E(n, 3), u);
                }
                function Gu(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    if (!r) return -1;
                    var u = r - 1;
                    return e !== i && ((u = T(e)), (u = e < 0 ? Q(r + u, 0) : nt(u, r - 1))), Oe(t, E(n, 3), u, !0);
                }
                function zu(t) {
                    var n = t == null ? 0 : t.length;
                    return n ? tt(t, 1) : [];
                }
                function $h(t) {
                    var n = t == null ? 0 : t.length;
                    return n ? tt(t, pn) : [];
                }
                function qh(t, n) {
                    var e = t == null ? 0 : t.length;
                    return e ? ((n = n === i ? 1 : T(n)), tt(t, n)) : [];
                }
                function Uh(t) {
                    for (var n = -1, e = t == null ? 0 : t.length, r = {}; ++n < e; ) {
                        var u = t[n];
                        r[u[0]] = u[1];
                    }
                    return r;
                }
                function Ku(t) {
                    return t && t.length ? t[0] : i;
                }
                function Fh(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    if (!r) return -1;
                    var u = e == null ? 0 : T(e);
                    return u < 0 && (u = Q(r + u, 0)), Ln(t, n, u);
                }
                function Wh(t) {
                    var n = t == null ? 0 : t.length;
                    return n ? At(t, 0, -1) : [];
                }
                var Mh = H(function (t) {
                        var n = z(t, oi);
                        return n.length && n[0] === t[0] ? kr(n) : [];
                    }),
                    Bh = H(function (t) {
                        var n = It(t),
                            e = z(t, oi);
                        return n === It(e) ? (n = i) : e.pop(), e.length && e[0] === t[0] ? kr(e, E(n, 2)) : [];
                    }),
                    Gh = H(function (t) {
                        var n = It(t),
                            e = z(t, oi);
                        return (n = typeof n == "function" ? n : i), n && e.pop(), e.length && e[0] === t[0] ? kr(e, i, n) : [];
                    });
                function zh(t, n) {
                    return t == null ? "" : Wf.call(t, n);
                }
                function It(t) {
                    var n = t == null ? 0 : t.length;
                    return n ? t[n - 1] : i;
                }
                function Kh(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    if (!r) return -1;
                    var u = r;
                    return e !== i && ((u = T(e)), (u = u < 0 ? Q(r + u, 0) : nt(u, r - 1))), n === n ? xf(t, n, u) : Oe(t, Es, u, !0);
                }
                function Jh(t, n) {
                    return t && t.length ? eu(t, T(n)) : i;
                }
                var Yh = H(Ju);
                function Ju(t, n) {
                    return t && t.length && n && n.length ? ei(t, n) : t;
                }
                function Zh(t, n, e) {
                    return t && t.length && n && n.length ? ei(t, n, E(e, 2)) : t;
                }
                function Xh(t, n, e) {
                    return t && t.length && n && n.length ? ei(t, n, i, e) : t;
                }
                var Qh = Zt(function (t, n) {
                    var e = t == null ? 0 : t.length,
                        r = Zr(t, n);
                    return (
                        su(
                            t,
                            z(n, function (u) {
                                return Xt(u, e) ? +u : u;
                            }).sort(gu)
                        ),
                        r
                    );
                });
                function Vh(t, n) {
                    var e = [];
                    if (!(t && t.length)) return e;
                    var r = -1,
                        u = [],
                        o = t.length;
                    for (n = E(n, 3); ++r < o; ) {
                        var f = t[r];
                        n(f, r, t) && (e.push(f), u.push(r));
                    }
                    return su(t, u), e;
                }
                function Ai(t) {
                    return t == null ? t : zf.call(t);
                }
                function kh(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    return r
                        ? (e && typeof e != "number" && it(t, n, e) ? ((n = 0), (e = r)) : ((n = n == null ? 0 : T(n)), (e = e === i ? r : T(e))), At(t, n, e))
                        : [];
                }
                function jh(t, n) {
                    return Ze(t, n);
                }
                function tl(t, n, e) {
                    return si(t, n, E(e, 2));
                }
                function nl(t, n) {
                    var e = t == null ? 0 : t.length;
                    if (e) {
                        var r = Ze(t, n);
                        if (r < e && Rt(t[r], n)) return r;
                    }
                    return -1;
                }
                function el(t, n) {
                    return Ze(t, n, !0);
                }
                function rl(t, n, e) {
                    return si(t, n, E(e, 2), !0);
                }
                function il(t, n) {
                    var e = t == null ? 0 : t.length;
                    if (e) {
                        var r = Ze(t, n, !0) - 1;
                        if (Rt(t[r], n)) return r;
                    }
                    return -1;
                }
                function sl(t) {
                    return t && t.length ? au(t) : [];
                }
                function ul(t, n) {
                    return t && t.length ? au(t, E(n, 2)) : [];
                }
                function al(t) {
                    var n = t == null ? 0 : t.length;
                    return n ? At(t, 1, n) : [];
                }
                function ol(t, n, e) {
                    return t && t.length ? ((n = e || n === i ? 1 : T(n)), At(t, 0, n < 0 ? 0 : n)) : [];
                }
                function fl(t, n, e) {
                    var r = t == null ? 0 : t.length;
                    return r ? ((n = e || n === i ? 1 : T(n)), (n = r - n), At(t, n < 0 ? 0 : n, r)) : [];
                }
                function cl(t, n) {
                    return t && t.length ? Xe(t, E(n, 3), !1, !0) : [];
                }
                function hl(t, n) {
                    return t && t.length ? Xe(t, E(n, 3)) : [];
                }
                var ll = H(function (t) {
                        return on(tt(t, 1, Y, !0));
                    }),
                    pl = H(function (t) {
                        var n = It(t);
                        return Y(n) && (n = i), on(tt(t, 1, Y, !0), E(n, 2));
                    }),
                    dl = H(function (t) {
                        var n = It(t);
                        return (n = typeof n == "function" ? n : i), on(tt(t, 1, Y, !0), i, n);
                    });
                function gl(t) {
                    return t && t.length ? on(t) : [];
                }
                function vl(t, n) {
                    return t && t.length ? on(t, E(n, 2)) : [];
                }
                function _l(t, n) {
                    return (n = typeof n == "function" ? n : i), t && t.length ? on(t, i, n) : [];
                }
                function Ii(t) {
                    if (!(t && t.length)) return [];
                    var n = 0;
                    return (
                        (t = en(t, function (e) {
                            if (Y(e)) return (n = Q(e.length, n)), !0;
                        })),
                        Wr(n, function (e) {
                            return z(t, qr(e));
                        })
                    );
                }
                function Yu(t, n) {
                    if (!(t && t.length)) return [];
                    var e = Ii(t);
                    return n == null
                        ? e
                        : z(e, function (r) {
                              return ct(n, i, r);
                          });
                }
                var ml = H(function (t, n) {
                        return Y(t) ? oe(t, n) : [];
                    }),
                    wl = H(function (t) {
                        return ai(en(t, Y));
                    }),
                    Pl = H(function (t) {
                        var n = It(t);
                        return Y(n) && (n = i), ai(en(t, Y), E(n, 2));
                    }),
                    Cl = H(function (t) {
                        var n = It(t);
                        return (n = typeof n == "function" ? n : i), ai(en(t, Y), i, n);
                    }),
                    Al = H(Ii);
                function Il(t, n) {
                    return hu(t || [], n || [], ae);
                }
                function xl(t, n) {
                    return hu(t || [], n || [], he);
                }
                var El = H(function (t) {
                    var n = t.length,
                        e = n > 1 ? t[n - 1] : i;
                    return (e = typeof e == "function" ? (t.pop(), e) : i), Yu(t, e);
                });
                function Zu(t) {
                    var n = a(t);
                    return (n.__chain__ = !0), n;
                }
                function yl(t, n) {
                    return n(t), t;
                }
                function ir(t, n) {
                    return n(t);
                }
                var Sl = Zt(function (t) {
                    var n = t.length,
                        e = n ? t[0] : 0,
                        r = this.__wrapped__,
                        u = function (o) {
                            return Zr(o, t);
                        };
                    return n > 1 || this.__actions__.length || !(r instanceof N) || !Xt(e)
                        ? this.thru(u)
                        : ((r = r.slice(e, +e + (n ? 1 : 0))),
                          r.__actions__.push({ func: ir, args: [u], thisArg: i }),
                          new Pt(r, this.__chain__).thru(function (o) {
                              return n && !o.length && o.push(i), o;
                          }));
                });
                function Ol() {
                    return Zu(this);
                }
                function Rl() {
                    return new Pt(this.value(), this.__chain__);
                }
                function bl() {
                    this.__values__ === i && (this.__values__ = oa(this.value()));
                    var t = this.__index__ >= this.__values__.length,
                        n = t ? i : this.__values__[this.__index__++];
                    return { done: t, value: n };
                }
                function Tl() {
                    return this;
                }
                function Ll(t) {
                    for (var n, e = this; e instanceof Ge; ) {
                        var r = Mu(e);
                        (r.__index__ = 0), (r.__values__ = i), n ? (u.__wrapped__ = r) : (n = r);
                        var u = r;
                        e = e.__wrapped__;
                    }
                    return (u.__wrapped__ = t), n;
                }
                function Hl() {
                    var t = this.__wrapped__;
                    if (t instanceof N) {
                        var n = t;
                        return (
                            this.__actions__.length && (n = new N(this)),
                            (n = n.reverse()),
                            n.__actions__.push({ func: ir, args: [Ai], thisArg: i }),
                            new Pt(n, this.__chain__)
                        );
                    }
                    return this.thru(Ai);
                }
                function Dl() {
                    return cu(this.__wrapped__, this.__actions__);
                }
                var Nl = Qe(function (t, n, e) {
                    W.call(t, e) ? ++t[e] : Jt(t, e, 1);
                });
                function $l(t, n, e) {
                    var r = b(t) ? Is : yc;
                    return e && it(t, n, e) && (n = i), r(t, E(n, 3));
                }
                function ql(t, n) {
                    var e = b(t) ? en : Ys;
                    return e(t, E(n, 3));
                }
                var Ul = Cu(Bu),
                    Fl = Cu(Gu);
                function Wl(t, n) {
                    return tt(sr(t, n), 1);
                }
                function Ml(t, n) {
                    return tt(sr(t, n), pn);
                }
                function Bl(t, n, e) {
                    return (e = e === i ? 1 : T(e)), tt(sr(t, n), e);
                }
                function Xu(t, n) {
                    var e = b(t) ? mt : an;
                    return e(t, E(n, 3));
                }
                function Qu(t, n) {
                    var e = b(t) ? af : Js;
                    return e(t, E(n, 3));
                }
                var Gl = Qe(function (t, n, e) {
                    W.call(t, e) ? t[e].push(n) : Jt(t, e, [n]);
                });
                function zl(t, n, e, r) {
                    (t = at(t) ? t : zn(t)), (e = e && !r ? T(e) : 0);
                    var u = t.length;
                    return e < 0 && (e = Q(u + e, 0)), cr(t) ? e <= u && t.indexOf(n, e) > -1 : !!u && Ln(t, n, e) > -1;
                }
                var Kl = H(function (t, n, e) {
                        var r = -1,
                            u = typeof n == "function",
                            o = at(t) ? d(t.length) : [];
                        return (
                            an(t, function (f) {
                                o[++r] = u ? ct(n, f, e) : fe(f, n, e);
                            }),
                            o
                        );
                    }),
                    Jl = Qe(function (t, n, e) {
                        Jt(t, e, n);
                    });
                function sr(t, n) {
                    var e = b(t) ? z : js;
                    return e(t, E(n, 3));
                }
                function Yl(t, n, e, r) {
                    return t == null ? [] : (b(n) || (n = n == null ? [] : [n]), (e = r ? i : e), b(e) || (e = e == null ? [] : [e]), ru(t, n, e));
                }
                var Zl = Qe(
                    function (t, n, e) {
                        t[e ? 0 : 1].push(n);
                    },
                    function () {
                        return [[], []];
                    }
                );
                function Xl(t, n, e) {
                    var r = b(t) ? Nr : Ss,
                        u = arguments.length < 3;
                    return r(t, E(n, 4), e, u, an);
                }
                function Ql(t, n, e) {
                    var r = b(t) ? of : Ss,
                        u = arguments.length < 3;
                    return r(t, E(n, 4), e, u, Js);
                }
                function Vl(t, n) {
                    var e = b(t) ? en : Ys;
                    return e(t, or(E(n, 3)));
                }
                function kl(t) {
                    var n = b(t) ? Bs : zc;
                    return n(t);
                }
                function jl(t, n, e) {
                    (e ? it(t, n, e) : n === i) ? (n = 1) : (n = T(n));
                    var r = b(t) ? Cc : Kc;
                    return r(t, n);
                }
                function tp(t) {
                    var n = b(t) ? Ac : Yc;
                    return n(t);
                }
                function np(t) {
                    if (t == null) return 0;
                    if (at(t)) return cr(t) ? Dn(t) : t.length;
                    var n = et(t);
                    return n == Et || n == yt ? t.size : ti(t).length;
                }
                function ep(t, n, e) {
                    var r = b(t) ? $r : Zc;
                    return e && it(t, n, e) && (n = i), r(t, E(n, 3));
                }
                var rp = H(function (t, n) {
                        if (t == null) return [];
                        var e = n.length;
                        return e > 1 && it(t, n[0], n[1]) ? (n = []) : e > 2 && it(n[0], n[1], n[2]) && (n = [n[0]]), ru(t, tt(n, 1), []);
                    }),
                    ur =
                        qf ||
                        function () {
                            return j.Date.now();
                        };
                function ip(t, n) {
                    if (typeof n != "function") throw new wt(O);
                    return (
                        (t = T(t)),
                        function () {
                            if (--t < 1) return n.apply(this, arguments);
                        }
                    );
                }
                function Vu(t, n, e) {
                    return (n = e ? i : n), (n = t && n == null ? t.length : n), Yt(t, Bt, i, i, i, i, n);
                }
                function ku(t, n) {
                    var e;
                    if (typeof n != "function") throw new wt(O);
                    return (
                        (t = T(t)),
                        function () {
                            return --t > 0 && (e = n.apply(this, arguments)), t <= 1 && (n = i), e;
                        }
                    );
                }
                var xi = H(function (t, n, e) {
                        var r = vt;
                        if (e.length) {
                            var u = sn(e, Bn(xi));
                            r |= Nt;
                        }
                        return Yt(t, r, n, e, u);
                    }),
                    ju = H(function (t, n, e) {
                        var r = vt | ln;
                        if (e.length) {
                            var u = sn(e, Bn(ju));
                            r |= Nt;
                        }
                        return Yt(n, r, t, e, u);
                    });
                function ta(t, n, e) {
                    n = e ? i : n;
                    var r = Yt(t, Dt, i, i, i, i, i, n);
                    return (r.placeholder = ta.placeholder), r;
                }
                function na(t, n, e) {
                    n = e ? i : n;
                    var r = Yt(t, Sn, i, i, i, i, i, n);
                    return (r.placeholder = na.placeholder), r;
                }
                function ea(t, n, e) {
                    var r,
                        u,
                        o,
                        f,
                        c,
                        l,
                        v = 0,
                        _ = !1,
                        m = !1,
                        C = !0;
                    if (typeof t != "function") throw new wt(O);
                    (n = xt(n) || 0),
                        K(e) && ((_ = !!e.leading), (m = "maxWait" in e), (o = m ? Q(xt(e.maxWait) || 0, n) : o), (C = "trailing" in e ? !!e.trailing : C));
                    function I(Z) {
                        var bt = r,
                            kt = u;
                        return (r = u = i), (v = Z), (f = t.apply(kt, bt)), f;
                    }
                    function y(Z) {
                        return (v = Z), (c = de(D, n)), _ ? I(Z) : f;
                    }
                    function L(Z) {
                        var bt = Z - l,
                            kt = Z - v,
                            Ca = n - bt;
                        return m ? nt(Ca, o - kt) : Ca;
                    }
                    function S(Z) {
                        var bt = Z - l,
                            kt = Z - v;
                        return l === i || bt >= n || bt < 0 || (m && kt >= o);
                    }
                    function D() {
                        var Z = ur();
                        if (S(Z)) return $(Z);
                        c = de(D, L(Z));
                    }
                    function $(Z) {
                        return (c = i), C && r ? I(Z) : ((r = u = i), f);
                    }
                    function dt() {
                        c !== i && lu(c), (v = 0), (r = l = u = c = i);
                    }
                    function st() {
                        return c === i ? f : $(ur());
                    }
                    function gt() {
                        var Z = ur(),
                            bt = S(Z);
                        if (((r = arguments), (u = this), (l = Z), bt)) {
                            if (c === i) return y(l);
                            if (m) return lu(c), (c = de(D, n)), I(l);
                        }
                        return c === i && (c = de(D, n)), f;
                    }
                    return (gt.cancel = dt), (gt.flush = st), gt;
                }
                var sp = H(function (t, n) {
                        return Ks(t, 1, n);
                    }),
                    up = H(function (t, n, e) {
                        return Ks(t, xt(n) || 0, e);
                    });
                function ap(t) {
                    return Yt(t, gr);
                }
                function ar(t, n) {
                    if (typeof t != "function" || (n != null && typeof n != "function")) throw new wt(O);
                    var e = function () {
                        var r = arguments,
                            u = n ? n.apply(this, r) : r[0],
                            o = e.cache;
                        if (o.has(u)) return o.get(u);
                        var f = t.apply(this, r);
                        return (e.cache = o.set(u, f) || o), f;
                    };
                    return (e.cache = new (ar.Cache || Kt)()), e;
                }
                ar.Cache = Kt;
                function or(t) {
                    if (typeof t != "function") throw new wt(O);
                    return function () {
                        var n = arguments;
                        switch (n.length) {
                            case 0:
                                return !t.call(this);
                            case 1:
                                return !t.call(this, n[0]);
                            case 2:
                                return !t.call(this, n[0], n[1]);
                            case 3:
                                return !t.call(this, n[0], n[1], n[2]);
                        }
                        return !t.apply(this, n);
                    };
                }
                function op(t) {
                    return ku(2, t);
                }
                var fp = Xc(function (t, n) {
                        n = n.length == 1 && b(n[0]) ? z(n[0], ht(E())) : z(tt(n, 1), ht(E()));
                        var e = n.length;
                        return H(function (r) {
                            for (var u = -1, o = nt(r.length, e); ++u < o; ) r[u] = n[u].call(this, r[u]);
                            return ct(t, this, r);
                        });
                    }),
                    Ei = H(function (t, n) {
                        var e = sn(n, Bn(Ei));
                        return Yt(t, Nt, i, n, e);
                    }),
                    ra = H(function (t, n) {
                        var e = sn(n, Bn(ra));
                        return Yt(t, On, i, n, e);
                    }),
                    cp = Zt(function (t, n) {
                        return Yt(t, Yn, i, i, i, n);
                    });
                function hp(t, n) {
                    if (typeof t != "function") throw new wt(O);
                    return (n = n === i ? n : T(n)), H(t, n);
                }
                function lp(t, n) {
                    if (typeof t != "function") throw new wt(O);
                    return (
                        (n = n == null ? 0 : Q(T(n), 0)),
                        H(function (e) {
                            var r = e[n],
                                u = cn(e, 0, n);
                            return r && rn(u, r), ct(t, this, u);
                        })
                    );
                }
                function pp(t, n, e) {
                    var r = !0,
                        u = !0;
                    if (typeof t != "function") throw new wt(O);
                    return (
                        K(e) && ((r = "leading" in e ? !!e.leading : r), (u = "trailing" in e ? !!e.trailing : u)),
                        ea(t, n, { leading: r, maxWait: n, trailing: u })
                    );
                }
                function dp(t) {
                    return Vu(t, 1);
                }
                function gp(t, n) {
                    return Ei(fi(n), t);
                }
                function vp() {
                    if (!arguments.length) return [];
                    var t = arguments[0];
                    return b(t) ? t : [t];
                }
                function _p(t) {
                    return Ct(t, En);
                }
                function mp(t, n) {
                    return (n = typeof n == "function" ? n : i), Ct(t, En, n);
                }
                function wp(t) {
                    return Ct(t, Ht | En);
                }
                function Pp(t, n) {
                    return (n = typeof n == "function" ? n : i), Ct(t, Ht | En, n);
                }
                function Cp(t, n) {
                    return n == null || zs(t, n, V(n));
                }
                function Rt(t, n) {
                    return t === n || (t !== t && n !== n);
                }
                var Ap = tr(Vr),
                    Ip = tr(function (t, n) {
                        return t >= n;
                    }),
                    An = Qs(
                        (function () {
                            return arguments;
                        })()
                    )
                        ? Qs
                        : function (t) {
                              return J(t) && W.call(t, "callee") && !$s.call(t, "callee");
                          },
                    b = d.isArray,
                    xp = _s ? ht(_s) : Lc;
                function at(t) {
                    return t != null && fr(t.length) && !Qt(t);
                }
                function Y(t) {
                    return J(t) && at(t);
                }
                function Ep(t) {
                    return t === !0 || t === !1 || (J(t) && rt(t) == Zn);
                }
                var hn = Ff || $i,
                    yp = ms ? ht(ms) : Hc;
                function Sp(t) {
                    return J(t) && t.nodeType === 1 && !ge(t);
                }
                function Op(t) {
                    if (t == null) return !0;
                    if (at(t) && (b(t) || typeof t == "string" || typeof t.splice == "function" || hn(t) || Gn(t) || An(t))) return !t.length;
                    var n = et(t);
                    if (n == Et || n == yt) return !t.size;
                    if (pe(t)) return !ti(t).length;
                    for (var e in t) if (W.call(t, e)) return !1;
                    return !0;
                }
                function Rp(t, n) {
                    return ce(t, n);
                }
                function bp(t, n, e) {
                    e = typeof e == "function" ? e : i;
                    var r = e ? e(t, n) : i;
                    return r === i ? ce(t, n, i, e) : !!r;
                }
                function yi(t) {
                    if (!J(t)) return !1;
                    var n = rt(t);
                    return n == Ce || n == Va || (typeof t.message == "string" && typeof t.name == "string" && !ge(t));
                }
                function Tp(t) {
                    return typeof t == "number" && Us(t);
                }
                function Qt(t) {
                    if (!K(t)) return !1;
                    var n = rt(t);
                    return n == Ae || n == Ki || n == Qa || n == ja;
                }
                function ia(t) {
                    return typeof t == "number" && t == T(t);
                }
                function fr(t) {
                    return typeof t == "number" && t > -1 && t % 1 == 0 && t <= nn;
                }
                function K(t) {
                    var n = typeof t;
                    return t != null && (n == "object" || n == "function");
                }
                function J(t) {
                    return t != null && typeof t == "object";
                }
                var sa = ws ? ht(ws) : Nc;
                function Lp(t, n) {
                    return t === n || jr(t, n, vi(n));
                }
                function Hp(t, n, e) {
                    return (e = typeof e == "function" ? e : i), jr(t, n, vi(n), e);
                }
                function Dp(t) {
                    return ua(t) && t != +t;
                }
                function Np(t) {
                    if (mh(t)) throw new R(x);
                    return Vs(t);
                }
                function $p(t) {
                    return t === null;
                }
                function qp(t) {
                    return t == null;
                }
                function ua(t) {
                    return typeof t == "number" || (J(t) && rt(t) == Qn);
                }
                function ge(t) {
                    if (!J(t) || rt(t) != Gt) return !1;
                    var n = $e(t);
                    if (n === null) return !0;
                    var e = W.call(n, "constructor") && n.constructor;
                    return typeof e == "function" && e instanceof e && Le.call(e) == Hf;
                }
                var Si = Ps ? ht(Ps) : $c;
                function Up(t) {
                    return ia(t) && t >= -nn && t <= nn;
                }
                var aa = Cs ? ht(Cs) : qc;
                function cr(t) {
                    return typeof t == "string" || (!b(t) && J(t) && rt(t) == kn);
                }
                function pt(t) {
                    return typeof t == "symbol" || (J(t) && rt(t) == Ie);
                }
                var Gn = As ? ht(As) : Uc;
                function Fp(t) {
                    return t === i;
                }
                function Wp(t) {
                    return J(t) && et(t) == jn;
                }
                function Mp(t) {
                    return J(t) && rt(t) == no;
                }
                var Bp = tr(ni),
                    Gp = tr(function (t, n) {
                        return t <= n;
                    });
                function oa(t) {
                    if (!t) return [];
                    if (at(t)) return cr(t) ? St(t) : ut(t);
                    if (ee && t[ee]) return Cf(t[ee]());
                    var n = et(t),
                        e = n == Et ? Br : n == yt ? Re : zn;
                    return e(t);
                }
                function Vt(t) {
                    if (!t) return t === 0 ? t : 0;
                    if (((t = xt(t)), t === pn || t === -pn)) {
                        var n = t < 0 ? -1 : 1;
                        return n * Ja;
                    }
                    return t === t ? t : 0;
                }
                function T(t) {
                    var n = Vt(t),
                        e = n % 1;
                    return n === n ? (e ? n - e : n) : 0;
                }
                function fa(t) {
                    return t ? mn(T(t), 0, $t) : 0;
                }
                function xt(t) {
                    if (typeof t == "number") return t;
                    if (pt(t)) return we;
                    if (K(t)) {
                        var n = typeof t.valueOf == "function" ? t.valueOf() : t;
                        t = K(n) ? n + "" : n;
                    }
                    if (typeof t != "string") return t === 0 ? t : +t;
                    t = Os(t);
                    var e = Io.test(t);
                    return e || Eo.test(t) ? rf(t.slice(2), e ? 2 : 8) : Ao.test(t) ? we : +t;
                }
                function ca(t) {
                    return Ut(t, ot(t));
                }
                function zp(t) {
                    return t ? mn(T(t), -nn, nn) : t === 0 ? t : 0;
                }
                function U(t) {
                    return t == null ? "" : lt(t);
                }
                var Kp = Wn(function (t, n) {
                        if (pe(n) || at(n)) {
                            Ut(n, V(n), t);
                            return;
                        }
                        for (var e in n) W.call(n, e) && ae(t, e, n[e]);
                    }),
                    ha = Wn(function (t, n) {
                        Ut(n, ot(n), t);
                    }),
                    hr = Wn(function (t, n, e, r) {
                        Ut(n, ot(n), t, r);
                    }),
                    Jp = Wn(function (t, n, e, r) {
                        Ut(n, V(n), t, r);
                    }),
                    Yp = Zt(Zr);
                function Zp(t, n) {
                    var e = Fn(t);
                    return n == null ? e : Gs(e, n);
                }
                var Xp = H(function (t, n) {
                        t = M(t);
                        var e = -1,
                            r = n.length,
                            u = r > 2 ? n[2] : i;
                        for (u && it(n[0], n[1], u) && (r = 1); ++e < r; )
                            for (var o = n[e], f = ot(o), c = -1, l = f.length; ++c < l; ) {
                                var v = f[c],
                                    _ = t[v];
                                (_ === i || (Rt(_, $n[v]) && !W.call(t, v))) && (t[v] = o[v]);
                            }
                        return t;
                    }),
                    Qp = H(function (t) {
                        return t.push(i, Ou), ct(la, i, t);
                    });
                function Vp(t, n) {
                    return xs(t, E(n, 3), qt);
                }
                function kp(t, n) {
                    return xs(t, E(n, 3), Qr);
                }
                function jp(t, n) {
                    return t == null ? t : Xr(t, E(n, 3), ot);
                }
                function td(t, n) {
                    return t == null ? t : Zs(t, E(n, 3), ot);
                }
                function nd(t, n) {
                    return t && qt(t, E(n, 3));
                }
                function ed(t, n) {
                    return t && Qr(t, E(n, 3));
                }
                function rd(t) {
                    return t == null ? [] : Je(t, V(t));
                }
                function id(t) {
                    return t == null ? [] : Je(t, ot(t));
                }
                function Oi(t, n, e) {
                    var r = t == null ? i : wn(t, n);
                    return r === i ? e : r;
                }
                function sd(t, n) {
                    return t != null && Tu(t, n, Oc);
                }
                function Ri(t, n) {
                    return t != null && Tu(t, n, Rc);
                }
                var ud = Iu(function (t, n, e) {
                        n != null && typeof n.toString != "function" && (n = He.call(n)), (t[n] = e);
                    }, Ti(ft)),
                    ad = Iu(function (t, n, e) {
                        n != null && typeof n.toString != "function" && (n = He.call(n)), W.call(t, n) ? t[n].push(e) : (t[n] = [e]);
                    }, E),
                    od = H(fe);
                function V(t) {
                    return at(t) ? Ms(t) : ti(t);
                }
                function ot(t) {
                    return at(t) ? Ms(t, !0) : Fc(t);
                }
                function fd(t, n) {
                    var e = {};
                    return (
                        (n = E(n, 3)),
                        qt(t, function (r, u, o) {
                            Jt(e, n(r, u, o), r);
                        }),
                        e
                    );
                }
                function cd(t, n) {
                    var e = {};
                    return (
                        (n = E(n, 3)),
                        qt(t, function (r, u, o) {
                            Jt(e, u, n(r, u, o));
                        }),
                        e
                    );
                }
                var hd = Wn(function (t, n, e) {
                        Ye(t, n, e);
                    }),
                    la = Wn(function (t, n, e, r) {
                        Ye(t, n, e, r);
                    }),
                    ld = Zt(function (t, n) {
                        var e = {};
                        if (t == null) return e;
                        var r = !1;
                        (n = z(n, function (o) {
                            return (o = fn(o, t)), r || (r = o.length > 1), o;
                        })),
                            Ut(t, di(t), e),
                            r && (e = Ct(e, Ht | Mt | En, uh));
                        for (var u = n.length; u--; ) ui(e, n[u]);
                        return e;
                    });
                function pd(t, n) {
                    return pa(t, or(E(n)));
                }
                var dd = Zt(function (t, n) {
                    return t == null ? {} : Mc(t, n);
                });
                function pa(t, n) {
                    if (t == null) return {};
                    var e = z(di(t), function (r) {
                        return [r];
                    });
                    return (
                        (n = E(n)),
                        iu(t, e, function (r, u) {
                            return n(r, u[0]);
                        })
                    );
                }
                function gd(t, n, e) {
                    n = fn(n, t);
                    var r = -1,
                        u = n.length;
                    for (u || ((u = 1), (t = i)); ++r < u; ) {
                        var o = t == null ? i : t[Ft(n[r])];
                        o === i && ((r = u), (o = e)), (t = Qt(o) ? o.call(t) : o);
                    }
                    return t;
                }
                function vd(t, n, e) {
                    return t == null ? t : he(t, n, e);
                }
                function _d(t, n, e, r) {
                    return (r = typeof r == "function" ? r : i), t == null ? t : he(t, n, e, r);
                }
                var da = yu(V),
                    ga = yu(ot);
                function md(t, n, e) {
                    var r = b(t),
                        u = r || hn(t) || Gn(t);
                    if (((n = E(n, 4)), e == null)) {
                        var o = t && t.constructor;
                        u ? (e = r ? new o() : []) : K(t) ? (e = Qt(o) ? Fn($e(t)) : {}) : (e = {});
                    }
                    return (
                        (u ? mt : qt)(t, function (f, c, l) {
                            return n(e, f, c, l);
                        }),
                        e
                    );
                }
                function wd(t, n) {
                    return t == null ? !0 : ui(t, n);
                }
                function Pd(t, n, e) {
                    return t == null ? t : fu(t, n, fi(e));
                }
                function Cd(t, n, e, r) {
                    return (r = typeof r == "function" ? r : i), t == null ? t : fu(t, n, fi(e), r);
                }
                function zn(t) {
                    return t == null ? [] : Mr(t, V(t));
                }
                function Ad(t) {
                    return t == null ? [] : Mr(t, ot(t));
                }
                function Id(t, n, e) {
                    return (
                        e === i && ((e = n), (n = i)),
                        e !== i && ((e = xt(e)), (e = e === e ? e : 0)),
                        n !== i && ((n = xt(n)), (n = n === n ? n : 0)),
                        mn(xt(t), n, e)
                    );
                }
                function xd(t, n, e) {
                    return (n = Vt(n)), e === i ? ((e = n), (n = 0)) : (e = Vt(e)), (t = xt(t)), bc(t, n, e);
                }
                function Ed(t, n, e) {
                    if (
                        (e && typeof e != "boolean" && it(t, n, e) && (n = e = i),
                        e === i && (typeof n == "boolean" ? ((e = n), (n = i)) : typeof t == "boolean" && ((e = t), (t = i))),
                        t === i && n === i ? ((t = 0), (n = 1)) : ((t = Vt(t)), n === i ? ((n = t), (t = 0)) : (n = Vt(n))),
                        t > n)
                    ) {
                        var r = t;
                        (t = n), (n = r);
                    }
                    if (e || t % 1 || n % 1) {
                        var u = Fs();
                        return nt(t + u * (n - t + ef("1e-" + ((u + "").length - 1))), n);
                    }
                    return ri(t, n);
                }
                var yd = Mn(function (t, n, e) {
                    return (n = n.toLowerCase()), t + (e ? va(n) : n);
                });
                function va(t) {
                    return bi(U(t).toLowerCase());
                }
                function _a(t) {
                    return (t = U(t)), t && t.replace(So, vf).replace(Jo, "");
                }
                function Sd(t, n, e) {
                    (t = U(t)), (n = lt(n));
                    var r = t.length;
                    e = e === i ? r : mn(T(e), 0, r);
                    var u = e;
                    return (e -= n.length), e >= 0 && t.slice(e, u) == n;
                }
                function Od(t) {
                    return (t = U(t)), t && uo.test(t) ? t.replace(Zi, _f) : t;
                }
                function Rd(t) {
                    return (t = U(t)), t && lo.test(t) ? t.replace(Er, "\\$&") : t;
                }
                var bd = Mn(function (t, n, e) {
                        return t + (e ? "-" : "") + n.toLowerCase();
                    }),
                    Td = Mn(function (t, n, e) {
                        return t + (e ? " " : "") + n.toLowerCase();
                    }),
                    Ld = Pu("toLowerCase");
                function Hd(t, n, e) {
                    (t = U(t)), (n = T(n));
                    var r = n ? Dn(t) : 0;
                    if (!n || r >= n) return t;
                    var u = (n - r) / 2;
                    return je(We(u), e) + t + je(Fe(u), e);
                }
                function Dd(t, n, e) {
                    (t = U(t)), (n = T(n));
                    var r = n ? Dn(t) : 0;
                    return n && r < n ? t + je(n - r, e) : t;
                }
                function Nd(t, n, e) {
                    (t = U(t)), (n = T(n));
                    var r = n ? Dn(t) : 0;
                    return n && r < n ? je(n - r, e) + t : t;
                }
                function $d(t, n, e) {
                    return e || n == null ? (n = 0) : n && (n = +n), Gf(U(t).replace(yr, ""), n || 0);
                }
                function qd(t, n, e) {
                    return (e ? it(t, n, e) : n === i) ? (n = 1) : (n = T(n)), ii(U(t), n);
                }
                function Ud() {
                    var t = arguments,
                        n = U(t[0]);
                    return t.length < 3 ? n : n.replace(t[1], t[2]);
                }
                var Fd = Mn(function (t, n, e) {
                    return t + (e ? "_" : "") + n.toLowerCase();
                });
                function Wd(t, n, e) {
                    return (
                        e && typeof e != "number" && it(t, n, e) && (n = e = i),
                        (e = e === i ? $t : e >>> 0),
                        e
                            ? ((t = U(t)), t && (typeof n == "string" || (n != null && !Si(n))) && ((n = lt(n)), !n && Hn(t)) ? cn(St(t), 0, e) : t.split(n, e))
                            : []
                    );
                }
                var Md = Mn(function (t, n, e) {
                    return t + (e ? " " : "") + bi(n);
                });
                function Bd(t, n, e) {
                    return (t = U(t)), (e = e == null ? 0 : mn(T(e), 0, t.length)), (n = lt(n)), t.slice(e, e + n.length) == n;
                }
                function Gd(t, n, e) {
                    var r = a.templateSettings;
                    e && it(t, n, e) && (n = i), (t = U(t)), (n = hr({}, n, r, Su));
                    var u = hr({}, n.imports, r.imports, Su),
                        o = V(u),
                        f = Mr(u, o),
                        c,
                        l,
                        v = 0,
                        _ = n.interpolate || xe,
                        m = "__p += '",
                        C = Gr((n.escape || xe).source + "|" + _.source + "|" + (_ === Xi ? Co : xe).source + "|" + (n.evaluate || xe).source + "|$", "g"),
                        I =
                            "//# sourceURL=" +
                            (W.call(n, "sourceURL") ? (n.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++Vo + "]") +
                            `
`;
                    t.replace(C, function (S, D, $, dt, st, gt) {
                        return (
                            $ || ($ = dt),
                            (m += t.slice(v, gt).replace(Oo, mf)),
                            D &&
                                ((c = !0),
                                (m +=
                                    `' +
__e(` +
                                    D +
                                    `) +
'`)),
                            st &&
                                ((l = !0),
                                (m +=
                                    `';
` +
                                    st +
                                    `;
__p += '`)),
                            $ &&
                                (m +=
                                    `' +
((__t = (` +
                                    $ +
                                    `)) == null ? '' : __t) +
'`),
                            (v = gt + S.length),
                            S
                        );
                    }),
                        (m += `';
`);
                    var y = W.call(n, "variable") && n.variable;
                    if (!y)
                        m =
                            `with (obj) {
` +
                            m +
                            `
}
`;
                    else if (wo.test(y)) throw new R(k);
                    (m = (l ? m.replace(eo, "") : m).replace(ro, "$1").replace(io, "$1;")),
                        (m =
                            "function(" +
                            (y || "obj") +
                            `) {
` +
                            (y
                                ? ""
                                : `obj || (obj = {});
`) +
                            "var __t, __p = ''" +
                            (c ? ", __e = _.escape" : "") +
                            (l
                                ? `, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
`
                                : `;
`) +
                            m +
                            `return __p
}`);
                    var L = wa(function () {
                        return q(o, I + "return " + m).apply(i, f);
                    });
                    if (((L.source = m), yi(L))) throw L;
                    return L;
                }
                function zd(t) {
                    return U(t).toLowerCase();
                }
                function Kd(t) {
                    return U(t).toUpperCase();
                }
                function Jd(t, n, e) {
                    if (((t = U(t)), t && (e || n === i))) return Os(t);
                    if (!t || !(n = lt(n))) return t;
                    var r = St(t),
                        u = St(n),
                        o = Rs(r, u),
                        f = bs(r, u) + 1;
                    return cn(r, o, f).join("");
                }
                function Yd(t, n, e) {
                    if (((t = U(t)), t && (e || n === i))) return t.slice(0, Ls(t) + 1);
                    if (!t || !(n = lt(n))) return t;
                    var r = St(t),
                        u = bs(r, St(n)) + 1;
                    return cn(r, 0, u).join("");
                }
                function Zd(t, n, e) {
                    if (((t = U(t)), t && (e || n === i))) return t.replace(yr, "");
                    if (!t || !(n = lt(n))) return t;
                    var r = St(t),
                        u = Rs(r, St(n));
                    return cn(r, u).join("");
                }
                function Xd(t, n) {
                    var e = Wa,
                        r = Ma;
                    if (K(n)) {
                        var u = "separator" in n ? n.separator : u;
                        (e = "length" in n ? T(n.length) : e), (r = "omission" in n ? lt(n.omission) : r);
                    }
                    t = U(t);
                    var o = t.length;
                    if (Hn(t)) {
                        var f = St(t);
                        o = f.length;
                    }
                    if (e >= o) return t;
                    var c = e - Dn(r);
                    if (c < 1) return r;
                    var l = f ? cn(f, 0, c).join("") : t.slice(0, c);
                    if (u === i) return l + r;
                    if ((f && (c += l.length - c), Si(u))) {
                        if (t.slice(c).search(u)) {
                            var v,
                                _ = l;
                            for (u.global || (u = Gr(u.source, U(Qi.exec(u)) + "g")), u.lastIndex = 0; (v = u.exec(_)); ) var m = v.index;
                            l = l.slice(0, m === i ? c : m);
                        }
                    } else if (t.indexOf(lt(u), c) != c) {
                        var C = l.lastIndexOf(u);
                        C > -1 && (l = l.slice(0, C));
                    }
                    return l + r;
                }
                function Qd(t) {
                    return (t = U(t)), t && so.test(t) ? t.replace(Yi, Ef) : t;
                }
                var Vd = Mn(function (t, n, e) {
                        return t + (e ? " " : "") + n.toUpperCase();
                    }),
                    bi = Pu("toUpperCase");
                function ma(t, n, e) {
                    return (t = U(t)), (n = e ? i : n), n === i ? (Pf(t) ? Of(t) : hf(t)) : t.match(n) || [];
                }
                var wa = H(function (t, n) {
                        try {
                            return ct(t, i, n);
                        } catch (e) {
                            return yi(e) ? e : new R(e);
                        }
                    }),
                    kd = Zt(function (t, n) {
                        return (
                            mt(n, function (e) {
                                (e = Ft(e)), Jt(t, e, xi(t[e], t));
                            }),
                            t
                        );
                    });
                function jd(t) {
                    var n = t == null ? 0 : t.length,
                        e = E();
                    return (
                        (t = n
                            ? z(t, function (r) {
                                  if (typeof r[1] != "function") throw new wt(O);
                                  return [e(r[0]), r[1]];
                              })
                            : []),
                        H(function (r) {
                            for (var u = -1; ++u < n; ) {
                                var o = t[u];
                                if (ct(o[0], this, r)) return ct(o[1], this, r);
                            }
                        })
                    );
                }
                function tg(t) {
                    return Ec(Ct(t, Ht));
                }
                function Ti(t) {
                    return function () {
                        return t;
                    };
                }
                function ng(t, n) {
                    return t == null || t !== t ? n : t;
                }
                var eg = Au(),
                    rg = Au(!0);
                function ft(t) {
                    return t;
                }
                function Li(t) {
                    return ks(typeof t == "function" ? t : Ct(t, Ht));
                }
                function ig(t) {
                    return tu(Ct(t, Ht));
                }
                function sg(t, n) {
                    return nu(t, Ct(n, Ht));
                }
                var ug = H(function (t, n) {
                        return function (e) {
                            return fe(e, t, n);
                        };
                    }),
                    ag = H(function (t, n) {
                        return function (e) {
                            return fe(t, e, n);
                        };
                    });
                function Hi(t, n, e) {
                    var r = V(n),
                        u = Je(n, r);
                    e == null && !(K(n) && (u.length || !r.length)) && ((e = n), (n = t), (t = this), (u = Je(n, V(n))));
                    var o = !(K(e) && "chain" in e) || !!e.chain,
                        f = Qt(t);
                    return (
                        mt(u, function (c) {
                            var l = n[c];
                            (t[c] = l),
                                f &&
                                    (t.prototype[c] = function () {
                                        var v = this.__chain__;
                                        if (o || v) {
                                            var _ = t(this.__wrapped__),
                                                m = (_.__actions__ = ut(this.__actions__));
                                            return m.push({ func: l, args: arguments, thisArg: t }), (_.__chain__ = v), _;
                                        }
                                        return l.apply(t, rn([this.value()], arguments));
                                    });
                        }),
                        t
                    );
                }
                function og() {
                    return j._ === this && (j._ = Df), this;
                }
                function Di() {}
                function fg(t) {
                    return (
                        (t = T(t)),
                        H(function (n) {
                            return eu(n, t);
                        })
                    );
                }
                var cg = hi(z),
                    hg = hi(Is),
                    lg = hi($r);
                function Pa(t) {
                    return mi(t) ? qr(Ft(t)) : Bc(t);
                }
                function pg(t) {
                    return function (n) {
                        return t == null ? i : wn(t, n);
                    };
                }
                var dg = xu(),
                    gg = xu(!0);
                function Ni() {
                    return [];
                }
                function $i() {
                    return !1;
                }
                function vg() {
                    return {};
                }
                function _g() {
                    return "";
                }
                function mg() {
                    return !0;
                }
                function wg(t, n) {
                    if (((t = T(t)), t < 1 || t > nn)) return [];
                    var e = $t,
                        r = nt(t, $t);
                    (n = E(n)), (t -= $t);
                    for (var u = Wr(r, n); ++e < t; ) n(e);
                    return u;
                }
                function Pg(t) {
                    return b(t) ? z(t, Ft) : pt(t) ? [t] : ut(Wu(U(t)));
                }
                function Cg(t) {
                    var n = ++Lf;
                    return U(t) + n;
                }
                var Ag = ke(function (t, n) {
                        return t + n;
                    }, 0),
                    Ig = li("ceil"),
                    xg = ke(function (t, n) {
                        return t / n;
                    }, 1),
                    Eg = li("floor");
                function yg(t) {
                    return t && t.length ? Ke(t, ft, Vr) : i;
                }
                function Sg(t, n) {
                    return t && t.length ? Ke(t, E(n, 2), Vr) : i;
                }
                function Og(t) {
                    return ys(t, ft);
                }
                function Rg(t, n) {
                    return ys(t, E(n, 2));
                }
                function bg(t) {
                    return t && t.length ? Ke(t, ft, ni) : i;
                }
                function Tg(t, n) {
                    return t && t.length ? Ke(t, E(n, 2), ni) : i;
                }
                var Lg = ke(function (t, n) {
                        return t * n;
                    }, 1),
                    Hg = li("round"),
                    Dg = ke(function (t, n) {
                        return t - n;
                    }, 0);
                function Ng(t) {
                    return t && t.length ? Fr(t, ft) : 0;
                }
                function $g(t, n) {
                    return t && t.length ? Fr(t, E(n, 2)) : 0;
                }
                return (
                    (a.after = ip),
                    (a.ary = Vu),
                    (a.assign = Kp),
                    (a.assignIn = ha),
                    (a.assignInWith = hr),
                    (a.assignWith = Jp),
                    (a.at = Yp),
                    (a.before = ku),
                    (a.bind = xi),
                    (a.bindAll = kd),
                    (a.bindKey = ju),
                    (a.castArray = vp),
                    (a.chain = Zu),
                    (a.chunk = Eh),
                    (a.compact = yh),
                    (a.concat = Sh),
                    (a.cond = jd),
                    (a.conforms = tg),
                    (a.constant = Ti),
                    (a.countBy = Nl),
                    (a.create = Zp),
                    (a.curry = ta),
                    (a.curryRight = na),
                    (a.debounce = ea),
                    (a.defaults = Xp),
                    (a.defaultsDeep = Qp),
                    (a.defer = sp),
                    (a.delay = up),
                    (a.difference = Oh),
                    (a.differenceBy = Rh),
                    (a.differenceWith = bh),
                    (a.drop = Th),
                    (a.dropRight = Lh),
                    (a.dropRightWhile = Hh),
                    (a.dropWhile = Dh),
                    (a.fill = Nh),
                    (a.filter = ql),
                    (a.flatMap = Wl),
                    (a.flatMapDeep = Ml),
                    (a.flatMapDepth = Bl),
                    (a.flatten = zu),
                    (a.flattenDeep = $h),
                    (a.flattenDepth = qh),
                    (a.flip = ap),
                    (a.flow = eg),
                    (a.flowRight = rg),
                    (a.fromPairs = Uh),
                    (a.functions = rd),
                    (a.functionsIn = id),
                    (a.groupBy = Gl),
                    (a.initial = Wh),
                    (a.intersection = Mh),
                    (a.intersectionBy = Bh),
                    (a.intersectionWith = Gh),
                    (a.invert = ud),
                    (a.invertBy = ad),
                    (a.invokeMap = Kl),
                    (a.iteratee = Li),
                    (a.keyBy = Jl),
                    (a.keys = V),
                    (a.keysIn = ot),
                    (a.map = sr),
                    (a.mapKeys = fd),
                    (a.mapValues = cd),
                    (a.matches = ig),
                    (a.matchesProperty = sg),
                    (a.memoize = ar),
                    (a.merge = hd),
                    (a.mergeWith = la),
                    (a.method = ug),
                    (a.methodOf = ag),
                    (a.mixin = Hi),
                    (a.negate = or),
                    (a.nthArg = fg),
                    (a.omit = ld),
                    (a.omitBy = pd),
                    (a.once = op),
                    (a.orderBy = Yl),
                    (a.over = cg),
                    (a.overArgs = fp),
                    (a.overEvery = hg),
                    (a.overSome = lg),
                    (a.partial = Ei),
                    (a.partialRight = ra),
                    (a.partition = Zl),
                    (a.pick = dd),
                    (a.pickBy = pa),
                    (a.property = Pa),
                    (a.propertyOf = pg),
                    (a.pull = Yh),
                    (a.pullAll = Ju),
                    (a.pullAllBy = Zh),
                    (a.pullAllWith = Xh),
                    (a.pullAt = Qh),
                    (a.range = dg),
                    (a.rangeRight = gg),
                    (a.rearg = cp),
                    (a.reject = Vl),
                    (a.remove = Vh),
                    (a.rest = hp),
                    (a.reverse = Ai),
                    (a.sampleSize = jl),
                    (a.set = vd),
                    (a.setWith = _d),
                    (a.shuffle = tp),
                    (a.slice = kh),
                    (a.sortBy = rp),
                    (a.sortedUniq = sl),
                    (a.sortedUniqBy = ul),
                    (a.split = Wd),
                    (a.spread = lp),
                    (a.tail = al),
                    (a.take = ol),
                    (a.takeRight = fl),
                    (a.takeRightWhile = cl),
                    (a.takeWhile = hl),
                    (a.tap = yl),
                    (a.throttle = pp),
                    (a.thru = ir),
                    (a.toArray = oa),
                    (a.toPairs = da),
                    (a.toPairsIn = ga),
                    (a.toPath = Pg),
                    (a.toPlainObject = ca),
                    (a.transform = md),
                    (a.unary = dp),
                    (a.union = ll),
                    (a.unionBy = pl),
                    (a.unionWith = dl),
                    (a.uniq = gl),
                    (a.uniqBy = vl),
                    (a.uniqWith = _l),
                    (a.unset = wd),
                    (a.unzip = Ii),
                    (a.unzipWith = Yu),
                    (a.update = Pd),
                    (a.updateWith = Cd),
                    (a.values = zn),
                    (a.valuesIn = Ad),
                    (a.without = ml),
                    (a.words = ma),
                    (a.wrap = gp),
                    (a.xor = wl),
                    (a.xorBy = Pl),
                    (a.xorWith = Cl),
                    (a.zip = Al),
                    (a.zipObject = Il),
                    (a.zipObjectDeep = xl),
                    (a.zipWith = El),
                    (a.entries = da),
                    (a.entriesIn = ga),
                    (a.extend = ha),
                    (a.extendWith = hr),
                    Hi(a, a),
                    (a.add = Ag),
                    (a.attempt = wa),
                    (a.camelCase = yd),
                    (a.capitalize = va),
                    (a.ceil = Ig),
                    (a.clamp = Id),
                    (a.clone = _p),
                    (a.cloneDeep = wp),
                    (a.cloneDeepWith = Pp),
                    (a.cloneWith = mp),
                    (a.conformsTo = Cp),
                    (a.deburr = _a),
                    (a.defaultTo = ng),
                    (a.divide = xg),
                    (a.endsWith = Sd),
                    (a.eq = Rt),
                    (a.escape = Od),
                    (a.escapeRegExp = Rd),
                    (a.every = $l),
                    (a.find = Ul),
                    (a.findIndex = Bu),
                    (a.findKey = Vp),
                    (a.findLast = Fl),
                    (a.findLastIndex = Gu),
                    (a.findLastKey = kp),
                    (a.floor = Eg),
                    (a.forEach = Xu),
                    (a.forEachRight = Qu),
                    (a.forIn = jp),
                    (a.forInRight = td),
                    (a.forOwn = nd),
                    (a.forOwnRight = ed),
                    (a.get = Oi),
                    (a.gt = Ap),
                    (a.gte = Ip),
                    (a.has = sd),
                    (a.hasIn = Ri),
                    (a.head = Ku),
                    (a.identity = ft),
                    (a.includes = zl),
                    (a.indexOf = Fh),
                    (a.inRange = xd),
                    (a.invoke = od),
                    (a.isArguments = An),
                    (a.isArray = b),
                    (a.isArrayBuffer = xp),
                    (a.isArrayLike = at),
                    (a.isArrayLikeObject = Y),
                    (a.isBoolean = Ep),
                    (a.isBuffer = hn),
                    (a.isDate = yp),
                    (a.isElement = Sp),
                    (a.isEmpty = Op),
                    (a.isEqual = Rp),
                    (a.isEqualWith = bp),
                    (a.isError = yi),
                    (a.isFinite = Tp),
                    (a.isFunction = Qt),
                    (a.isInteger = ia),
                    (a.isLength = fr),
                    (a.isMap = sa),
                    (a.isMatch = Lp),
                    (a.isMatchWith = Hp),
                    (a.isNaN = Dp),
                    (a.isNative = Np),
                    (a.isNil = qp),
                    (a.isNull = $p),
                    (a.isNumber = ua),
                    (a.isObject = K),
                    (a.isObjectLike = J),
                    (a.isPlainObject = ge),
                    (a.isRegExp = Si),
                    (a.isSafeInteger = Up),
                    (a.isSet = aa),
                    (a.isString = cr),
                    (a.isSymbol = pt),
                    (a.isTypedArray = Gn),
                    (a.isUndefined = Fp),
                    (a.isWeakMap = Wp),
                    (a.isWeakSet = Mp),
                    (a.join = zh),
                    (a.kebabCase = bd),
                    (a.last = It),
                    (a.lastIndexOf = Kh),
                    (a.lowerCase = Td),
                    (a.lowerFirst = Ld),
                    (a.lt = Bp),
                    (a.lte = Gp),
                    (a.max = yg),
                    (a.maxBy = Sg),
                    (a.mean = Og),
                    (a.meanBy = Rg),
                    (a.min = bg),
                    (a.minBy = Tg),
                    (a.stubArray = Ni),
                    (a.stubFalse = $i),
                    (a.stubObject = vg),
                    (a.stubString = _g),
                    (a.stubTrue = mg),
                    (a.multiply = Lg),
                    (a.nth = Jh),
                    (a.noConflict = og),
                    (a.noop = Di),
                    (a.now = ur),
                    (a.pad = Hd),
                    (a.padEnd = Dd),
                    (a.padStart = Nd),
                    (a.parseInt = $d),
                    (a.random = Ed),
                    (a.reduce = Xl),
                    (a.reduceRight = Ql),
                    (a.repeat = qd),
                    (a.replace = Ud),
                    (a.result = gd),
                    (a.round = Hg),
                    (a.runInContext = h),
                    (a.sample = kl),
                    (a.size = np),
                    (a.snakeCase = Fd),
                    (a.some = ep),
                    (a.sortedIndex = jh),
                    (a.sortedIndexBy = tl),
                    (a.sortedIndexOf = nl),
                    (a.sortedLastIndex = el),
                    (a.sortedLastIndexBy = rl),
                    (a.sortedLastIndexOf = il),
                    (a.startCase = Md),
                    (a.startsWith = Bd),
                    (a.subtract = Dg),
                    (a.sum = Ng),
                    (a.sumBy = $g),
                    (a.template = Gd),
                    (a.times = wg),
                    (a.toFinite = Vt),
                    (a.toInteger = T),
                    (a.toLength = fa),
                    (a.toLower = zd),
                    (a.toNumber = xt),
                    (a.toSafeInteger = zp),
                    (a.toString = U),
                    (a.toUpper = Kd),
                    (a.trim = Jd),
                    (a.trimEnd = Yd),
                    (a.trimStart = Zd),
                    (a.truncate = Xd),
                    (a.unescape = Qd),
                    (a.uniqueId = Cg),
                    (a.upperCase = Vd),
                    (a.upperFirst = bi),
                    (a.each = Xu),
                    (a.eachRight = Qu),
                    (a.first = Ku),
                    Hi(
                        a,
                        (function () {
                            var t = {};
                            return (
                                qt(a, function (n, e) {
                                    W.call(a.prototype, e) || (t[e] = n);
                                }),
                                t
                            );
                        })(),
                        { chain: !1 }
                    ),
                    (a.VERSION = p),
                    mt(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function (t) {
                        a[t].placeholder = a;
                    }),
                    mt(["drop", "take"], function (t, n) {
                        (N.prototype[t] = function (e) {
                            e = e === i ? 1 : Q(T(e), 0);
                            var r = this.__filtered__ && !n ? new N(this) : this.clone();
                            return (
                                r.__filtered__
                                    ? (r.__takeCount__ = nt(e, r.__takeCount__))
                                    : r.__views__.push({ size: nt(e, $t), type: t + (r.__dir__ < 0 ? "Right" : "") }),
                                r
                            );
                        }),
                            (N.prototype[t + "Right"] = function (e) {
                                return this.reverse()[t](e).reverse();
                            });
                    }),
                    mt(["filter", "map", "takeWhile"], function (t, n) {
                        var e = n + 1,
                            r = e == zi || e == Ka;
                        N.prototype[t] = function (u) {
                            var o = this.clone();
                            return o.__iteratees__.push({ iteratee: E(u, 3), type: e }), (o.__filtered__ = o.__filtered__ || r), o;
                        };
                    }),
                    mt(["head", "last"], function (t, n) {
                        var e = "take" + (n ? "Right" : "");
                        N.prototype[t] = function () {
                            return this[e](1).value()[0];
                        };
                    }),
                    mt(["initial", "tail"], function (t, n) {
                        var e = "drop" + (n ? "" : "Right");
                        N.prototype[t] = function () {
                            return this.__filtered__ ? new N(this) : this[e](1);
                        };
                    }),
                    (N.prototype.compact = function () {
                        return this.filter(ft);
                    }),
                    (N.prototype.find = function (t) {
                        return this.filter(t).head();
                    }),
                    (N.prototype.findLast = function (t) {
                        return this.reverse().find(t);
                    }),
                    (N.prototype.invokeMap = H(function (t, n) {
                        return typeof t == "function"
                            ? new N(this)
                            : this.map(function (e) {
                                  return fe(e, t, n);
                              });
                    })),
                    (N.prototype.reject = function (t) {
                        return this.filter(or(E(t)));
                    }),
                    (N.prototype.slice = function (t, n) {
                        t = T(t);
                        var e = this;
                        return e.__filtered__ && (t > 0 || n < 0)
                            ? new N(e)
                            : (t < 0 ? (e = e.takeRight(-t)) : t && (e = e.drop(t)), n !== i && ((n = T(n)), (e = n < 0 ? e.dropRight(-n) : e.take(n - t))), e);
                    }),
                    (N.prototype.takeRightWhile = function (t) {
                        return this.reverse().takeWhile(t).reverse();
                    }),
                    (N.prototype.toArray = function () {
                        return this.take($t);
                    }),
                    qt(N.prototype, function (t, n) {
                        var e = /^(?:filter|find|map|reject)|While$/.test(n),
                            r = /^(?:head|last)$/.test(n),
                            u = a[r ? "take" + (n == "last" ? "Right" : "") : n],
                            o = r || /^find/.test(n);
                        u &&
                            (a.prototype[n] = function () {
                                var f = this.__wrapped__,
                                    c = r ? [1] : arguments,
                                    l = f instanceof N,
                                    v = c[0],
                                    _ = l || b(f),
                                    m = function (D) {
                                        var $ = u.apply(a, rn([D], c));
                                        return r && C ? $[0] : $;
                                    };
                                _ && e && typeof v == "function" && v.length != 1 && (l = _ = !1);
                                var C = this.__chain__,
                                    I = !!this.__actions__.length,
                                    y = o && !C,
                                    L = l && !I;
                                if (!o && _) {
                                    f = L ? f : new N(this);
                                    var S = t.apply(f, c);
                                    return S.__actions__.push({ func: ir, args: [m], thisArg: i }), new Pt(S, C);
                                }
                                return y && L ? t.apply(this, c) : ((S = this.thru(m)), y ? (r ? S.value()[0] : S.value()) : S);
                            });
                    }),
                    mt(["pop", "push", "shift", "sort", "splice", "unshift"], function (t) {
                        var n = be[t],
                            e = /^(?:push|sort|unshift)$/.test(t) ? "tap" : "thru",
                            r = /^(?:pop|shift)$/.test(t);
                        a.prototype[t] = function () {
                            var u = arguments;
                            if (r && !this.__chain__) {
                                var o = this.value();
                                return n.apply(b(o) ? o : [], u);
                            }
                            return this[e](function (f) {
                                return n.apply(b(f) ? f : [], u);
                            });
                        };
                    }),
                    qt(N.prototype, function (t, n) {
                        var e = a[n];
                        if (e) {
                            var r = e.name + "";
                            W.call(Un, r) || (Un[r] = []), Un[r].push({ name: n, func: e });
                        }
                    }),
                    (Un[Ve(i, ln).name] = [{ name: "wrapper", func: i }]),
                    (N.prototype.clone = Qf),
                    (N.prototype.reverse = Vf),
                    (N.prototype.value = kf),
                    (a.prototype.at = Sl),
                    (a.prototype.chain = Ol),
                    (a.prototype.commit = Rl),
                    (a.prototype.next = bl),
                    (a.prototype.plant = Ll),
                    (a.prototype.reverse = Hl),
                    (a.prototype.toJSON = a.prototype.valueOf = a.prototype.value = Dl),
                    (a.prototype.first = a.prototype.head),
                    ee && (a.prototype[ee] = Tl),
                    a
                );
            },
            Nn = Rf();
        dn ? (((dn.exports = Nn)._ = Nn), (Lr._ = Nn)) : (j._ = Nn);
    }).call(_e$1);
})(Ui, Ui.exports);
var Xg = Object.defineProperty,
    Qg = Object.defineProperties,
    Vg = Object.getOwnPropertyDescriptors,
    Oa = Object.getOwnPropertySymbols,
    kg = Object.prototype.hasOwnProperty,
    jg = Object.prototype.propertyIsEnumerable,
    Ra = (P, s, i) => (s in P ? Xg(P, s, { enumerable: !0, configurable: !0, writable: !0, value: i }) : (P[s] = i)),
    lr = (P, s) => {
        for (var i in s || (s = {})) kg.call(s, i) && Ra(P, i, s[i]);
        if (Oa) for (var i of Oa(s)) jg.call(s, i) && Ra(P, i, s[i]);
        return P;
    },
    tv = (P, s) => Qg(P, Vg(s));
function Lt$1(P, s, i) {
    var p;
    const w = mn$1(P);
    return ((p = s.rpcMap) == null ? void 0 : p[w.reference]) || `${Zg}?chainId=${w.namespace}:${w.reference}&projectId=${i}`;
}
function In(P) {
    return P.includes(":") ? P.split(":")[1] : P;
}
function ba(P) {
    return P.map((s) => `${s.split(":")[0]}:${s.split(":")[1]}`);
}
function nv(P, s) {
    const i = Object.keys(s.namespaces).filter((w) => w.includes(P));
    if (!i.length) return [];
    const p = [];
    return (
        i.forEach((w) => {
            const x = s.namespaces[w].accounts;
            p.push(...x);
        }),
        p
    );
}
function Fi(P = {}, s = {}) {
    const i = Ta(P),
        p = Ta(s);
    return Ui.exports.merge(i, p);
}
function Ta(P) {
    var s, i, p, w;
    const x = {};
    if (!Xr$1(P)) return x;
    for (const [O, k] of Object.entries(P)) {
        const tn = fn$1(O) ? [O] : k.chains,
            Jn = k.methods || [],
            xn = k.events || [],
            Ht = k.rpcMap || {},
            Mt = Ao$1(O);
        x[Mt] = tv(lr(lr({}, x[Mt]), k), {
            chains: me$2(tn, (s = x[Mt]) == null ? void 0 : s.chains),
            methods: me$2(Jn, (i = x[Mt]) == null ? void 0 : i.methods),
            events: me$2(xn, (p = x[Mt]) == null ? void 0 : p.events),
            rpcMap: lr(lr({}, Ht), (w = x[Mt]) == null ? void 0 : w.rpcMap),
        });
    }
    return x;
}
function ev(P) {
    return P.includes(":") ? P.split(":")[2] : P;
}
function La(P) {
    const s = {};
    for (const [i, p] of Object.entries(P)) {
        const w = p.methods || [],
            x = p.events || [],
            O = p.accounts || [],
            k = fn$1(i) ? [i] : p.chains ? p.chains : ba(p.accounts);
        s[i] = { chains: k, methods: w, events: x, accounts: O };
    }
    return s;
}
function Wi(P) {
    return typeof P == "number" ? P : P.includes("0x") ? parseInt(P, 16) : ((P = P.includes(":") ? P.split(":")[1] : P), isNaN(Number(P)) ? P : Number(P));
}
const Ha = {},
    F$2 = (P) => Ha[P],
    Mi = (P, s) => {
        Ha[P] = s;
    };
class rv {
    constructor(s) {
        (this.name = "polkadot"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]) || [] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                const w = In(i);
                s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
var iv = Object.defineProperty,
    sv = Object.defineProperties,
    uv = Object.getOwnPropertyDescriptors,
    Da = Object.getOwnPropertySymbols,
    av = Object.prototype.hasOwnProperty,
    ov = Object.prototype.propertyIsEnumerable,
    Na = (P, s, i) => (s in P ? iv(P, s, { enumerable: !0, configurable: !0, writable: !0, value: i }) : (P[s] = i)),
    $a = (P, s) => {
        for (var i in s || (s = {})) av.call(s, i) && Na(P, i, s[i]);
        if (Da) for (var i of Da(s)) ov.call(s, i) && Na(P, i, s[i]);
        return P;
    },
    qa = (P, s) => sv(P, uv(s));
class fv {
    constructor(s) {
        (this.name = "eip155"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.httpProviders = this.createHttpProviders()),
            (this.chainId = parseInt(this.getDefaultChain()));
    }
    async request(s) {
        switch (s.request.method) {
            case "eth_requestAccounts":
                return this.getAccounts();
            case "eth_accounts":
                return this.getAccounts();
            case "wallet_switchEthereumChain":
                return await this.handleSwitchChain(s);
            case "eth_chainId":
                return parseInt(this.getDefaultChain());
            case "wallet_getCapabilities":
                return await this.getCapabilities(s);
        }
        return this.namespace.methods.includes(s.request.method) ? await this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(parseInt(s), i),
            (this.chainId = parseInt(s)),
            this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId.toString();
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(`${this.name}:${s}`, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                const w = parseInt(In(i));
                s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    getHttpProvider() {
        const s = this.chainId,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    async handleSwitchChain(s) {
        var i, p;
        let w = s.request.params ? ((i = s.request.params[0]) == null ? void 0 : i.chainId) : "0x0";
        w = w.startsWith("0x") ? w : `0x${w}`;
        const x = parseInt(w, 16);
        if (this.isChainApproved(x)) this.setDefaultChain(`${x}`);
        else if (this.namespace.methods.includes("wallet_switchEthereumChain"))
            await this.client.request({
                topic: s.topic,
                request: { method: s.request.method, params: [{ chainId: w }] },
                chainId: (p = this.namespace.chains) == null ? void 0 : p[0],
            }),
                this.setDefaultChain(`${x}`);
        else
            throw new Error(
                `Failed to switch to chain 'eip155:${x}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`
            );
        return null;
    }
    isChainApproved(s) {
        return this.namespace.chains.includes(`${this.name}:${s}`);
    }
    async getCapabilities(s) {
        var i, p, w;
        const x = (p = (i = s.request) == null ? void 0 : i.params) == null ? void 0 : p[0];
        if (!x) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
        const O = this.client.session.get(s.topic),
            k = ((w = O?.sessionProperties) == null ? void 0 : w.capabilities) || {};
        if (k != null && k[x]) return k?.[x];
        const tn = await this.client.request(s);
        try {
            await this.client.session.update(s.topic, {
                sessionProperties: qa($a({}, O.sessionProperties || {}), { capabilities: qa($a({}, k || {}), { [x]: tn }) }),
            });
        } catch (Jn) {
            console.warn("Failed to update session with capabilities", Jn);
        }
        return tn;
    }
}
class cv {
    constructor(s) {
        (this.name = "solana"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                const w = In(i);
                s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class hv {
    constructor(s) {
        (this.name = "cosmos"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                const w = In(i);
                s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class lv {
    constructor(s) {
        (this.name = "algorand"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        if (!this.httpProviders[s]) {
            const p = i || Lt$1(`${this.name}:${s}`, this.namespace, this.client.core.projectId);
            if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
            this.setHttpProvider(s, p);
        }
        (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                s[i] = this.createHttpProvider(i, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        return typeof p > "u" ? void 0 : new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class pv {
    constructor(s) {
        (this.name = "cip34"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                const p = this.getCardanoRPCUrl(i),
                    w = In(i);
                s[w] = this.createHttpProvider(w, p);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    getCardanoRPCUrl(s) {
        const i = this.namespace.rpcMap;
        if (i) return i[s];
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || this.getCardanoRPCUrl(s);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class dv {
    constructor(s) {
        (this.name = "elrond"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                const w = In(i);
                s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class gv {
    constructor(s) {
        (this.name = "multiversx"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                const w = In(i);
                s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class vv {
    constructor(s) {
        (this.name = "near"),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        this.namespace = Object.assign(this.namespace, s);
    }
    requestAccounts() {
        return this.getAccounts();
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);
    }
    setDefaultChain(s, i) {
        if (((this.chainId = s), !this.httpProviders[s])) {
            const p = i || Lt$1(`${this.name}:${s}`, this.namespace);
            if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
            this.setHttpProvider(s, p);
        }
        this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]) || [] : [];
    }
    createHttpProviders() {
        const s = {};
        return (
            this.namespace.chains.forEach((i) => {
                var p;
                s[i] = this.createHttpProvider(i, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);
            }),
            s
        );
    }
    getHttpProvider() {
        const s = `${this.name}:${this.chainId}`,
            i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace);
        return typeof p > "u" ? void 0 : new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
class _v {
    constructor(s) {
        (this.name = Kn),
            (this.namespace = s.namespace),
            (this.events = F$2("events")),
            (this.client = F$2("client")),
            (this.chainId = this.getDefaultChain()),
            (this.httpProviders = this.createHttpProviders());
    }
    updateNamespace(s) {
        (this.namespace.chains = [...new Set((this.namespace.chains || []).concat(s.chains || []))]),
            (this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(s.accounts || []))]),
            (this.namespace.methods = [...new Set((this.namespace.methods || []).concat(s.methods || []))]),
            (this.namespace.events = [...new Set((this.namespace.events || []).concat(s.events || []))]),
            (this.httpProviders = this.createHttpProviders());
    }
    requestAccounts() {
        return this.getAccounts();
    }
    request(s) {
        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider(s.chainId).request(s.request);
    }
    setDefaultChain(s, i) {
        this.httpProviders[s] || this.setHttpProvider(s, i), (this.chainId = s), this.events.emit(Tt$1.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);
    }
    getDefaultChain() {
        if (this.chainId) return this.chainId;
        if (this.namespace.defaultChain) return this.namespace.defaultChain;
        const s = this.namespace.chains[0];
        if (!s) throw new Error("ChainId not found");
        return s.split(":")[1];
    }
    getAccounts() {
        const s = this.namespace.accounts;
        return s ? [...new Set(s.filter((i) => i.split(":")[1] === this.chainId.toString()).map((i) => i.split(":")[2]))] : [];
    }
    createHttpProviders() {
        var s, i;
        const p = {};
        return (
            (i = (s = this.namespace) == null ? void 0 : s.accounts) == null ||
                i.forEach((w) => {
                    const x = mn$1(w);
                    p[`${x.namespace}:${x.reference}`] = this.createHttpProvider(w);
                }),
            p
        );
    }
    getHttpProvider(s) {
        const i = this.httpProviders[s];
        if (typeof i > "u") throw new Error(`JSON-RPC provider for ${s} not found`);
        return i;
    }
    setHttpProvider(s, i) {
        const p = this.createHttpProvider(s, i);
        p && (this.httpProviders[s] = p);
    }
    createHttpProvider(s, i) {
        const p = i || Lt$1(s, this.namespace, this.client.core.projectId);
        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);
        return new o$7(new f$1(p, F$2("disableProviderPing")));
    }
}
var mv = Object.defineProperty,
    wv = Object.defineProperties,
    Pv = Object.getOwnPropertyDescriptors,
    Ua = Object.getOwnPropertySymbols,
    Cv = Object.prototype.hasOwnProperty,
    Av = Object.prototype.propertyIsEnumerable,
    Fa = (P, s, i) => (s in P ? mv(P, s, { enumerable: !0, configurable: !0, writable: !0, value: i }) : (P[s] = i)),
    pr = (P, s) => {
        for (var i in s || (s = {})) Cv.call(s, i) && Fa(P, i, s[i]);
        if (Ua) for (var i of Ua(s)) Av.call(s, i) && Fa(P, i, s[i]);
        return P;
    },
    Bi = (P, s) => wv(P, Pv(s));
let dr$1 = class dr {
    constructor(s) {
        (this.events = new Gg()),
            (this.rpcProviders = {}),
            (this.shouldAbortPairingAttempt = !1),
            (this.maxPairingAttempts = 10),
            (this.disableProviderPing = !1),
            (this.providerOpts = s),
            (this.logger = typeof s?.logger < "u" && typeof s?.logger != "string" ? s.logger : Wg(k$2({ level: s?.logger || ya }))),
            (this.disableProviderPing = s?.disableProviderPing || !1);
    }
    static async init(s) {
        const i = new dr(s);
        return await i.initialize(), i;
    }
    async request(s, i, p) {
        const [w, x] = this.validateChain(i);
        if (!this.session) throw new Error("Please call connect() before request()");
        return await this.getProvider(w).request({ request: pr({}, s), chainId: `${w}:${x}`, topic: this.session.topic, expiry: p });
    }
    sendAsync(s, i, p, w) {
        const x = new Date().getTime();
        this.request(s, p, w)
            .then((O) => i(null, formatJsonRpcResult(x, O)))
            .catch((O) => i(O, void 0));
    }
    async enable() {
        if (!this.client) throw new Error("Sign Client not initialized");
        return (
            this.session ||
                (await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties })),
            await this.requestAccounts()
        );
    }
    async disconnect() {
        var s;
        if (!this.session) throw new Error("Please call connect() before enable()");
        await this.client.disconnect({ topic: (s = this.session) == null ? void 0 : s.topic, reason: er$2("USER_DISCONNECTED") }), await this.cleanup();
    }
    async connect(s) {
        if (!this.client) throw new Error("Sign Client not initialized");
        if ((this.setNamespaces(s), await this.cleanupPendingPairings(), !s.skipPairing)) return await this.pair(s.pairingTopic);
    }
    async authenticate(s, i) {
        if (!this.client) throw new Error("Sign Client not initialized");
        this.setNamespaces(s), await this.cleanupPendingPairings();
        const { uri: p, response: w } = await this.client.authenticate(s, i);
        p && ((this.uri = p), this.events.emit("display_uri", p));
        const x = await w();
        if (((this.session = x.session), this.session)) {
            const O = La(this.session.namespaces);
            (this.namespaces = Fi(this.namespaces, O)), this.persist("namespaces", this.namespaces), this.onConnect();
        }
        return x;
    }
    on(s, i) {
        this.events.on(s, i);
    }
    once(s, i) {
        this.events.once(s, i);
    }
    removeListener(s, i) {
        this.events.removeListener(s, i);
    }
    off(s, i) {
        this.events.off(s, i);
    }
    get isWalletConnect() {
        return !0;
    }
    async pair(s) {
        this.shouldAbortPairingAttempt = !1;
        let i = 0;
        do {
            if (this.shouldAbortPairingAttempt) throw new Error("Pairing aborted");
            if (i >= this.maxPairingAttempts) throw new Error("Max auto pairing attempts reached");
            const { uri: p, approval: w } = await this.client.connect({
                pairingTopic: s,
                requiredNamespaces: this.namespaces,
                optionalNamespaces: this.optionalNamespaces,
                sessionProperties: this.sessionProperties,
            });
            p && ((this.uri = p), this.events.emit("display_uri", p)),
                await w()
                    .then((x) => {
                        this.session = x;
                        const O = La(x.namespaces);
                        (this.namespaces = Fi(this.namespaces, O)), this.persist("namespaces", this.namespaces);
                    })
                    .catch((x) => {
                        if (x.message !== it$1) throw x;
                        i++;
                    });
        } while (!this.session);
        return this.onConnect(), this.session;
    }
    setDefaultChain(s, i) {
        try {
            if (!this.session) return;
            const [p, w] = this.validateChain(s),
                x = this.getProvider(p);
            x.name === Kn ? x.setDefaultChain(`${p}:${w}`, i) : x.setDefaultChain(w, i);
        } catch (p) {
            if (!/Please call connect/.test(p.message)) throw p;
        }
    }
    async cleanupPendingPairings(s = {}) {
        this.logger.info("Cleaning up inactive pairings...");
        const i = this.client.pairing.getAll();
        if (Ir$1(i)) {
            for (const p of i) s.deletePairings ? this.client.core.expirer.set(p.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(p.topic);
            this.logger.info(`Inactive pairings cleared: ${i.length}`);
        }
    }
    abortPairingAttempt() {
        this.shouldAbortPairingAttempt = !0;
    }
    async checkStorage() {
        if (
            ((this.namespaces = await this.getFromStore("namespaces")),
            (this.optionalNamespaces = (await this.getFromStore("optionalNamespaces")) || {}),
            this.client.session.length)
        ) {
            const s = this.client.session.keys.length - 1;
            (this.session = this.client.session.get(this.client.session.keys[s])), this.createProviders();
        }
    }
    async initialize() {
        this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
    }
    async createClient() {
        (this.client =
            this.providerOpts.client ||
            (await _e$2.init({
                core: this.providerOpts.core,
                logger: this.providerOpts.logger || ya,
                relayUrl: this.providerOpts.relayUrl || Kg,
                projectId: this.providerOpts.projectId,
                metadata: this.providerOpts.metadata,
                storageOptions: this.providerOpts.storageOptions,
                storage: this.providerOpts.storage,
                name: this.providerOpts.name,
                customStoragePrefix: this.providerOpts.customStoragePrefix,
                telemetryEnabled: this.providerOpts.telemetryEnabled,
            }))),
            this.logger.trace("SignClient Initialized");
    }
    createProviders() {
        if (!this.client) throw new Error("Sign Client not initialized");
        if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
        const s = [...new Set(Object.keys(this.session.namespaces).map((i) => Ao$1(i)))];
        Mi("client", this.client),
            Mi("events", this.events),
            Mi("disableProviderPing", this.disableProviderPing),
            s.forEach((i) => {
                if (!this.session) return;
                const p = nv(i, this.session),
                    w = ba(p),
                    x = Fi(this.namespaces, this.optionalNamespaces),
                    O = Bi(pr({}, x[i]), { accounts: p, chains: w });
                switch (i) {
                    case "eip155":
                        this.rpcProviders[i] = new fv({ namespace: O });
                        break;
                    case "algorand":
                        this.rpcProviders[i] = new lv({ namespace: O });
                        break;
                    case "solana":
                        this.rpcProviders[i] = new cv({ namespace: O });
                        break;
                    case "cosmos":
                        this.rpcProviders[i] = new hv({ namespace: O });
                        break;
                    case "polkadot":
                        this.rpcProviders[i] = new rv({ namespace: O });
                        break;
                    case "cip34":
                        this.rpcProviders[i] = new pv({ namespace: O });
                        break;
                    case "elrond":
                        this.rpcProviders[i] = new dv({ namespace: O });
                        break;
                    case "multiversx":
                        this.rpcProviders[i] = new gv({ namespace: O });
                        break;
                    case "near":
                        this.rpcProviders[i] = new vv({ namespace: O });
                        break;
                    default:
                        this.rpcProviders[Kn] ? this.rpcProviders[Kn].updateNamespace(O) : (this.rpcProviders[Kn] = new _v({ namespace: O }));
                }
            });
    }
    registerEventListeners() {
        if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
        this.client.on("session_ping", (s) => {
            this.events.emit("session_ping", s);
        }),
            this.client.on("session_event", (s) => {
                const { params: i } = s,
                    { event: p } = i;
                if (p.name === "accountsChanged") {
                    const w = p.data;
                    w && Ir$1(w) && this.events.emit("accountsChanged", w.map(ev));
                } else if (p.name === "chainChanged") {
                    const w = i.chainId,
                        x = i.event.data,
                        O = Ao$1(w),
                        k = Wi(w) !== Wi(x) ? `${O}:${Wi(x)}` : w;
                    this.onChainChanged(k);
                } else this.events.emit(p.name, p.data);
                this.events.emit("session_event", s);
            }),
            this.client.on("session_update", ({ topic: s, params: i }) => {
                var p;
                const { namespaces: w } = i,
                    x = (p = this.client) == null ? void 0 : p.session.get(s);
                (this.session = Bi(pr({}, x), { namespaces: w })), this.onSessionUpdate(), this.events.emit("session_update", { topic: s, params: i });
            }),
            this.client.on("session_delete", async (s) => {
                await this.cleanup(),
                    this.events.emit("session_delete", s),
                    this.events.emit("disconnect", Bi(pr({}, er$2("USER_DISCONNECTED")), { data: s.topic }));
            }),
            this.on(Tt$1.DEFAULT_CHAIN_CHANGED, (s) => {
                this.onChainChanged(s, !0);
            });
    }
    getProvider(s) {
        return this.rpcProviders[s] || this.rpcProviders[Kn];
    }
    onSessionUpdate() {
        Object.keys(this.rpcProviders).forEach((s) => {
            var i;
            this.getProvider(s).updateNamespace((i = this.session) == null ? void 0 : i.namespaces[s]);
        });
    }
    setNamespaces(s) {
        const { namespaces: i, optionalNamespaces: p, sessionProperties: w } = s;
        i && Object.keys(i).length && (this.namespaces = i),
            p && Object.keys(p).length && (this.optionalNamespaces = p),
            (this.sessionProperties = w),
            this.persist("namespaces", i),
            this.persist("optionalNamespaces", p);
    }
    validateChain(s) {
        const [i, p] = s?.split(":") || ["", ""];
        if (!this.namespaces || !Object.keys(this.namespaces).length) return [i, p];
        if (
            i &&
            !Object.keys(this.namespaces || {})
                .map((O) => Ao$1(O))
                .includes(i)
        )
            throw new Error(`Namespace '${i}' is not configured. Please call connect() first with namespace config.`);
        if (i && p) return [i, p];
        const w = Ao$1(Object.keys(this.namespaces)[0]),
            x = this.rpcProviders[w].getDefaultChain();
        return [w, x];
    }
    async requestAccounts() {
        const [s] = this.validateChain();
        return await this.getProvider(s).requestAccounts();
    }
    onChainChanged(s, i = !1) {
        if (!this.namespaces) return;
        const [p, w] = this.validateChain(s);
        w &&
            (i || this.getProvider(p).setDefaultChain(w),
            this.namespaces[p]
                ? (this.namespaces[p].defaultChain = w)
                : this.namespaces[`${p}:${w}`]
                ? (this.namespaces[`${p}:${w}`].defaultChain = w)
                : (this.namespaces[`${p}:${w}`] = { defaultChain: w }),
            this.persist("namespaces", this.namespaces),
            this.events.emit("chainChanged", w));
    }
    onConnect() {
        this.createProviders(), this.events.emit("connect", { session: this.session });
    }
    async cleanup() {
        (this.session = void 0),
            (this.namespaces = void 0),
            (this.optionalNamespaces = void 0),
            (this.sessionProperties = void 0),
            this.persist("namespaces", void 0),
            this.persist("optionalNamespaces", void 0),
            this.persist("sessionProperties", void 0),
            await this.cleanupPendingPairings({ deletePairings: !0 });
    }
    persist(s, i) {
        this.client.core.storage.setItem(`${Sa}/${s}`, i);
    }
    async getFromStore(s) {
        return await this.client.core.storage.getItem(`${Sa}/${s}`);
    }
};
const Iv = dr$1;

const R$2 = "wc",
    T$3 = "ethereum_provider",
    $$2 = `${R$2}@2:${T$3}:`,
    j$2 = "https://rpc.walletconnect.com/v1/",
    u$2 = ["eth_sendTransaction", "personal_sign"],
    y$3 = [
        "eth_accounts",
        "eth_requestAccounts",
        "eth_sendRawTransaction",
        "eth_sign",
        "eth_signTransaction",
        "eth_signTypedData",
        "eth_signTypedData_v3",
        "eth_signTypedData_v4",
        "eth_sendTransaction",
        "personal_sign",
        "wallet_switchEthereumChain",
        "wallet_addEthereumChain",
        "wallet_getPermissions",
        "wallet_requestPermissions",
        "wallet_registerOnboarding",
        "wallet_watchAsset",
        "wallet_scanQRCode",
        "wallet_sendCalls",
        "wallet_getCapabilities",
        "wallet_getCallsStatus",
        "wallet_showCallsStatus",
    ],
    g$2 = ["chainChanged", "accountsChanged"],
    b$1 = ["chainChanged", "accountsChanged", "message", "disconnect", "connect"];
var q$2 = Object.defineProperty,
    N$2 = Object.defineProperties,
    D$3 = Object.getOwnPropertyDescriptors,
    M$2 = Object.getOwnPropertySymbols,
    U$1 = Object.prototype.hasOwnProperty,
    Q$2 = Object.prototype.propertyIsEnumerable,
    O$1 = (r, t, s) => (t in r ? q$2(r, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : (r[t] = s)),
    p$2 = (r, t) => {
        for (var s in t || (t = {})) U$1.call(t, s) && O$1(r, s, t[s]);
        if (M$2) for (var s of M$2(t)) Q$2.call(t, s) && O$1(r, s, t[s]);
        return r;
    },
    E$2 = (r, t) => N$2(r, D$3(t));
function m$2(r) {
    return Number(r[0].split(":")[1]);
}
function v$2(r) {
    return `0x${r.toString(16)}`;
}
function L$3(r) {
    const { chains: t, optionalChains: s, methods: i, optionalMethods: e, events: n, optionalEvents: o, rpcMap: c } = r;
    if (!Ir$1(t)) throw new Error("Invalid chains");
    const a = { chains: t, methods: i || u$2, events: n || g$2, rpcMap: p$2({}, t.length ? { [m$2(t)]: c[m$2(t)] } : {}) },
        h = n?.filter((l) => !g$2.includes(l)),
        d = i?.filter((l) => !u$2.includes(l));
    if (!s && !o && !e && !(h != null && h.length) && !(d != null && d.length)) return { required: t.length ? a : void 0 };
    const w = (h?.length && d?.length) || !s,
        I = {
            chains: [...new Set(w ? a.chains.concat(s || []) : s)],
            methods: [...new Set(a.methods.concat(e != null && e.length ? e : y$3))],
            events: [...new Set(a.events.concat(o != null && o.length ? o : b$1))],
            rpcMap: c,
        };
    return { required: t.length ? a : void 0, optional: s.length ? I : void 0 };
}
let C$2 = class C {
    constructor() {
        (this.events = new eventsExports.EventEmitter()),
            (this.namespace = "eip155"),
            (this.accounts = []),
            (this.chainId = 1),
            (this.STORAGE_KEY = $$2),
            (this.on = (t, s) => (this.events.on(t, s), this)),
            (this.once = (t, s) => (this.events.once(t, s), this)),
            (this.removeListener = (t, s) => (this.events.removeListener(t, s), this)),
            (this.off = (t, s) => (this.events.off(t, s), this)),
            (this.parseAccount = (t) => (this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t)),
            (this.signer = {}),
            (this.rpc = {});
    }
    static async init(t) {
        const s = new C();
        return await s.initialize(t), s;
    }
    async request(t, s) {
        return await this.signer.request(t, this.formatChainId(this.chainId), s);
    }
    sendAsync(t, s, i) {
        this.signer.sendAsync(t, s, this.formatChainId(this.chainId), i);
    }
    get connected() {
        return this.signer.client ? this.signer.client.core.relayer.connected : !1;
    }
    get connecting() {
        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;
    }
    async enable() {
        return this.session || (await this.connect()), await this.request({ method: "eth_requestAccounts" });
    }
    async connect(t) {
        if (!this.signer.client) throw new Error("Provider not initialized. Call init() first");
        this.loadConnectOpts(t);
        const { required: s, optional: i } = L$3(this.rpc);
        try {
            const e = await new Promise(async (o, c) => {
                var a;
                this.rpc.showQrModal &&
                    ((a = this.modal) == null ||
                        a.subscribeModal((h) => {
                            !h.open && !this.signer.session && (this.signer.abortPairingAttempt(), c(new Error("Connection request reset. Please try again.")));
                        })),
                    await this.signer
                        .connect(
                            E$2(p$2({ namespaces: p$2({}, s && { [this.namespace]: s }) }, i && { optionalNamespaces: { [this.namespace]: i } }), {
                                pairingTopic: t?.pairingTopic,
                            })
                        )
                        .then((h) => {
                            o(h);
                        })
                        .catch((h) => {
                            c(new Error(h.message));
                        });
            });
            if (!e) return;
            const n = Jo$1(e.namespaces, [this.namespace]);
            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit("connect", { chainId: v$2(this.chainId) });
        } catch (e) {
            throw (this.signer.logger.error(e), e);
        } finally {
            this.modal && this.modal.closeModal();
        }
    }
    async authenticate(t, s) {
        if (!this.signer.client) throw new Error("Provider not initialized. Call init() first");
        this.loadConnectOpts({ chains: t?.chains });
        try {
            const i = await new Promise(async (n, o) => {
                    var c;
                    this.rpc.showQrModal &&
                        ((c = this.modal) == null ||
                            c.subscribeModal((a) => {
                                !a.open &&
                                    !this.signer.session &&
                                    (this.signer.abortPairingAttempt(), o(new Error("Connection request reset. Please try again.")));
                            })),
                        await this.signer
                            .authenticate(E$2(p$2({}, t), { chains: this.rpc.chains }), s)
                            .then((a) => {
                                n(a);
                            })
                            .catch((a) => {
                                o(new Error(a.message));
                            });
                }),
                e = i.session;
            if (e) {
                const n = Jo$1(e.namespaces, [this.namespace]);
                this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n),
                    this.setAccounts(n),
                    this.events.emit("connect", { chainId: v$2(this.chainId) });
            }
            return i;
        } catch (i) {
            throw (this.signer.logger.error(i), i);
        } finally {
            this.modal && this.modal.closeModal();
        }
    }
    async disconnect() {
        this.session && (await this.signer.disconnect()), this.reset();
    }
    get isWalletConnect() {
        return !0;
    }
    get session() {
        return this.signer.session;
    }
    registerEventListeners() {
        this.signer.on("session_event", (t) => {
            const { params: s } = t,
                { event: i } = s;
            i.name === "accountsChanged"
                ? ((this.accounts = this.parseAccounts(i.data)), this.events.emit("accountsChanged", this.accounts))
                : i.name === "chainChanged"
                ? this.setChainId(this.formatChainId(i.data))
                : this.events.emit(i.name, i.data),
                this.events.emit("session_event", t);
        }),
            this.signer.on("chainChanged", (t) => {
                const s = parseInt(t);
                (this.chainId = s), this.events.emit("chainChanged", v$2(this.chainId)), this.persist();
            }),
            this.signer.on("session_update", (t) => {
                this.events.emit("session_update", t);
            }),
            this.signer.on("session_delete", (t) => {
                this.reset(),
                    this.events.emit("session_delete", t),
                    this.events.emit("disconnect", E$2(p$2({}, er$2("USER_DISCONNECTED")), { data: t.topic, name: "USER_DISCONNECTED" }));
            }),
            this.signer.on("display_uri", (t) => {
                var s, i;
                this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({ uri: t })),
                    this.events.emit("display_uri", t);
            });
    }
    switchEthereumChain(t) {
        this.request({ method: "wallet_switchEthereumChain", params: [{ chainId: t.toString(16) }] });
    }
    isCompatibleChainId(t) {
        return typeof t == "string" ? t.startsWith(`${this.namespace}:`) : !1;
    }
    formatChainId(t) {
        return `${this.namespace}:${t}`;
    }
    parseChainId(t) {
        return Number(t.split(":")[1]);
    }
    setChainIds(t) {
        const s = t.filter((i) => this.isCompatibleChainId(i)).map((i) => this.parseChainId(i));
        s.length && ((this.chainId = s[0]), this.events.emit("chainChanged", v$2(this.chainId)), this.persist());
    }
    setChainId(t) {
        if (this.isCompatibleChainId(t)) {
            const s = this.parseChainId(t);
            (this.chainId = s), this.switchEthereumChain(s);
        }
    }
    parseAccountId(t) {
        const [s, i, e] = t.split(":");
        return { chainId: `${s}:${i}`, address: e };
    }
    setAccounts(t) {
        (this.accounts = t.filter((s) => this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s) => this.parseAccountId(s).address)),
            this.events.emit("accountsChanged", this.accounts);
    }
    getRpcConfig(t) {
        var s, i;
        const e = (s = t?.chains) != null ? s : [],
            n = (i = t?.optionalChains) != null ? i : [],
            o = e.concat(n);
        if (!o.length) throw new Error("No chains specified in either `chains` or `optionalChains`");
        const c = e.length ? t?.methods || u$2 : [],
            a = e.length ? t?.events || g$2 : [],
            h = t?.optionalMethods || [],
            d = t?.optionalEvents || [],
            w = t?.rpcMap || this.buildRpcMap(o, t.projectId),
            I = t?.qrModalOptions || void 0;
        return {
            chains: e?.map((l) => this.formatChainId(l)),
            optionalChains: n.map((l) => this.formatChainId(l)),
            methods: c,
            events: a,
            optionalMethods: h,
            optionalEvents: d,
            rpcMap: w,
            showQrModal: !!(t != null && t.showQrModal),
            qrModalOptions: I,
            projectId: t.projectId,
            metadata: t.metadata,
        };
    }
    buildRpcMap(t, s) {
        const i = {};
        return (
            t.forEach((e) => {
                i[e] = this.getRpcUrl(e, s);
            }),
            i
        );
    }
    async initialize(t) {
        if (
            ((this.rpc = this.getRpcConfig(t)),
            (this.chainId = this.rpc.chains.length ? m$2(this.rpc.chains) : m$2(this.rpc.optionalChains)),
            (this.signer = await Iv.init({
                projectId: this.rpc.projectId,
                metadata: this.rpc.metadata,
                disableProviderPing: t.disableProviderPing,
                relayUrl: t.relayUrl,
                storageOptions: t.storageOptions,
                customStoragePrefix: t.customStoragePrefix,
                telemetryEnabled: t.telemetryEnabled,
            })),
            this.registerEventListeners(),
            await this.loadPersistedSession(),
            this.rpc.showQrModal)
        ) {
            let s;
            try {
                const { WalletConnectModal: i } = await Promise.resolve().then(function () {
                    return index$1;
                });
                s = i;
            } catch {
                throw new Error("To use QR modal, please install @walletconnect/modal package");
            }
            if (s)
                try {
                    this.modal = new s(p$2({ projectId: this.rpc.projectId }, this.rpc.qrModalOptions));
                } catch (i) {
                    throw (this.signer.logger.error(i), new Error("Could not generate WalletConnectModal Instance"));
                }
        }
    }
    loadConnectOpts(t) {
        if (!t) return;
        const { chains: s, optionalChains: i, rpcMap: e } = t;
        s &&
            Ir$1(s) &&
            ((this.rpc.chains = s.map((n) => this.formatChainId(n))),
            s.forEach((n) => {
                this.rpc.rpcMap[n] = e?.[n] || this.getRpcUrl(n);
            })),
            i &&
                Ir$1(i) &&
                ((this.rpc.optionalChains = []),
                (this.rpc.optionalChains = i?.map((n) => this.formatChainId(n))),
                i.forEach((n) => {
                    this.rpc.rpcMap[n] = e?.[n] || this.getRpcUrl(n);
                }));
    }
    getRpcUrl(t, s) {
        var i;
        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || `${j$2}?chainId=eip155:${t}&projectId=${s || this.rpc.projectId}`;
    }
    async loadPersistedSession() {
        if (this.session)
            try {
                const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`),
                    s = this.session.namespaces[`${this.namespace}:${t}`]
                        ? this.session.namespaces[`${this.namespace}:${t}`]
                        : this.session.namespaces[this.namespace];
                this.setChainIds(t ? [this.formatChainId(t)] : s?.accounts), this.setAccounts(s?.accounts);
            } catch (t) {
                this.signer.logger.error("Failed to load persisted session, clearing state..."),
                    this.signer.logger.error(t),
                    await this.disconnect().catch((s) => this.signer.logger.warn(s));
            }
    }
    reset() {
        (this.chainId = 1), (this.accounts = []);
    }
    persist() {
        this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);
    }
    parseAccounts(t) {
        return typeof t == "string" || t instanceof String ? [this.parseAccount(t)] : t.map((s) => this.parseAccount(s));
    }
};
const x$1 = C$2;

const t$4 = Symbol();
const s$4 = Object.getPrototypeOf,
    c$4 = new WeakMap(),
    l$4 = (e) => e && (c$4.has(e) ? c$4.get(e) : s$4(e) === Object.prototype || s$4(e) === Array.prototype),
    y$2 = (e) => (l$4(e) && e[t$4]) || null,
    h$3 = (e, t = !0) => {
        c$4.set(e, t);
    };

const isObject = (x) => typeof x === "object" && x !== null;
const proxyStateMap = /* @__PURE__ */ new WeakMap();
const refSet = /* @__PURE__ */ new WeakSet();
const buildProxyFunction = (
    objectIs = Object.is,
    newProxy = (target, handler) => new Proxy(target, handler),
    canProxy = (x) =>
        isObject(x) &&
        !refSet.has(x) &&
        (Array.isArray(x) || !(Symbol.iterator in x)) &&
        !(x instanceof WeakMap) &&
        !(x instanceof WeakSet) &&
        !(x instanceof Error) &&
        !(x instanceof Number) &&
        !(x instanceof Date) &&
        !(x instanceof String) &&
        !(x instanceof RegExp) &&
        !(x instanceof ArrayBuffer),
    defaultHandlePromise = (promise) => {
        switch (promise.status) {
            case "fulfilled":
                return promise.value;
            case "rejected":
                throw promise.reason;
            default:
                throw promise;
        }
    },
    snapCache = /* @__PURE__ */ new WeakMap(),
    createSnapshot = (target, version, handlePromise = defaultHandlePromise) => {
        const cache = snapCache.get(target);
        if ((cache == null ? void 0 : cache[0]) === version) {
            return cache[1];
        }
        const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
        h$3(snap, true);
        snapCache.set(target, [version, snap]);
        Reflect.ownKeys(target).forEach((key) => {
            if (Object.getOwnPropertyDescriptor(snap, key)) {
                return;
            }
            const value = Reflect.get(target, key);
            const desc = {
                value,
                enumerable: true,
                // This is intentional to avoid copying with proxy-compare.
                // It's still non-writable, so it avoids assigning a value.
                configurable: true,
            };
            if (refSet.has(value)) {
                h$3(value, false);
            } else if (value instanceof Promise) {
                delete desc.value;
                desc.get = () => handlePromise(value);
            } else if (proxyStateMap.has(value)) {
                const [target2, ensureVersion] = proxyStateMap.get(value);
                desc.value = createSnapshot(target2, ensureVersion(), handlePromise);
            }
            Object.defineProperty(snap, key, desc);
        });
        return Object.preventExtensions(snap);
    },
    proxyCache = /* @__PURE__ */ new WeakMap(),
    versionHolder = [1, 1],
    proxyFunction = (initialObject) => {
        if (!isObject(initialObject)) {
            throw new Error("object required");
        }
        const found = proxyCache.get(initialObject);
        if (found) {
            return found;
        }
        let version = versionHolder[0];
        const listeners = /* @__PURE__ */ new Set();
        const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
            if (version !== nextVersion) {
                version = nextVersion;
                listeners.forEach((listener) => listener(op, nextVersion));
            }
        };
        let checkVersion = versionHolder[1];
        const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
            if (checkVersion !== nextCheckVersion && !listeners.size) {
                checkVersion = nextCheckVersion;
                propProxyStates.forEach(([propProxyState]) => {
                    const propVersion = propProxyState[1](nextCheckVersion);
                    if (propVersion > version) {
                        version = propVersion;
                    }
                });
            }
            return version;
        };
        const createPropListener = (prop) => (op, nextVersion) => {
            const newOp = [...op];
            newOp[1] = [prop, ...newOp[1]];
            notifyUpdate(newOp, nextVersion);
        };
        const propProxyStates = /* @__PURE__ */ new Map();
        const addPropListener = (prop, propProxyState) => {
            if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && propProxyStates.has(prop)) {
                throw new Error("prop listener already exists");
            }
            if (listeners.size) {
                const remove = propProxyState[3](createPropListener(prop));
                propProxyStates.set(prop, [propProxyState, remove]);
            } else {
                propProxyStates.set(prop, [propProxyState]);
            }
        };
        const removePropListener = (prop) => {
            var _a;
            const entry = propProxyStates.get(prop);
            if (entry) {
                propProxyStates.delete(prop);
                (_a = entry[1]) == null ? void 0 : _a.call(entry);
            }
        };
        const addListener = (listener) => {
            listeners.add(listener);
            if (listeners.size === 1) {
                propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
                    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && prevRemove) {
                        throw new Error("remove already exists");
                    }
                    const remove = propProxyState[3](createPropListener(prop));
                    propProxyStates.set(prop, [propProxyState, remove]);
                });
            }
            const removeListener = () => {
                listeners.delete(listener);
                if (listeners.size === 0) {
                    propProxyStates.forEach(([propProxyState, remove], prop) => {
                        if (remove) {
                            remove();
                            propProxyStates.set(prop, [propProxyState]);
                        }
                    });
                }
            };
            return removeListener;
        };
        const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
        const handler = {
            deleteProperty(target, prop) {
                const prevValue = Reflect.get(target, prop);
                removePropListener(prop);
                const deleted = Reflect.deleteProperty(target, prop);
                if (deleted) {
                    notifyUpdate(["delete", [prop], prevValue]);
                }
                return deleted;
            },
            set(target, prop, value, receiver) {
                const hasPrevValue = Reflect.has(target, prop);
                const prevValue = Reflect.get(target, prop, receiver);
                if (hasPrevValue && (objectIs(prevValue, value) || (proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value))))) {
                    return true;
                }
                removePropListener(prop);
                if (isObject(value)) {
                    value = y$2(value) || value;
                }
                let nextValue = value;
                if (value instanceof Promise) {
                    value
                        .then((v) => {
                            value.status = "fulfilled";
                            value.value = v;
                            notifyUpdate(["resolve", [prop], v]);
                        })
                        .catch((e) => {
                            value.status = "rejected";
                            value.reason = e;
                            notifyUpdate(["reject", [prop], e]);
                        });
                } else {
                    if (!proxyStateMap.has(value) && canProxy(value)) {
                        nextValue = proxyFunction(value);
                    }
                    const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
                    if (childProxyState) {
                        addPropListener(prop, childProxyState);
                    }
                }
                Reflect.set(target, prop, nextValue, receiver);
                notifyUpdate(["set", [prop], value, prevValue]);
                return true;
            },
        };
        const proxyObject = newProxy(baseObject, handler);
        proxyCache.set(initialObject, proxyObject);
        const proxyState = [baseObject, ensureVersion, createSnapshot, addListener];
        proxyStateMap.set(proxyObject, proxyState);
        Reflect.ownKeys(initialObject).forEach((key) => {
            const desc = Object.getOwnPropertyDescriptor(initialObject, key);
            if ("value" in desc) {
                proxyObject[key] = initialObject[key];
                delete desc.value;
                delete desc.writable;
            }
            Object.defineProperty(baseObject, key, desc);
        });
        return proxyObject;
    }
) => [
    // public functions
    proxyFunction,
    // shared state
    proxyStateMap,
    refSet,
    // internal things
    objectIs,
    newProxy,
    canProxy,
    defaultHandlePromise,
    snapCache,
    createSnapshot,
    proxyCache,
    versionHolder,
];
const [defaultProxyFunction] = buildProxyFunction();
function proxy(initialObject = {}) {
    return defaultProxyFunction(initialObject);
}
function subscribe(proxyObject, callback, notifyInSync) {
    const proxyState = proxyStateMap.get(proxyObject);
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
        console.warn("Please use proxy object");
    }
    let promise;
    const ops = [];
    const addListener = proxyState[3];
    let isListenerActive = false;
    const listener = (op) => {
        ops.push(op);
        if (!promise) {
            promise = Promise.resolve().then(() => {
                promise = void 0;
                if (isListenerActive) {
                    callback(ops.splice(0));
                }
            });
        }
    };
    const removeListener = addListener(listener);
    isListenerActive = true;
    return () => {
        isListenerActive = false;
        removeListener();
    };
}
function snapshot(proxyObject, handlePromise) {
    const proxyState = proxyStateMap.get(proxyObject);
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
        console.warn("Please use proxy object");
    }
    const [target, ensureVersion, createSnapshot] = proxyState;
    return createSnapshot(target, ensureVersion(), handlePromise);
}

const o$5 = proxy({ history: ["ConnectWallet"], view: "ConnectWallet", data: void 0 }),
    T$2 = {
        state: o$5,
        subscribe(e) {
            return subscribe(o$5, () => e(o$5));
        },
        push(e, t) {
            e !== o$5.view && ((o$5.view = e), t && (o$5.data = t), o$5.history.push(e));
        },
        reset(e) {
            (o$5.view = e), (o$5.history = [e]);
        },
        replace(e) {
            o$5.history.length > 1 && ((o$5.history[o$5.history.length - 1] = e), (o$5.view = e));
        },
        goBack() {
            if (o$5.history.length > 1) {
                o$5.history.pop();
                const [e] = o$5.history.slice(-1);
                o$5.view = e;
            }
        },
        setData(e) {
            o$5.data = e;
        },
    },
    a$2 = {
        WALLETCONNECT_DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE",
        WCM_VERSION: "WCM_VERSION",
        RECOMMENDED_WALLET_AMOUNT: 9,
        isMobile() {
            return typeof window < "u"
                ? Boolean(window.matchMedia("(pointer:coarse)").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent))
                : !1;
        },
        isAndroid() {
            return a$2.isMobile() && navigator.userAgent.toLowerCase().includes("android");
        },
        isIos() {
            const e = navigator.userAgent.toLowerCase();
            return a$2.isMobile() && (e.includes("iphone") || e.includes("ipad"));
        },
        isHttpUrl(e) {
            return e.startsWith("http://") || e.startsWith("https://");
        },
        isArray(e) {
            return Array.isArray(e) && e.length > 0;
        },
        formatNativeUrl(e, t, s) {
            if (a$2.isHttpUrl(e)) return this.formatUniversalUrl(e, t, s);
            let n = e;
            n.includes("://") || ((n = e.replaceAll("/", "").replaceAll(":", "")), (n = `${n}://`)),
                n.endsWith("/") || (n = `${n}/`),
                this.setWalletConnectDeepLink(n, s);
            const i = encodeURIComponent(t);
            return `${n}wc?uri=${i}`;
        },
        formatUniversalUrl(e, t, s) {
            if (!a$2.isHttpUrl(e)) return this.formatNativeUrl(e, t, s);
            let n = e;
            n.endsWith("/") || (n = `${n}/`), this.setWalletConnectDeepLink(n, s);
            const i = encodeURIComponent(t);
            return `${n}wc?uri=${i}`;
        },
        async wait(e) {
            return new Promise((t) => {
                setTimeout(t, e);
            });
        },
        openHref(e, t) {
            window.open(e, t, "noreferrer noopener");
        },
        setWalletConnectDeepLink(e, t) {
            try {
                localStorage.setItem(a$2.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: e, name: t }));
            } catch {
                console.info("Unable to set WalletConnect deep link");
            }
        },
        setWalletConnectAndroidDeepLink(e) {
            try {
                const [t] = e.split("?");
                localStorage.setItem(a$2.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: t, name: "Android" }));
            } catch {
                console.info("Unable to set WalletConnect android deep link");
            }
        },
        removeWalletConnectDeepLink() {
            try {
                localStorage.removeItem(a$2.WALLETCONNECT_DEEPLINK_CHOICE);
            } catch {
                console.info("Unable to remove WalletConnect deep link");
            }
        },
        setModalVersionInStorage() {
            try {
                typeof localStorage < "u" && localStorage.setItem(a$2.WCM_VERSION, "2.6.2");
            } catch {
                console.info("Unable to set Web3Modal version in storage");
            }
        },
        getWalletRouterData() {
            var e;
            const t = (e = T$2.state.data) == null ? void 0 : e.Wallet;
            if (!t) throw new Error('Missing "Wallet" view data');
            return t;
        },
    },
    _$2 = typeof location < "u" && (location.hostname.includes("localhost") || location.protocol.includes("https")),
    r$3 = proxy({ enabled: _$2, userSessionId: "", events: [], connectedWalletId: void 0 }),
    R$1 = {
        state: r$3,
        subscribe(e) {
            return subscribe(r$3.events, () => e(snapshot(r$3.events[r$3.events.length - 1])));
        },
        initialize() {
            r$3.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) < "u" && (r$3.userSessionId = crypto.randomUUID());
        },
        setConnectedWalletId(e) {
            r$3.connectedWalletId = e;
        },
        click(e) {
            if (r$3.enabled) {
                const t = { type: "CLICK", name: e.name, userSessionId: r$3.userSessionId, timestamp: Date.now(), data: e };
                r$3.events.push(t);
            }
        },
        track(e) {
            if (r$3.enabled) {
                const t = { type: "TRACK", name: e.name, userSessionId: r$3.userSessionId, timestamp: Date.now(), data: e };
                r$3.events.push(t);
            }
        },
        view(e) {
            if (r$3.enabled) {
                const t = { type: "VIEW", name: e.name, userSessionId: r$3.userSessionId, timestamp: Date.now(), data: e };
                r$3.events.push(t);
            }
        },
    },
    c$3 = proxy({ chains: void 0, walletConnectUri: void 0, isAuth: !1, isCustomDesktop: !1, isCustomMobile: !1, isDataLoaded: !1, isUiLoaded: !1 }),
    p$1 = {
        state: c$3,
        subscribe(e) {
            return subscribe(c$3, () => e(c$3));
        },
        setChains(e) {
            c$3.chains = e;
        },
        setWalletConnectUri(e) {
            c$3.walletConnectUri = e;
        },
        setIsCustomDesktop(e) {
            c$3.isCustomDesktop = e;
        },
        setIsCustomMobile(e) {
            c$3.isCustomMobile = e;
        },
        setIsDataLoaded(e) {
            c$3.isDataLoaded = e;
        },
        setIsUiLoaded(e) {
            c$3.isUiLoaded = e;
        },
        setIsAuth(e) {
            c$3.isAuth = e;
        },
    },
    W = proxy({
        projectId: "",
        mobileWallets: void 0,
        desktopWallets: void 0,
        walletImages: void 0,
        chains: void 0,
        enableAuthMode: !1,
        enableExplorer: !0,
        explorerExcludedWalletIds: void 0,
        explorerRecommendedWalletIds: void 0,
        termsOfServiceUrl: void 0,
        privacyPolicyUrl: void 0,
    }),
    y$1 = {
        state: W,
        subscribe(e) {
            return subscribe(W, () => e(W));
        },
        setConfig(e) {
            var t, s;
            R$1.initialize(),
                p$1.setChains(e.chains),
                p$1.setIsAuth(Boolean(e.enableAuthMode)),
                p$1.setIsCustomMobile(Boolean((t = e.mobileWallets) == null ? void 0 : t.length)),
                p$1.setIsCustomDesktop(Boolean((s = e.desktopWallets) == null ? void 0 : s.length)),
                a$2.setModalVersionInStorage(),
                Object.assign(W, e);
        },
    };
var V$1 = Object.defineProperty,
    D$2 = Object.getOwnPropertySymbols,
    H$1 = Object.prototype.hasOwnProperty,
    B$2 = Object.prototype.propertyIsEnumerable,
    M$1 = (e, t, s) => (t in e ? V$1(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : (e[t] = s)),
    K$1 = (e, t) => {
        for (var s in t || (t = {})) H$1.call(t, s) && M$1(e, s, t[s]);
        if (D$2) for (var s of D$2(t)) B$2.call(t, s) && M$1(e, s, t[s]);
        return e;
    };
const L$2 = "https://explorer-api.walletconnect.com",
    E$1 = "wcm",
    O = "js-2.6.2";
async function w$1(e, t) {
    const s = K$1({ sdkType: E$1, sdkVersion: O }, t),
        n = new URL(e, L$2);
    return (
        n.searchParams.append("projectId", y$1.state.projectId),
        Object.entries(s).forEach(([i, l]) => {
            l && n.searchParams.append(i, String(l));
        }),
        (await fetch(n)).json()
    );
}
const m$1 = {
    async getDesktopListings(e) {
        return w$1("/w3m/v1/getDesktopListings", e);
    },
    async getMobileListings(e) {
        return w$1("/w3m/v1/getMobileListings", e);
    },
    async getInjectedListings(e) {
        return w$1("/w3m/v1/getInjectedListings", e);
    },
    async getAllListings(e) {
        return w$1("/w3m/v1/getAllListings", e);
    },
    getWalletImageUrl(e) {
        return `${L$2}/w3m/v1/getWalletImage/${e}?projectId=${y$1.state.projectId}&sdkType=${E$1}&sdkVersion=${O}`;
    },
    getAssetImageUrl(e) {
        return `${L$2}/w3m/v1/getAssetImage/${e}?projectId=${y$1.state.projectId}&sdkType=${E$1}&sdkVersion=${O}`;
    },
};
var z$1 = Object.defineProperty,
    j$1 = Object.getOwnPropertySymbols,
    J = Object.prototype.hasOwnProperty,
    q$1 = Object.prototype.propertyIsEnumerable,
    k$1 = (e, t, s) => (t in e ? z$1(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : (e[t] = s)),
    F$1 = (e, t) => {
        for (var s in t || (t = {})) J.call(t, s) && k$1(e, s, t[s]);
        if (j$1) for (var s of j$1(t)) q$1.call(t, s) && k$1(e, s, t[s]);
        return e;
    };
const N$1 = a$2.isMobile(),
    d$3 = proxy({ wallets: { listings: [], total: 0, page: 1 }, search: { listings: [], total: 0, page: 1 }, recomendedWallets: [] }),
    te$1 = {
        state: d$3,
        async getRecomendedWallets() {
            const { explorerRecommendedWalletIds: e, explorerExcludedWalletIds: t } = y$1.state;
            if (e === "NONE" || (t === "ALL" && !e)) return d$3.recomendedWallets;
            if (a$2.isArray(e)) {
                const s = { recommendedIds: e.join(",") },
                    { listings: n } = await m$1.getAllListings(s),
                    i = Object.values(n);
                i.sort((l, v) => {
                    const b = e.indexOf(l.id),
                        f = e.indexOf(v.id);
                    return b - f;
                }),
                    (d$3.recomendedWallets = i);
            } else {
                const { chains: s, isAuth: n } = p$1.state,
                    i = s?.join(","),
                    l = a$2.isArray(t),
                    v = {
                        page: 1,
                        sdks: n ? "auth_v1" : void 0,
                        entries: a$2.RECOMMENDED_WALLET_AMOUNT,
                        chains: i,
                        version: 2,
                        excludedIds: l ? t.join(",") : void 0,
                    },
                    { listings: b } = N$1 ? await m$1.getMobileListings(v) : await m$1.getDesktopListings(v);
                d$3.recomendedWallets = Object.values(b);
            }
            return d$3.recomendedWallets;
        },
        async getWallets(e) {
            const t = F$1({}, e),
                { explorerRecommendedWalletIds: s, explorerExcludedWalletIds: n } = y$1.state,
                { recomendedWallets: i } = d$3;
            if (n === "ALL") return d$3.wallets;
            i.length ? (t.excludedIds = i.map((x) => x.id).join(",")) : a$2.isArray(s) && (t.excludedIds = s.join(",")),
                a$2.isArray(n) && (t.excludedIds = [t.excludedIds, n].filter(Boolean).join(",")),
                p$1.state.isAuth && (t.sdks = "auth_v1");
            const { page: l, search: v } = e,
                { listings: b, total: f } = N$1 ? await m$1.getMobileListings(t) : await m$1.getDesktopListings(t),
                A = Object.values(b),
                U = v ? "search" : "wallets";
            return (d$3[U] = { listings: [...d$3[U].listings, ...A], total: f, page: l ?? 1 }), { listings: A, total: f };
        },
        getWalletImageUrl(e) {
            return m$1.getWalletImageUrl(e);
        },
        getAssetImageUrl(e) {
            return m$1.getAssetImageUrl(e);
        },
        resetSearch() {
            d$3.search = { listings: [], total: 0, page: 1 };
        },
    },
    I$1 = proxy({ open: !1 }),
    se$1 = {
        state: I$1,
        subscribe(e) {
            return subscribe(I$1, () => e(I$1));
        },
        async open(e) {
            return new Promise((t) => {
                const { isUiLoaded: s, isDataLoaded: n } = p$1.state;
                if ((a$2.removeWalletConnectDeepLink(), p$1.setWalletConnectUri(e?.uri), p$1.setChains(e?.chains), T$2.reset("ConnectWallet"), s && n))
                    (I$1.open = !0), t();
                else {
                    const i = setInterval(() => {
                        const l = p$1.state;
                        l.isUiLoaded && l.isDataLoaded && (clearInterval(i), (I$1.open = !0), t());
                    }, 200);
                }
            });
        },
        close() {
            I$1.open = !1;
        },
    };
var G$1 = Object.defineProperty,
    $$1 = Object.getOwnPropertySymbols,
    Q$1 = Object.prototype.hasOwnProperty,
    X = Object.prototype.propertyIsEnumerable,
    S$3 = (e, t, s) => (t in e ? G$1(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : (e[t] = s)),
    Y$1 = (e, t) => {
        for (var s in t || (t = {})) Q$1.call(t, s) && S$3(e, s, t[s]);
        if ($$1) for (var s of $$1(t)) X.call(t, s) && S$3(e, s, t[s]);
        return e;
    };
function Z$2() {
    return typeof matchMedia < "u" && matchMedia("(prefers-color-scheme: dark)").matches;
}
const C$1 = proxy({ themeMode: Z$2() ? "dark" : "light" }),
    ne$1 = {
        state: C$1,
        subscribe(e) {
            return subscribe(C$1, () => e(C$1));
        },
        setThemeConfig(e) {
            const { themeMode: t, themeVariables: s } = e;
            t && (C$1.themeMode = t), s && (C$1.themeVariables = Y$1({}, s));
        },
    },
    g$1 = proxy({ open: !1, message: "", variant: "success" }),
    oe$1 = {
        state: g$1,
        subscribe(e) {
            return subscribe(g$1, () => e(g$1));
        },
        openToast(e, t) {
            (g$1.open = !0), (g$1.message = e), (g$1.variant = t);
        },
        closeToast() {
            g$1.open = !1;
        },
    };

let d$2 = class d {
    constructor(e) {
        (this.openModal = se$1.open),
            (this.closeModal = se$1.close),
            (this.subscribeModal = se$1.subscribe),
            (this.setTheme = ne$1.setThemeConfig),
            ne$1.setThemeConfig(e),
            y$1.setConfig(e),
            this.initUi();
    }
    async initUi() {
        if (typeof window < "u") {
            await Promise.resolve().then(function () {
                return index;
            });
            const e = document.createElement("wcm-modal");
            document.body.insertAdjacentElement("beforeend", e), p$1.setIsUiLoaded(!0);
        }
    }
};

var index$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    WalletConnectModal: d$2,
});

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$3 = window,
    e$5 =
        t$3.ShadowRoot &&
        (void 0 === t$3.ShadyCSS || t$3.ShadyCSS.nativeShadow) &&
        "adoptedStyleSheets" in Document.prototype &&
        "replace" in CSSStyleSheet.prototype,
    s$3 = Symbol(),
    n$5 = new WeakMap();
let o$4 = class o {
    constructor(t, e, n) {
        if (((this._$cssResult$ = !0), n !== s$3)) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        (this.cssText = t), (this.t = e);
    }
    get styleSheet() {
        let t = this.o;
        const s = this.t;
        if (e$5 && void 0 === t) {
            const e = void 0 !== s && 1 === s.length;
            e && (t = n$5.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), e && n$5.set(s, t));
        }
        return t;
    }
    toString() {
        return this.cssText;
    }
};
const r$2 = (t) => new o$4("string" == typeof t ? t : t + "", void 0, s$3),
    i$3 = (t, ...e) => {
        const n =
            1 === t.length
                ? t[0]
                : e.reduce(
                      (e, s, n) =>
                          e +
                          ((t) => {
                              if (!0 === t._$cssResult$) return t.cssText;
                              if ("number" == typeof t) return t;
                              throw Error(
                                  "Value passed to 'css' function must be a 'css' function result: " +
                                      t +
                                      ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security."
                              );
                          })(s) +
                          t[n + 1],
                      t[0]
                  );
        return new o$4(n, t, s$3);
    },
    S$2 = (s, n) => {
        e$5
            ? (s.adoptedStyleSheets = n.map((t) => (t instanceof CSSStyleSheet ? t : t.styleSheet)))
            : n.forEach((e) => {
                  const n = document.createElement("style"),
                      o = t$3.litNonce;
                  void 0 !== o && n.setAttribute("nonce", o), (n.textContent = e.cssText), s.appendChild(n);
              });
    },
    c$2 = e$5
        ? (t) => t
        : (t) =>
              t instanceof CSSStyleSheet
                  ? ((t) => {
                        let e = "";
                        for (const s of t.cssRules) e += s.cssText;
                        return r$2(e);
                    })(t)
                  : t;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var s$2;
const e$4 = window,
    r$1 = e$4.trustedTypes,
    h$2 = r$1 ? r$1.emptyScript : "",
    o$3 = e$4.reactiveElementPolyfillSupport,
    n$4 = {
        toAttribute(t, i) {
            switch (i) {
                case Boolean:
                    t = t ? h$2 : null;
                    break;
                case Object:
                case Array:
                    t = null == t ? t : JSON.stringify(t);
            }
            return t;
        },
        fromAttribute(t, i) {
            let s = t;
            switch (i) {
                case Boolean:
                    s = null !== t;
                    break;
                case Number:
                    s = null === t ? null : Number(t);
                    break;
                case Object:
                case Array:
                    try {
                        s = JSON.parse(t);
                    } catch (t) {
                        s = null;
                    }
            }
            return s;
        },
    },
    a$1 = (t, i) => i !== t && (i == i || t == t),
    l$3 = { attribute: !0, type: String, converter: n$4, reflect: !1, hasChanged: a$1 },
    d$1 = "finalized";
let u$1 = class u extends HTMLElement {
    constructor() {
        super(), (this._$Ei = new Map()), (this.isUpdatePending = !1), (this.hasUpdated = !1), (this._$El = null), this._$Eu();
    }
    static addInitializer(t) {
        var i;
        this.finalize(), (null !== (i = this.h) && void 0 !== i ? i : (this.h = [])).push(t);
    }
    static get observedAttributes() {
        this.finalize();
        const t = [];
        return (
            this.elementProperties.forEach((i, s) => {
                const e = this._$Ep(s, i);
                void 0 !== e && (this._$Ev.set(e, s), t.push(e));
            }),
            t
        );
    }
    static createProperty(t, i = l$3) {
        if ((i.state && (i.attribute = !1), this.finalize(), this.elementProperties.set(t, i), !i.noAccessor && !this.prototype.hasOwnProperty(t))) {
            const s = "symbol" == typeof t ? Symbol() : "__" + t,
                e = this.getPropertyDescriptor(t, s, i);
            void 0 !== e && Object.defineProperty(this.prototype, t, e);
        }
    }
    static getPropertyDescriptor(t, i, s) {
        return {
            get() {
                return this[i];
            },
            set(e) {
                const r = this[t];
                (this[i] = e), this.requestUpdate(t, r, s);
            },
            configurable: !0,
            enumerable: !0,
        };
    }
    static getPropertyOptions(t) {
        return this.elementProperties.get(t) || l$3;
    }
    static finalize() {
        if (this.hasOwnProperty(d$1)) return !1;
        this[d$1] = !0;
        const t = Object.getPrototypeOf(this);
        if (
            (t.finalize(),
            void 0 !== t.h && (this.h = [...t.h]),
            (this.elementProperties = new Map(t.elementProperties)),
            (this._$Ev = new Map()),
            this.hasOwnProperty("properties"))
        ) {
            const t = this.properties,
                i = [...Object.getOwnPropertyNames(t), ...Object.getOwnPropertySymbols(t)];
            for (const s of i) this.createProperty(s, t[s]);
        }
        return (this.elementStyles = this.finalizeStyles(this.styles)), !0;
    }
    static finalizeStyles(i) {
        const s = [];
        if (Array.isArray(i)) {
            const e = new Set(i.flat(1 / 0).reverse());
            for (const i of e) s.unshift(c$2(i));
        } else void 0 !== i && s.push(c$2(i));
        return s;
    }
    static _$Ep(t, i) {
        const s = i.attribute;
        return !1 === s ? void 0 : "string" == typeof s ? s : "string" == typeof t ? t.toLowerCase() : void 0;
    }
    _$Eu() {
        var t;
        (this._$E_ = new Promise((t) => (this.enableUpdating = t))),
            (this._$AL = new Map()),
            this._$Eg(),
            this.requestUpdate(),
            null === (t = this.constructor.h) || void 0 === t || t.forEach((t) => t(this));
    }
    addController(t) {
        var i, s;
        (null !== (i = this._$ES) && void 0 !== i ? i : (this._$ES = [])).push(t),
            void 0 !== this.renderRoot && this.isConnected && (null === (s = t.hostConnected) || void 0 === s || s.call(t));
    }
    removeController(t) {
        var i;
        null === (i = this._$ES) || void 0 === i || i.splice(this._$ES.indexOf(t) >>> 0, 1);
    }
    _$Eg() {
        this.constructor.elementProperties.forEach((t, i) => {
            this.hasOwnProperty(i) && (this._$Ei.set(i, this[i]), delete this[i]);
        });
    }
    createRenderRoot() {
        var t;
        const s = null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
        return S$2(s, this.constructor.elementStyles), s;
    }
    connectedCallback() {
        var t;
        void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()),
            this.enableUpdating(!0),
            null === (t = this._$ES) ||
                void 0 === t ||
                t.forEach((t) => {
                    var i;
                    return null === (i = t.hostConnected) || void 0 === i ? void 0 : i.call(t);
                });
    }
    enableUpdating(t) {}
    disconnectedCallback() {
        var t;
        null === (t = this._$ES) ||
            void 0 === t ||
            t.forEach((t) => {
                var i;
                return null === (i = t.hostDisconnected) || void 0 === i ? void 0 : i.call(t);
            });
    }
    attributeChangedCallback(t, i, s) {
        this._$AK(t, s);
    }
    _$EO(t, i, s = l$3) {
        var e;
        const r = this.constructor._$Ep(t, s);
        if (void 0 !== r && !0 === s.reflect) {
            const h = (void 0 !== (null === (e = s.converter) || void 0 === e ? void 0 : e.toAttribute) ? s.converter : n$4).toAttribute(i, s.type);
            (this._$El = t), null == h ? this.removeAttribute(r) : this.setAttribute(r, h), (this._$El = null);
        }
    }
    _$AK(t, i) {
        var s;
        const e = this.constructor,
            r = e._$Ev.get(t);
        if (void 0 !== r && this._$El !== r) {
            const t = e.getPropertyOptions(r),
                h =
                    "function" == typeof t.converter
                        ? { fromAttribute: t.converter }
                        : void 0 !== (null === (s = t.converter) || void 0 === s ? void 0 : s.fromAttribute)
                        ? t.converter
                        : n$4;
            (this._$El = r), (this[r] = h.fromAttribute(i, t.type)), (this._$El = null);
        }
    }
    requestUpdate(t, i, s) {
        let e = !0;
        void 0 !== t &&
            (((s = s || this.constructor.getPropertyOptions(t)).hasChanged || a$1)(this[t], i)
                ? (this._$AL.has(t) || this._$AL.set(t, i),
                  !0 === s.reflect && this._$El !== t && (void 0 === this._$EC && (this._$EC = new Map()), this._$EC.set(t, s)))
                : (e = !1)),
            !this.isUpdatePending && e && (this._$E_ = this._$Ej());
    }
    async _$Ej() {
        this.isUpdatePending = !0;
        try {
            await this._$E_;
        } catch (t) {
            Promise.reject(t);
        }
        const t = this.scheduleUpdate();
        return null != t && (await t), !this.isUpdatePending;
    }
    scheduleUpdate() {
        return this.performUpdate();
    }
    performUpdate() {
        var t;
        if (!this.isUpdatePending) return;
        this.hasUpdated, this._$Ei && (this._$Ei.forEach((t, i) => (this[i] = t)), (this._$Ei = void 0));
        let i = !1;
        const s = this._$AL;
        try {
            (i = this.shouldUpdate(s)),
                i
                    ? (this.willUpdate(s),
                      null === (t = this._$ES) ||
                          void 0 === t ||
                          t.forEach((t) => {
                              var i;
                              return null === (i = t.hostUpdate) || void 0 === i ? void 0 : i.call(t);
                          }),
                      this.update(s))
                    : this._$Ek();
        } catch (t) {
            throw ((i = !1), this._$Ek(), t);
        }
        i && this._$AE(s);
    }
    willUpdate(t) {}
    _$AE(t) {
        var i;
        null === (i = this._$ES) ||
            void 0 === i ||
            i.forEach((t) => {
                var i;
                return null === (i = t.hostUpdated) || void 0 === i ? void 0 : i.call(t);
            }),
            this.hasUpdated || ((this.hasUpdated = !0), this.firstUpdated(t)),
            this.updated(t);
    }
    _$Ek() {
        (this._$AL = new Map()), (this.isUpdatePending = !1);
    }
    get updateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._$E_;
    }
    shouldUpdate(t) {
        return !0;
    }
    update(t) {
        void 0 !== this._$EC && (this._$EC.forEach((t, i) => this._$EO(i, this[i], t)), (this._$EC = void 0)), this._$Ek();
    }
    updated(t) {}
    firstUpdated(t) {}
};
(u$1[d$1] = !0),
    (u$1.elementProperties = new Map()),
    (u$1.elementStyles = []),
    (u$1.shadowRootOptions = { mode: "open" }),
    null == o$3 || o$3({ ReactiveElement: u$1 }),
    (null !== (s$2 = e$4.reactiveElementVersions) && void 0 !== s$2 ? s$2 : (e$4.reactiveElementVersions = [])).push("1.6.3");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var t$2;
const i$2 = window,
    s$1 = i$2.trustedTypes,
    e$3 = s$1 ? s$1.createPolicy("lit-html", { createHTML: (t) => t }) : void 0,
    o$2 = "$lit$",
    n$3 = `lit$${(Math.random() + "").slice(9)}$`,
    l$2 = "?" + n$3,
    h$1 = `<${l$2}>`,
    r = document,
    u = () => r.createComment(""),
    d = (t) => null === t || ("object" != typeof t && "function" != typeof t),
    c$1 = Array.isArray,
    v$1 = (t) => c$1(t) || "function" == typeof (null == t ? void 0 : t[Symbol.iterator]),
    a = "[ \t\n\f\r]",
    f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,
    _$1 = /-->/g,
    m = />/g,
    p = RegExp(`>|${a}(?:([^\\s"'>=/]+)(${a}*=${a}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`, "g"),
    g = /'/g,
    $ = /"/g,
    y = /^(?:script|style|textarea|title)$/i,
    w =
        (t) =>
        (i, ...s) => ({ _$litType$: t, strings: i, values: s }),
    x = w(1),
    b = w(2),
    T$1 = Symbol.for("lit-noChange"),
    A$1 = Symbol.for("lit-nothing"),
    E = new WeakMap(),
    C = r.createTreeWalker(r, 129, null, !1);
function P(t, i) {
    if (!Array.isArray(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return void 0 !== e$3 ? e$3.createHTML(i) : i;
}
const V = (t, i) => {
    const s = t.length - 1,
        e = [];
    let l,
        r = 2 === i ? "<svg>" : "",
        u = f;
    for (let i = 0; i < s; i++) {
        const s = t[i];
        let d,
            c,
            v = -1,
            a = 0;
        for (; a < s.length && ((u.lastIndex = a), (c = u.exec(s)), null !== c); )
            (a = u.lastIndex),
                u === f
                    ? "!--" === c[1]
                        ? (u = _$1)
                        : void 0 !== c[1]
                        ? (u = m)
                        : void 0 !== c[2]
                        ? (y.test(c[2]) && (l = RegExp("</" + c[2], "g")), (u = p))
                        : void 0 !== c[3] && (u = p)
                    : u === p
                    ? ">" === c[0]
                        ? ((u = null != l ? l : f), (v = -1))
                        : void 0 === c[1]
                        ? (v = -2)
                        : ((v = u.lastIndex - c[2].length), (d = c[1]), (u = void 0 === c[3] ? p : '"' === c[3] ? $ : g))
                    : u === $ || u === g
                    ? (u = p)
                    : u === _$1 || u === m
                    ? (u = f)
                    : ((u = p), (l = void 0));
        const w = u === p && t[i + 1].startsWith("/>") ? " " : "";
        r += u === f ? s + h$1 : v >= 0 ? (e.push(d), s.slice(0, v) + o$2 + s.slice(v) + n$3 + w) : s + n$3 + (-2 === v ? (e.push(void 0), i) : w);
    }
    return [P(t, r + (t[s] || "<?>") + (2 === i ? "</svg>" : "")), e];
};
class N {
    constructor({ strings: t, _$litType$: i }, e) {
        let h;
        this.parts = [];
        let r = 0,
            d = 0;
        const c = t.length - 1,
            v = this.parts,
            [a, f] = V(t, i);
        if (((this.el = N.createElement(a, e)), (C.currentNode = this.el.content), 2 === i)) {
            const t = this.el.content,
                i = t.firstChild;
            i.remove(), t.append(...i.childNodes);
        }
        for (; null !== (h = C.nextNode()) && v.length < c; ) {
            if (1 === h.nodeType) {
                if (h.hasAttributes()) {
                    const t = [];
                    for (const i of h.getAttributeNames())
                        if (i.endsWith(o$2) || i.startsWith(n$3)) {
                            const s = f[d++];
                            if ((t.push(i), void 0 !== s)) {
                                const t = h.getAttribute(s.toLowerCase() + o$2).split(n$3),
                                    i = /([.?@])?(.*)/.exec(s);
                                v.push({ type: 1, index: r, name: i[2], strings: t, ctor: "." === i[1] ? H : "?" === i[1] ? L$1 : "@" === i[1] ? z : k });
                            } else v.push({ type: 6, index: r });
                        }
                    for (const i of t) h.removeAttribute(i);
                }
                if (y.test(h.tagName)) {
                    const t = h.textContent.split(n$3),
                        i = t.length - 1;
                    if (i > 0) {
                        h.textContent = s$1 ? s$1.emptyScript : "";
                        for (let s = 0; s < i; s++) h.append(t[s], u()), C.nextNode(), v.push({ type: 2, index: ++r });
                        h.append(t[i], u());
                    }
                }
            } else if (8 === h.nodeType)
                if (h.data === l$2) v.push({ type: 2, index: r });
                else {
                    let t = -1;
                    for (; -1 !== (t = h.data.indexOf(n$3, t + 1)); ) v.push({ type: 7, index: r }), (t += n$3.length - 1);
                }
            r++;
        }
    }
    static createElement(t, i) {
        const s = r.createElement("template");
        return (s.innerHTML = t), s;
    }
}
function S$1(t, i, s = t, e) {
    var o, n, l, h;
    if (i === T$1) return i;
    let r = void 0 !== e ? (null === (o = s._$Co) || void 0 === o ? void 0 : o[e]) : s._$Cl;
    const u = d(i) ? void 0 : i._$litDirective$;
    return (
        (null == r ? void 0 : r.constructor) !== u &&
            (null === (n = null == r ? void 0 : r._$AO) || void 0 === n || n.call(r, !1),
            void 0 === u ? (r = void 0) : ((r = new u(t)), r._$AT(t, s, e)),
            void 0 !== e ? ((null !== (l = (h = s)._$Co) && void 0 !== l ? l : (h._$Co = []))[e] = r) : (s._$Cl = r)),
        void 0 !== r && (i = S$1(t, r._$AS(t, i.values), r, e)),
        i
    );
}
class M {
    constructor(t, i) {
        (this._$AV = []), (this._$AN = void 0), (this._$AD = t), (this._$AM = i);
    }
    get parentNode() {
        return this._$AM.parentNode;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    u(t) {
        var i;
        const {
                el: { content: s },
                parts: e,
            } = this._$AD,
            o = (null !== (i = null == t ? void 0 : t.creationScope) && void 0 !== i ? i : r).importNode(s, !0);
        C.currentNode = o;
        let n = C.nextNode(),
            l = 0,
            h = 0,
            u = e[0];
        for (; void 0 !== u; ) {
            if (l === u.index) {
                let i;
                2 === u.type
                    ? (i = new R(n, n.nextSibling, this, t))
                    : 1 === u.type
                    ? (i = new u.ctor(n, u.name, u.strings, this, t))
                    : 6 === u.type && (i = new Z$1(n, this, t)),
                    this._$AV.push(i),
                    (u = e[++h]);
            }
            l !== (null == u ? void 0 : u.index) && ((n = C.nextNode()), l++);
        }
        return (C.currentNode = r), o;
    }
    v(t) {
        let i = 0;
        for (const s of this._$AV) void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), (i += s.strings.length - 2)) : s._$AI(t[i])), i++;
    }
}
class R {
    constructor(t, i, s, e) {
        var o;
        (this.type = 2),
            (this._$AH = A$1),
            (this._$AN = void 0),
            (this._$AA = t),
            (this._$AB = i),
            (this._$AM = s),
            (this.options = e),
            (this._$Cp = null === (o = null == e ? void 0 : e.isConnected) || void 0 === o || o);
    }
    get _$AU() {
        var t, i;
        return null !== (i = null === (t = this._$AM) || void 0 === t ? void 0 : t._$AU) && void 0 !== i ? i : this._$Cp;
    }
    get parentNode() {
        let t = this._$AA.parentNode;
        const i = this._$AM;
        return void 0 !== i && 11 === (null == t ? void 0 : t.nodeType) && (t = i.parentNode), t;
    }
    get startNode() {
        return this._$AA;
    }
    get endNode() {
        return this._$AB;
    }
    _$AI(t, i = this) {
        (t = S$1(this, t, i)),
            d(t)
                ? t === A$1 || null == t || "" === t
                    ? (this._$AH !== A$1 && this._$AR(), (this._$AH = A$1))
                    : t !== this._$AH && t !== T$1 && this._(t)
                : void 0 !== t._$litType$
                ? this.g(t)
                : void 0 !== t.nodeType
                ? this.$(t)
                : v$1(t)
                ? this.T(t)
                : this._(t);
    }
    k(t) {
        return this._$AA.parentNode.insertBefore(t, this._$AB);
    }
    $(t) {
        this._$AH !== t && (this._$AR(), (this._$AH = this.k(t)));
    }
    _(t) {
        this._$AH !== A$1 && d(this._$AH) ? (this._$AA.nextSibling.data = t) : this.$(r.createTextNode(t)), (this._$AH = t);
    }
    g(t) {
        var i;
        const { values: s, _$litType$: e } = t,
            o = "number" == typeof e ? this._$AC(t) : (void 0 === e.el && (e.el = N.createElement(P(e.h, e.h[0]), this.options)), e);
        if ((null === (i = this._$AH) || void 0 === i ? void 0 : i._$AD) === o) this._$AH.v(s);
        else {
            const t = new M(o, this),
                i = t.u(this.options);
            t.v(s), this.$(i), (this._$AH = t);
        }
    }
    _$AC(t) {
        let i = E.get(t.strings);
        return void 0 === i && E.set(t.strings, (i = new N(t))), i;
    }
    T(t) {
        c$1(this._$AH) || ((this._$AH = []), this._$AR());
        const i = this._$AH;
        let s,
            e = 0;
        for (const o of t) e === i.length ? i.push((s = new R(this.k(u()), this.k(u()), this, this.options))) : (s = i[e]), s._$AI(o), e++;
        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), (i.length = e));
    }
    _$AR(t = this._$AA.nextSibling, i) {
        var s;
        for (null === (s = this._$AP) || void 0 === s || s.call(this, !1, !0, i); t && t !== this._$AB; ) {
            const i = t.nextSibling;
            t.remove(), (t = i);
        }
    }
    setConnected(t) {
        var i;
        void 0 === this._$AM && ((this._$Cp = t), null === (i = this._$AP) || void 0 === i || i.call(this, t));
    }
}
class k {
    constructor(t, i, s, e, o) {
        (this.type = 1),
            (this._$AH = A$1),
            (this._$AN = void 0),
            (this.element = t),
            (this.name = i),
            (this._$AM = e),
            (this.options = o),
            s.length > 2 || "" !== s[0] || "" !== s[1] ? ((this._$AH = Array(s.length - 1).fill(new String())), (this.strings = s)) : (this._$AH = A$1);
    }
    get tagName() {
        return this.element.tagName;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t, i = this, s, e) {
        const o = this.strings;
        let n = !1;
        if (void 0 === o) (t = S$1(this, t, i, 0)), (n = !d(t) || (t !== this._$AH && t !== T$1)), n && (this._$AH = t);
        else {
            const e = t;
            let l, h;
            for (t = o[0], l = 0; l < o.length - 1; l++)
                (h = S$1(this, e[s + l], i, l)),
                    h === T$1 && (h = this._$AH[l]),
                    n || (n = !d(h) || h !== this._$AH[l]),
                    h === A$1 ? (t = A$1) : t !== A$1 && (t += (null != h ? h : "") + o[l + 1]),
                    (this._$AH[l] = h);
        }
        n && !e && this.j(t);
    }
    j(t) {
        t === A$1 ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t ? t : "");
    }
}
class H extends k {
    constructor() {
        super(...arguments), (this.type = 3);
    }
    j(t) {
        this.element[this.name] = t === A$1 ? void 0 : t;
    }
}
const I = s$1 ? s$1.emptyScript : "";
let L$1 = class L extends k {
    constructor() {
        super(...arguments), (this.type = 4);
    }
    j(t) {
        t && t !== A$1 ? this.element.setAttribute(this.name, I) : this.element.removeAttribute(this.name);
    }
};
class z extends k {
    constructor(t, i, s, e, o) {
        super(t, i, s, e, o), (this.type = 5);
    }
    _$AI(t, i = this) {
        var s;
        if ((t = null !== (s = S$1(this, t, i, 0)) && void 0 !== s ? s : A$1) === T$1) return;
        const e = this._$AH,
            o = (t === A$1 && e !== A$1) || t.capture !== e.capture || t.once !== e.once || t.passive !== e.passive,
            n = t !== A$1 && (e === A$1 || o);
        o && this.element.removeEventListener(this.name, this, e), n && this.element.addEventListener(this.name, this, t), (this._$AH = t);
    }
    handleEvent(t) {
        var i, s;
        "function" == typeof this._$AH
            ? this._$AH.call(null !== (s = null === (i = this.options) || void 0 === i ? void 0 : i.host) && void 0 !== s ? s : this.element, t)
            : this._$AH.handleEvent(t);
    }
}
let Z$1 = class Z {
    constructor(t, i, s) {
        (this.element = t), (this.type = 6), (this._$AN = void 0), (this._$AM = i), (this.options = s);
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t) {
        S$1(this, t);
    }
};
const B$1 = i$2.litHtmlPolyfillSupport;
null == B$1 || B$1(N, R), (null !== (t$2 = i$2.litHtmlVersions) && void 0 !== t$2 ? t$2 : (i$2.litHtmlVersions = [])).push("2.8.0");
const D$1 = (t, i, s) => {
    var e, o;
    const n = null !== (e = null == s ? void 0 : s.renderBefore) && void 0 !== e ? e : i;
    let l = n._$litPart$;
    if (void 0 === l) {
        const t = null !== (o = null == s ? void 0 : s.renderBefore) && void 0 !== o ? o : null;
        n._$litPart$ = l = new R(i.insertBefore(u(), t), t, void 0, null != s ? s : {});
    }
    return l._$AI(t), l;
};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var l$1, o$1;
class s extends u$1 {
    constructor() {
        super(...arguments), (this.renderOptions = { host: this }), (this._$Do = void 0);
    }
    createRenderRoot() {
        var t, e;
        const i = super.createRenderRoot();
        return (null !== (t = (e = this.renderOptions).renderBefore) && void 0 !== t) || (e.renderBefore = i.firstChild), i;
    }
    update(t) {
        const i = this.render();
        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), (this._$Do = D$1(i, this.renderRoot, this.renderOptions));
    }
    connectedCallback() {
        var t;
        super.connectedCallback(), null === (t = this._$Do) || void 0 === t || t.setConnected(!0);
    }
    disconnectedCallback() {
        var t;
        super.disconnectedCallback(), null === (t = this._$Do) || void 0 === t || t.setConnected(!1);
    }
    render() {
        return T$1;
    }
}
(s.finalized = !0), (s._$litElement$ = !0), null === (l$1 = globalThis.litElementHydrateSupport) || void 0 === l$1 || l$1.call(globalThis, { LitElement: s });
const n$2 = globalThis.litElementPolyfillSupport;
null == n$2 || n$2({ LitElement: s });
(null !== (o$1 = globalThis.litElementVersions) && void 0 !== o$1 ? o$1 : (globalThis.litElementVersions = [])).push("3.3.3");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const e$2 = (e) => (n) =>
    "function" == typeof n
        ? ((e, n) => (customElements.define(e, n), n))(e, n)
        : ((e, n) => {
              const { kind: t, elements: s } = n;
              return {
                  kind: t,
                  elements: s,
                  finisher(n) {
                      customElements.define(e, n);
                  },
              };
          })(e, n);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const i$1 = (i, e) =>
        "method" === e.kind && e.descriptor && !("value" in e.descriptor)
            ? {
                  ...e,
                  finisher(n) {
                      n.createProperty(e.key, i);
                  },
              }
            : {
                  kind: "field",
                  key: Symbol(),
                  placement: "own",
                  descriptor: {},
                  originalKey: e.key,
                  initializer() {
                      "function" == typeof e.initializer && (this[e.key] = e.initializer.call(this));
                  },
                  finisher(n) {
                      n.createProperty(e.key, i);
                  },
              },
    e$1 = (i, e, n) => {
        e.constructor.createProperty(n, i);
    };
function n$1(n) {
    return (t, o) => (void 0 !== o ? e$1(n, t, o) : i$1(n, t));
}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function t$1(t) {
    return n$1({ ...t, state: !0 });
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var n;
null != (null === (n = window.HTMLSlotElement) || void 0 === n ? void 0 : n.prototype.assignedElements)
    ? (o, n) => o.assignedElements(n)
    : (o, n) => o.assignedNodes(n).filter((o) => o.nodeType === Node.ELEMENT_NODE);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 },
    e =
        (t) =>
        (...e) => ({ _$litDirective$: t, values: e });
class i {
    constructor(t) {}
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AT(t, e, i) {
        (this._$Ct = t), (this._$AM = e), (this._$Ci = i);
    }
    _$AS(t, e) {
        return this.update(t, e);
    }
    update(t, e) {
        return this.render(...e);
    }
}

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const o = e(
    class extends i {
        constructor(t$1) {
            var i;
            if ((super(t$1), t$1.type !== t.ATTRIBUTE || "class" !== t$1.name || (null === (i = t$1.strings) || void 0 === i ? void 0 : i.length) > 2))
                throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
        }
        render(t) {
            return (
                " " +
                Object.keys(t)
                    .filter((i) => t[i])
                    .join(" ") +
                " "
            );
        }
        update(i, [s]) {
            var r, o;
            if (void 0 === this.it) {
                (this.it = new Set()),
                    void 0 !== i.strings &&
                        (this.nt = new Set(
                            i.strings
                                .join(" ")
                                .split(/\s/)
                                .filter((t) => "" !== t)
                        ));
                for (const t in s) s[t] && !(null === (r = this.nt) || void 0 === r ? void 0 : r.has(t)) && this.it.add(t);
                return this.render(s);
            }
            const e = i.element.classList;
            this.it.forEach((t) => {
                t in s || (e.remove(t), this.it.delete(t));
            });
            for (const t in s) {
                const i = !!s[t];
                i === this.it.has(t) ||
                    (null === (o = this.nt) || void 0 === o ? void 0 : o.has(t)) ||
                    (i ? (e.add(t), this.it.add(t)) : (e.remove(t), this.it.delete(t)));
            }
            return T$1;
        }
    }
);

function addUniqueItem(array, item) {
    array.indexOf(item) === -1 && array.push(item);
}

const clamp = (min, max, v) => Math.min(Math.max(v, min), max);

const defaults = {
    duration: 0.3,
    delay: 0,
    endDelay: 0,
    repeat: 0,
    easing: "ease",
};

const isNumber = (value) => typeof value === "number";

const isEasingList = (easing) => Array.isArray(easing) && !isNumber(easing[0]);

const wrap = (min, max, v) => {
    const rangeSize = max - min;
    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;
};

function getEasingForSegment(easing, i) {
    return isEasingList(easing) ? easing[wrap(0, easing.length, i)] : easing;
}

const mix = (min, max, progress) => -progress * min + progress * max + min;

const noop = () => {};
const noopReturn = (v) => v;

const progress = (min, max, value) => (max - min === 0 ? 1 : (value - min) / (max - min));

function fillOffset(offset, remaining) {
    const min = offset[offset.length - 1];
    for (let i = 1; i <= remaining; i++) {
        const offsetProgress = progress(0, remaining, i);
        offset.push(mix(min, 1, offsetProgress));
    }
}
function defaultOffset(length) {
    const offset = [0];
    fillOffset(offset, length - 1);
    return offset;
}

function interpolate(output, input = defaultOffset(output.length), easing = noopReturn) {
    const length = output.length;
    /**
     * If the input length is lower than the output we
     * fill the input to match. This currently assumes the input
     * is an animation progress value so is a good candidate for
     * moving outside the function.
     */
    const remainder = length - input.length;
    remainder > 0 && fillOffset(input, remainder);
    return (t) => {
        let i = 0;
        for (; i < length - 2; i++) {
            if (t < input[i + 1]) break;
        }
        let progressInRange = clamp(0, 1, progress(input[i], input[i + 1], t));
        const segmentEasing = getEasingForSegment(easing, i);
        progressInRange = segmentEasing(progressInRange);
        return mix(output[i], output[i + 1], progressInRange);
    };
}

const isCubicBezier = (easing) => Array.isArray(easing) && isNumber(easing[0]);

const isEasingGenerator = (easing) => typeof easing === "object" && Boolean(easing.createAnimation);

const isFunction = (value) => typeof value === "function";

const isString = (value) => typeof value === "string";

const time = {
    ms: (seconds) => seconds * 1000,
    s: (milliseconds) => milliseconds / 1000,
};

/*
  Bezier function generator

  This has been modified from Gaëtan Renaudeau's BezierEasing
  https://github.com/gre/bezier-easing/blob/master/src/index.js
  https://github.com/gre/bezier-easing/blob/master/LICENSE
  
  I've removed the newtonRaphsonIterate algo because in benchmarking it
  wasn't noticiably faster than binarySubdivision, indeed removing it
  usually improved times, depending on the curve.

  I also removed the lookup table, as for the added bundle size and loop we're
  only cutting ~4 or so subdivision iterations. I bumped the max iterations up
  to 12 to compensate and this still tended to be faster for no perceivable
  loss in accuracy.

  Usage
    const easeOut = cubicBezier(.17,.67,.83,.67);
    const x = easeOut(0.5); // returns 0.627...
*/
// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
const calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;
const subdivisionPrecision = 0.0000001;
const subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
    let currentX;
    let currentT;
    let i = 0;
    do {
        currentT = lowerBound + (upperBound - lowerBound) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - x;
        if (currentX > 0.0) {
            upperBound = currentT;
        } else {
            lowerBound = currentT;
        }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
    return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
    // If this is a linear gradient, return linear easing
    if (mX1 === mY1 && mX2 === mY2) return noopReturn;
    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
    // If animation is at start/end, return t without easing
    return (t) => (t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2));
}

const steps =
    (steps, direction = "end") =>
    (progress) => {
        progress = direction === "end" ? Math.min(progress, 0.999) : Math.max(progress, 0.001);
        const expanded = progress * steps;
        const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
        return clamp(0, 1, rounded / steps);
    };

const namedEasings = {
    ease: cubicBezier(0.25, 0.1, 0.25, 1.0),
    "ease-in": cubicBezier(0.42, 0.0, 1.0, 1.0),
    "ease-in-out": cubicBezier(0.42, 0.0, 0.58, 1.0),
    "ease-out": cubicBezier(0.0, 0.0, 0.58, 1.0),
};
const functionArgsRegex = /\((.*?)\)/;
function getEasingFunction(definition) {
    // If already an easing function, return
    if (isFunction(definition)) return definition;
    // If an easing curve definition, return bezier function
    if (isCubicBezier(definition)) return cubicBezier(...definition);
    // If we have a predefined easing function, return
    const namedEasing = namedEasings[definition];
    if (namedEasing) return namedEasing;
    // If this is a steps function, attempt to create easing curve
    if (definition.startsWith("steps")) {
        const args = functionArgsRegex.exec(definition);
        if (args) {
            const argsArray = args[1].split(",");
            return steps(parseFloat(argsArray[0]), argsArray[1].trim());
        }
    }
    return noopReturn;
}

class Animation {
    constructor(
        output,
        keyframes = [0, 1],
        {
            easing,
            duration: initialDuration = defaults.duration,
            delay = defaults.delay,
            endDelay = defaults.endDelay,
            repeat = defaults.repeat,
            offset,
            direction = "normal",
            autoplay = true,
        } = {}
    ) {
        this.startTime = null;
        this.rate = 1;
        this.t = 0;
        this.cancelTimestamp = null;
        this.easing = noopReturn;
        this.duration = 0;
        this.totalDuration = 0;
        this.repeat = 0;
        this.playState = "idle";
        this.finished = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
        easing = easing || defaults.easing;
        if (isEasingGenerator(easing)) {
            const custom = easing.createAnimation(keyframes);
            easing = custom.easing;
            keyframes = custom.keyframes || keyframes;
            initialDuration = custom.duration || initialDuration;
        }
        this.repeat = repeat;
        this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);
        this.updateDuration(initialDuration);
        const interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);
        this.tick = (timestamp) => {
            var _a;
            // TODO: Temporary fix for OptionsResolver typing
            delay = delay;
            let t = 0;
            if (this.pauseTime !== undefined) {
                t = this.pauseTime;
            } else {
                t = (timestamp - this.startTime) * this.rate;
            }
            this.t = t;
            // Convert to seconds
            t /= 1000;
            // Rebase on delay
            t = Math.max(t - delay, 0);
            /**
             * If this animation has finished, set the current time
             * to the total duration.
             */
            if (this.playState === "finished" && this.pauseTime === undefined) {
                t = this.totalDuration;
            }
            /**
             * Get the current progress (0-1) of the animation. If t is >
             * than duration we'll get values like 2.5 (midway through the
             * third iteration)
             */
            const progress = t / this.duration;
            // TODO progress += iterationStart
            /**
             * Get the current iteration (0 indexed). For instance the floor of
             * 2.5 is 2.
             */
            let currentIteration = Math.floor(progress);
            /**
             * Get the current progress of the iteration by taking the remainder
             * so 2.5 is 0.5 through iteration 2
             */
            let iterationProgress = progress % 1.0;
            if (!iterationProgress && progress >= 1) {
                iterationProgress = 1;
            }
            /**
             * If iteration progress is 1 we count that as the end
             * of the previous iteration.
             */
            iterationProgress === 1 && currentIteration--;
            /**
             * Reverse progress if we're not running in "normal" direction
             */
            const iterationIsOdd = currentIteration % 2;
            if (direction === "reverse" || (direction === "alternate" && iterationIsOdd) || (direction === "alternate-reverse" && !iterationIsOdd)) {
                iterationProgress = 1 - iterationProgress;
            }
            const p = t >= this.totalDuration ? 1 : Math.min(iterationProgress, 1);
            const latest = interpolate$1(this.easing(p));
            output(latest);
            const isAnimationFinished = this.pauseTime === undefined && (this.playState === "finished" || t >= this.totalDuration + endDelay);
            if (isAnimationFinished) {
                this.playState = "finished";
                (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, latest);
            } else if (this.playState !== "idle") {
                this.frameRequestId = requestAnimationFrame(this.tick);
            }
        };
        if (autoplay) this.play();
    }
    play() {
        const now = performance.now();
        this.playState = "running";
        if (this.pauseTime !== undefined) {
            this.startTime = now - this.pauseTime;
        } else if (!this.startTime) {
            this.startTime = now;
        }
        this.cancelTimestamp = this.startTime;
        this.pauseTime = undefined;
        this.frameRequestId = requestAnimationFrame(this.tick);
    }
    pause() {
        this.playState = "paused";
        this.pauseTime = this.t;
    }
    finish() {
        this.playState = "finished";
        this.tick(0);
    }
    stop() {
        var _a;
        this.playState = "idle";
        if (this.frameRequestId !== undefined) {
            cancelAnimationFrame(this.frameRequestId);
        }
        (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);
    }
    cancel() {
        this.stop();
        this.tick(this.cancelTimestamp);
    }
    reverse() {
        this.rate *= -1;
    }
    commitStyles() {}
    updateDuration(duration) {
        this.duration = duration;
        this.totalDuration = duration * (this.repeat + 1);
    }
    get currentTime() {
        return this.t;
    }
    set currentTime(t) {
        if (this.pauseTime !== undefined || this.rate === 0) {
            this.pauseTime = t;
        } else {
            this.startTime = performance.now() - t / this.rate;
        }
    }
    get playbackRate() {
        return this.rate;
    }
    set playbackRate(rate) {
        this.rate = rate;
    }
}

var invariant = function () {};
if (process.env.NODE_ENV !== "production") {
    invariant = function (check, message) {
        if (!check) {
            throw new Error(message);
        }
    };
}

/**
 * The MotionValue tracks the state of a single animatable
 * value. Currently, updatedAt and current are unused. The
 * long term idea is to use this to minimise the number
 * of DOM reads, and to abstract the DOM interactions here.
 */
class MotionValue {
    setAnimation(animation) {
        this.animation = animation;
        animation === null || animation === void 0 ? void 0 : animation.finished.then(() => this.clearAnimation()).catch(() => {});
    }
    clearAnimation() {
        this.animation = this.generator = undefined;
    }
}

const data = new WeakMap();
function getAnimationData(element) {
    if (!data.has(element)) {
        data.set(element, {
            transforms: [],
            values: new Map(),
        });
    }
    return data.get(element);
}
function getMotionValue(motionValues, name) {
    if (!motionValues.has(name)) {
        motionValues.set(name, new MotionValue());
    }
    return motionValues.get(name);
}

/**
 * A list of all transformable axes. We'll use this list to generated a version
 * of each axes for each transform.
 */
const axes = ["", "X", "Y", "Z"];
/**
 * An ordered array of each transformable value. By default, transform values
 * will be sorted to this order.
 */
const order = ["translate", "scale", "rotate", "skew"];
const transformAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
};
const rotation = {
    syntax: "<angle>",
    initialValue: "0deg",
    toDefaultUnit: (v) => v + "deg",
};
const baseTransformProperties = {
    translate: {
        syntax: "<length-percentage>",
        initialValue: "0px",
        toDefaultUnit: (v) => v + "px",
    },
    rotate: rotation,
    scale: {
        syntax: "<number>",
        initialValue: 1,
        toDefaultUnit: noopReturn,
    },
    skew: rotation,
};
const transformDefinitions = new Map();
const asTransformCssVar = (name) => `--motion-${name}`;
/**
 * Generate a list of every possible transform key
 */
const transforms = ["x", "y", "z"];
order.forEach((name) => {
    axes.forEach((axis) => {
        transforms.push(name + axis);
        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);
    });
});
/**
 * A function to use with Array.sort to sort transform keys by their default order.
 */
const compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);
/**
 * Provide a quick way to check if a string is the name of a transform
 */
const transformLookup = new Set(transforms);
const isTransform = (name) => transformLookup.has(name);
const addTransformToElement = (element, name) => {
    // Map x to translateX etc
    if (transformAlias[name]) name = transformAlias[name];
    const { transforms } = getAnimationData(element);
    addUniqueItem(transforms, name);
    /**
     * TODO: An optimisation here could be to cache the transform in element data
     * and only update if this has changed.
     */
    element.style.transform = buildTransformTemplate(transforms);
};
const buildTransformTemplate = (transforms) => transforms.sort(compareTransformOrder).reduce(transformListToString, "").trim();
const transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;

const isCssVar = (name) => name.startsWith("--");
const registeredProperties = new Set();
function registerCssVariable(name) {
    if (registeredProperties.has(name)) return;
    registeredProperties.add(name);
    try {
        const { syntax, initialValue } = transformDefinitions.has(name) ? transformDefinitions.get(name) : {};
        CSS.registerProperty({
            name,
            inherits: false,
            syntax,
            initialValue,
        });
    } catch (e) {}
}

const testAnimation = (keyframes, options) => document.createElement("div").animate(keyframes, options);
const featureTests = {
    cssRegisterProperty: () => typeof CSS !== "undefined" && Object.hasOwnProperty.call(CSS, "registerProperty"),
    waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate"),
    partialKeyframes: () => {
        try {
            testAnimation({ opacity: [1] });
        } catch (e) {
            return false;
        }
        return true;
    },
    finished: () => Boolean(testAnimation({ opacity: [0, 1] }, { duration: 0.001 }).finished),
    linearEasing: () => {
        try {
            testAnimation({ opacity: 0 }, { easing: "linear(0, 1)" });
        } catch (e) {
            return false;
        }
        return true;
    },
};
const results = {};
const supports = {};
for (const key in featureTests) {
    supports[key] = () => {
        if (results[key] === undefined) results[key] = featureTests[key]();
        return results[key];
    };
}

// Create a linear easing point for every x second
const resolution = 0.015;
const generateLinearEasingPoints = (easing, duration) => {
    let points = "";
    const numPoints = Math.round(duration / resolution);
    for (let i = 0; i < numPoints; i++) {
        points += easing(progress(0, numPoints - 1, i)) + ", ";
    }
    return points.substring(0, points.length - 2);
};
const convertEasing = (easing, duration) => {
    if (isFunction(easing)) {
        return supports.linearEasing() ? `linear(${generateLinearEasingPoints(easing, duration)})` : defaults.easing;
    } else {
        return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;
    }
};
const cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;

function hydrateKeyframes(keyframes, readInitialValue) {
    for (let i = 0; i < keyframes.length; i++) {
        if (keyframes[i] === null) {
            keyframes[i] = i ? keyframes[i - 1] : readInitialValue();
        }
    }
    return keyframes;
}
const keyframesList = (keyframes) => (Array.isArray(keyframes) ? keyframes : [keyframes]);

function getStyleName(key) {
    if (transformAlias[key]) key = transformAlias[key];
    return isTransform(key) ? asTransformCssVar(key) : key;
}

const style = {
    get: (element, name) => {
        name = getStyleName(name);
        let value = isCssVar(name) ? element.style.getPropertyValue(name) : getComputedStyle(element)[name];
        // TODO Decide if value can be 0
        if (!value && value !== 0) {
            const definition = transformDefinitions.get(name);
            if (definition) value = definition.initialValue;
        }
        return value;
    },
    set: (element, name, value) => {
        name = getStyleName(name);
        if (isCssVar(name)) {
            element.style.setProperty(name, value);
        } else {
            element.style[name] = value;
        }
    },
};

function stopAnimation(animation, needsCommit = true) {
    if (!animation || animation.playState === "finished") return;
    // Suppress error thrown by WAAPI
    try {
        if (animation.stop) {
            animation.stop();
        } else {
            needsCommit && animation.commitStyles();
            animation.cancel();
        }
    } catch (e) {}
}

function getUnitConverter(keyframes, definition) {
    var _a;
    let toUnit = (definition === null || definition === void 0 ? void 0 : definition.toDefaultUnit) || noopReturn;
    const finalKeyframe = keyframes[keyframes.length - 1];
    if (isString(finalKeyframe)) {
        const unit = ((_a = finalKeyframe.match(/(-?[\d.]+)([a-z%]*)/)) === null || _a === void 0 ? void 0 : _a[2]) || "";
        if (unit) toUnit = (value) => value + unit;
    }
    return toUnit;
}

function getDevToolsRecord() {
    return window.__MOTION_DEV_TOOLS_RECORD;
}
function animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {
    const record = getDevToolsRecord();
    const isRecording = options.record !== false && record;
    let animation;
    let {
        duration = defaults.duration,
        delay = defaults.delay,
        endDelay = defaults.endDelay,
        repeat = defaults.repeat,
        easing = defaults.easing,
        persist = false,
        direction,
        offset,
        allowWebkitAcceleration = false,
        autoplay = true,
    } = options;
    const data = getAnimationData(element);
    const valueIsTransform = isTransform(key);
    let canAnimateNatively = supports.waapi();
    /**
     * If this is an individual transform, we need to map its
     * key to a CSS variable and update the element's transform style
     */
    valueIsTransform && addTransformToElement(element, key);
    const name = getStyleName(key);
    const motionValue = getMotionValue(data.values, name);
    /**
     * Get definition of value, this will be used to convert numerical
     * keyframes into the default value type.
     */
    const definition = transformDefinitions.get(name);
    /**
     * Stop the current animation, if any. Because this will trigger
     * commitStyles (DOM writes) and we might later trigger DOM reads,
     * this is fired now and we return a factory function to create
     * the actual animation that can get called in batch,
     */
    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);
    /**
     * Batchable factory function containing all DOM reads.
     */
    return () => {
        const readInitialValue = () => {
            var _a, _b;
            return (_b =
                (_a = style.get(element, name)) !== null && _a !== void 0
                    ? _a
                    : definition === null || definition === void 0
                    ? void 0
                    : definition.initialValue) !== null && _b !== void 0
                ? _b
                : 0;
        };
        /**
         * Replace null values with the previous keyframe value, or read
         * it from the DOM if it's the first keyframe.
         */
        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);
        /**
         * Detect unit type of keyframes.
         */
        const toUnit = getUnitConverter(keyframes, definition);
        if (isEasingGenerator(easing)) {
            const custom = easing.createAnimation(keyframes, key !== "opacity", readInitialValue, name, motionValue);
            easing = custom.easing;
            keyframes = custom.keyframes || keyframes;
            duration = custom.duration || duration;
        }
        /**
         * If this is a CSS variable we need to register it with the browser
         * before it can be animated natively. We also set it with setProperty
         * rather than directly onto the element.style object.
         */
        if (isCssVar(name)) {
            if (supports.cssRegisterProperty()) {
                registerCssVariable(name);
            } else {
                canAnimateNatively = false;
            }
        }
        /**
         * If we've been passed a custom easing function, and this browser
         * does **not** support linear() easing, and the value is a transform
         * (and thus a pure number) we can still support the custom easing
         * by falling back to the animation polyfill.
         */
        if (valueIsTransform && !supports.linearEasing() && (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {
            canAnimateNatively = false;
        }
        /**
         * If we can animate this value with WAAPI, do so.
         */
        if (canAnimateNatively) {
            /**
             * Convert numbers to default value types. Currently this only supports
             * transforms but it could also support other value types.
             */
            if (definition) {
                keyframes = keyframes.map((value) => (isNumber(value) ? definition.toDefaultUnit(value) : value));
            }
            /**
             * If this browser doesn't support partial/implicit keyframes we need to
             * explicitly provide one.
             */
            if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {
                keyframes.unshift(readInitialValue());
            }
            const animationOptions = {
                delay: time.ms(delay),
                duration: time.ms(duration),
                endDelay: time.ms(endDelay),
                easing: !isEasingList(easing) ? convertEasing(easing, duration) : undefined,
                direction,
                iterations: repeat + 1,
                fill: "both",
            };
            animation = element.animate(
                {
                    [name]: keyframes,
                    offset,
                    easing: isEasingList(easing) ? easing.map((thisEasing) => convertEasing(thisEasing, duration)) : undefined,
                },
                animationOptions
            );
            /**
             * Polyfill finished Promise in browsers that don't support it
             */
            if (!animation.finished) {
                animation.finished = new Promise((resolve, reject) => {
                    animation.onfinish = resolve;
                    animation.oncancel = reject;
                });
            }
            const target = keyframes[keyframes.length - 1];
            animation.finished
                .then(() => {
                    if (persist) return;
                    // Apply styles to target
                    style.set(element, name, target);
                    // Ensure fill modes don't persist
                    animation.cancel();
                })
                .catch(noop);
            /**
             * This forces Webkit to run animations on the main thread by exploiting
             * this condition:
             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099
             *
             * This fixes Webkit's timing bugs, like accelerated animations falling
             * out of sync with main thread animations and massive delays in starting
             * accelerated animations in WKWebView.
             */
            if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;
            /**
             * If we can't animate the value natively then we can fallback to the numbers-only
             * polyfill for transforms.
             */
        } else if (AnimationPolyfill && valueIsTransform) {
            /**
             * If any keyframe is a string (because we measured it from the DOM), we need to convert
             * it into a number before passing to the Animation polyfill.
             */
            keyframes = keyframes.map((value) => (typeof value === "string" ? parseFloat(value) : value));
            /**
             * If we only have a single keyframe, we need to create an initial keyframe by reading
             * the current value from the DOM.
             */
            if (keyframes.length === 1) {
                keyframes.unshift(parseFloat(readInitialValue()));
            }
            animation = new AnimationPolyfill(
                (latest) => {
                    style.set(element, name, toUnit ? toUnit(latest) : latest);
                },
                keyframes,
                Object.assign(Object.assign({}, options), { duration, easing })
            );
        } else {
            const target = keyframes[keyframes.length - 1];
            style.set(element, name, definition && isNumber(target) ? definition.toDefaultUnit(target) : target);
        }
        if (isRecording) {
            record(
                element,
                key,
                keyframes,
                {
                    duration,
                    delay: delay,
                    easing,
                    repeat,
                    offset,
                },
                "motion-one"
            );
        }
        motionValue.setAnimation(animation);
        if (animation && !autoplay) animation.pause();
        return animation;
    };
}

const getOptions = (options, key) =>
    /**
     * TODO: Make test for this
     * Always return a new object otherwise delay is overwritten by results of stagger
     * and this results in no stagger
     */
    options[key] ? Object.assign(Object.assign({}, options), options[key]) : Object.assign({}, options);

function resolveElements(elements, selectorCache) {
    if (typeof elements === "string") {
        {
            elements = document.querySelectorAll(elements);
        }
    } else if (elements instanceof Element) {
        elements = [elements];
    }
    /**
     * Return an empty array
     */
    return Array.from(elements || []);
}

const createAnimation = (factory) => factory();
const withControls = (animationFactory, options, duration = defaults.duration) => {
    return new Proxy(
        {
            animations: animationFactory.map(createAnimation).filter(Boolean),
            duration,
            options,
        },
        controls
    );
};
/**
 * TODO:
 * Currently this returns the first animation, ideally it would return
 * the first active animation.
 */
const getActiveAnimation = (state) => state.animations[0];
const controls = {
    get: (target, key) => {
        const activeAnimation = getActiveAnimation(target);
        switch (key) {
            case "duration":
                return target.duration;
            case "currentTime":
                return time.s((activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) || 0);
            case "playbackRate":
            case "playState":
                return activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key];
            case "finished":
                if (!target.finished) {
                    target.finished = Promise.all(target.animations.map(selectFinished)).catch(noop);
                }
                return target.finished;
            case "stop":
                return () => {
                    target.animations.forEach((animation) => stopAnimation(animation));
                };
            case "forEachNative":
                /**
                 * This is for internal use only, fire a callback for each
                 * underlying animation.
                 */
                return (callback) => {
                    target.animations.forEach((animation) => callback(animation, target));
                };
            default:
                return typeof (activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) === "undefined"
                    ? undefined
                    : () => target.animations.forEach((animation) => animation[key]());
        }
    },
    set: (target, key, value) => {
        switch (key) {
            case "currentTime":
                value = time.ms(value);
            // Fall-through
            case "playbackRate":
                for (let i = 0; i < target.animations.length; i++) {
                    target.animations[i][key] = value;
                }
                return true;
        }
        return false;
    },
};
const selectFinished = (animation) => animation.finished;

function resolveOption(option, i, total) {
    return isFunction(option) ? option(i, total) : option;
}

function createAnimate(AnimatePolyfill) {
    return function animate(elements, keyframes, options = {}) {
        elements = resolveElements(elements);
        const numElements = elements.length;
        invariant(Boolean(numElements), "No valid element provided.");
        invariant(Boolean(keyframes), "No keyframes defined.");
        /**
         * Create and start new animations
         */
        const animationFactories = [];
        for (let i = 0; i < numElements; i++) {
            const element = elements[i];
            for (const key in keyframes) {
                const valueOptions = getOptions(options, key);
                valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);
                const animation = animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);
                animationFactories.push(animation);
            }
        }
        return withControls(
            animationFactories,
            options,
            /**
             * TODO:
             * If easing is set to spring or glide, duration will be dynamically
             * generated. Ideally we would dynamically generate this from
             * animation.effect.getComputedTiming().duration but this isn't
             * supported in iOS13 or our number polyfill. Perhaps it's possible
             * to Proxy animations returned from animateStyle that has duration
             * as a getter.
             */
            options.duration
        );
    };
}

const animate$1 = createAnimate(Animation);

function animateProgress(target, options = {}) {
    return withControls(
        [
            () => {
                const animation = new Animation(target, [0, 1], options);
                animation.finished.catch(() => {});
                return animation;
            },
        ],
        options,
        options.duration
    );
}
function animate(target, keyframesOrOptions, options) {
    const factory = isFunction(target) ? animateProgress : animate$1;
    return factory(target, keyframesOrOptions, options);
}

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const l = (l) => (null != l ? l : A$1);

var browser = {};

// can-promise has a crash in some versions of react native that dont have
// standard global objects
// https://github.com/soldair/node-qrcode/issues/157

var canPromise$1 = function () {
    return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
};

var qrcode = {};

var utils$1 = {};

let toSJISFunction;
const CODEWORDS_COUNT = [
    0, // Not used
    26,
    44,
    70,
    100,
    134,
    172,
    196,
    242,
    292,
    346,
    404,
    466,
    532,
    581,
    655,
    733,
    815,
    901,
    991,
    1085,
    1156,
    1258,
    1364,
    1474,
    1588,
    1706,
    1828,
    1921,
    2051,
    2185,
    2323,
    2465,
    2611,
    2761,
    2876,
    3034,
    3196,
    3362,
    3532,
    3706,
];

/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */
utils$1.getSymbolSize = function getSymbolSize(version) {
    if (!version) throw new Error('"version" cannot be null or undefined');
    if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40');
    return version * 4 + 17;
};

/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */
utils$1.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
    return CODEWORDS_COUNT[version];
};

/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */
utils$1.getBCHDigit = function (data) {
    let digit = 0;

    while (data !== 0) {
        digit++;
        data >>>= 1;
    }

    return digit;
};

utils$1.setToSJISFunction = function setToSJISFunction(f) {
    if (typeof f !== "function") {
        throw new Error('"toSJISFunc" is not a valid function.');
    }

    toSJISFunction = f;
};

utils$1.isKanjiModeEnabled = function () {
    return typeof toSJISFunction !== "undefined";
};

utils$1.toSJIS = function toSJIS(kanji) {
    return toSJISFunction(kanji);
};

var errorCorrectionLevel = {};

(function (exports) {
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };

    function fromString(string) {
        if (typeof string !== "string") {
            throw new Error("Param is not a string");
        }

        const lcStr = string.toLowerCase();

        switch (lcStr) {
            case "l":
            case "low":
                return exports.L;

            case "m":
            case "medium":
                return exports.M;

            case "q":
            case "quartile":
                return exports.Q;

            case "h":
            case "high":
                return exports.H;

            default:
                throw new Error("Unknown EC Level: " + string);
        }
    }

    exports.isValid = function isValid(level) {
        return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
    };

    exports.from = function from(value, defaultValue) {
        if (exports.isValid(value)) {
            return value;
        }

        try {
            return fromString(value);
        } catch (e) {
            return defaultValue;
        }
    };
})(errorCorrectionLevel);

function BitBuffer$1() {
    this.buffer = [];
    this.length = 0;
}

BitBuffer$1.prototype = {
    get: function (index) {
        const bufIndex = Math.floor(index / 8);
        return ((this.buffer[bufIndex] >>> (7 - (index % 8))) & 1) === 1;
    },

    put: function (num, length) {
        for (let i = 0; i < length; i++) {
            this.putBit(((num >>> (length - i - 1)) & 1) === 1);
        }
    },

    getLengthInBits: function () {
        return this.length;
    },

    putBit: function (bit) {
        const bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
            this.buffer.push(0);
        }

        if (bit) {
            this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
        }

        this.length++;
    },
};

var bitBuffer = BitBuffer$1;

/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */

function BitMatrix$1(size) {
    if (!size || size < 1) {
        throw new Error("BitMatrix size must be defined and greater than 0");
    }

    this.size = size;
    this.data = new Uint8Array(size * size);
    this.reservedBit = new Uint8Array(size * size);
}

/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */
BitMatrix$1.prototype.set = function (row, col, value, reserved) {
    const index = row * this.size + col;
    this.data[index] = value;
    if (reserved) this.reservedBit[index] = true;
};

/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */
BitMatrix$1.prototype.get = function (row, col) {
    return this.data[row * this.size + col];
};

/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */
BitMatrix$1.prototype.xor = function (row, col, value) {
    this.data[row * this.size + col] ^= value;
};

/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */
BitMatrix$1.prototype.isReserved = function (row, col) {
    return this.reservedBit[row * this.size + col];
};

var bitMatrix = BitMatrix$1;

var alignmentPattern = {};

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

(function (exports) {
    const getSymbolSize = utils$1.getSymbolSize;

    /**
     * Calculate the row/column coordinates of the center module of each alignment pattern
     * for the specified QR Code version.
     *
     * The alignment patterns are positioned symmetrically on either side of the diagonal
     * running from the top left corner of the symbol to the bottom right corner.
     *
     * Since positions are simmetrical only half of the coordinates are returned.
     * Each item of the array will represent in turn the x and y coordinate.
     * @see {@link getPositions}
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinate
     */
    exports.getRowColCoords = function getRowColCoords(version) {
        if (version === 1) return [];

        const posCount = Math.floor(version / 7) + 2;
        const size = getSymbolSize(version);
        const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
        const positions = [size - 7]; // Last coord is always (size - 7)

        for (let i = 1; i < posCount - 1; i++) {
            positions[i] = positions[i - 1] - intervals;
        }

        positions.push(6); // First coord is always 6

        return positions.reverse();
    };

    /**
     * Returns an array containing the positions of each alignment pattern.
     * Each array's element represent the center point of the pattern as (x, y) coordinates
     *
     * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
     * and filtering out the items that overlaps with finder pattern
     *
     * @example
     * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
     * The alignment patterns, therefore, are to be centered on (row, column)
     * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
     * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
     * and are not therefore used for alignment patterns.
     *
     * let pos = getPositions(7)
     * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    exports.getPositions = function getPositions(version) {
        const coords = [];
        const pos = exports.getRowColCoords(version);
        const posLength = pos.length;

        for (let i = 0; i < posLength; i++) {
            for (let j = 0; j < posLength; j++) {
                // Skip if position is occupied by finder patterns
                if (
                    (i === 0 && j === 0) || // top-left
                    (i === 0 && j === posLength - 1) || // bottom-left
                    (i === posLength - 1 && j === 0)
                ) {
                    // top-right
                    continue;
                }

                coords.push([pos[i], pos[j]]);
            }
        }

        return coords;
    };
})(alignmentPattern);

var finderPattern = {};

const getSymbolSize = utils$1.getSymbolSize;
const FINDER_PATTERN_SIZE = 7;

/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */
finderPattern.getPositions = function getPositions(version) {
    const size = getSymbolSize(version);

    return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE],
    ];
};

var maskPattern = {};

/**
 * Data mask pattern reference
 * @type {Object}
 */

(
    (function (exports) {
        exports.Patterns = {
            PATTERN000: 0,
            PATTERN001: 1,
            PATTERN010: 2,
            PATTERN011: 3,
            PATTERN100: 4,
            PATTERN101: 5,
            PATTERN110: 6,
            PATTERN111: 7,
        };

        /**
         * Weighted penalty scores for the undesirable features
         * @type {Object}
         */
        const PenaltyScores = {
            N1: 3,
            N2: 3,
            N3: 40,
            N4: 10,
        };

        /**
         * Check if mask pattern value is valid
         *
         * @param  {Number}  mask    Mask pattern
         * @return {Boolean}         true if valid, false otherwise
         */
        exports.isValid = function isValid(mask) {
            return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
        };

        /**
         * Returns mask pattern from a value.
         * If value is not valid, returns undefined
         *
         * @param  {Number|String} value        Mask pattern value
         * @return {Number}                     Valid mask pattern or undefined
         */
        exports.from = function from(value) {
            return exports.isValid(value) ? parseInt(value, 10) : undefined;
        };

        /**
         * Find adjacent modules in row/column with the same color
         * and assign a penalty value.
         *
         * Points: N1 + i
         * i is the amount by which the number of adjacent modules of the same color exceeds 5
         */
        exports.getPenaltyN1 = function getPenaltyN1(data) {
            const size = data.size;
            let points = 0;
            let sameCountCol = 0;
            let sameCountRow = 0;
            let lastCol = null;
            let lastRow = null;

            for (let row = 0; row < size; row++) {
                sameCountCol = sameCountRow = 0;
                lastCol = lastRow = null;

                for (let col = 0; col < size; col++) {
                    let module = data.get(row, col);
                    if (module === lastCol) {
                        sameCountCol++;
                    } else {
                        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
                        lastCol = module;
                        sameCountCol = 1;
                    }

                    module = data.get(col, row);
                    if (module === lastRow) {
                        sameCountRow++;
                    } else {
                        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
                        lastRow = module;
                        sameCountRow = 1;
                    }
                }

                if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
                if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
            }

            return points;
        };

        /**
         * Find 2x2 blocks with the same color and assign a penalty value
         *
         * Points: N2 * (m - 1) * (n - 1)
         */
        exports.getPenaltyN2 = function getPenaltyN2(data) {
            const size = data.size;
            let points = 0;

            for (let row = 0; row < size - 1; row++) {
                for (let col = 0; col < size - 1; col++) {
                    const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);

                    if (last === 4 || last === 0) points++;
                }
            }

            return points * PenaltyScores.N2;
        };

        /**
         * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
         * preceded or followed by light area 4 modules wide
         *
         * Points: N3 * number of pattern found
         */
        exports.getPenaltyN3 = function getPenaltyN3(data) {
            const size = data.size;
            let points = 0;
            let bitsCol = 0;
            let bitsRow = 0;

            for (let row = 0; row < size; row++) {
                bitsCol = bitsRow = 0;
                for (let col = 0; col < size; col++) {
                    bitsCol = ((bitsCol << 1) & 0x7ff) | data.get(row, col);
                    if (col >= 10 && (bitsCol === 0x5d0 || bitsCol === 0x05d)) points++;

                    bitsRow = ((bitsRow << 1) & 0x7ff) | data.get(col, row);
                    if (col >= 10 && (bitsRow === 0x5d0 || bitsRow === 0x05d)) points++;
                }
            }

            return points * PenaltyScores.N3;
        };

        /**
         * Calculate proportion of dark modules in entire symbol
         *
         * Points: N4 * k
         *
         * k is the rating of the deviation of the proportion of dark modules
         * in the symbol from 50% in steps of 5%
         */
        exports.getPenaltyN4 = function getPenaltyN4(data) {
            let darkCount = 0;
            const modulesCount = data.data.length;

            for (let i = 0; i < modulesCount; i++) darkCount += data.data[i];

            const k = Math.abs(Math.ceil((darkCount * 100) / modulesCount / 5) - 10);

            return k * PenaltyScores.N4;
        };

        /**
         * Return mask value at given position
         *
         * @param  {Number} maskPattern Pattern reference value
         * @param  {Number} i           Row
         * @param  {Number} j           Column
         * @return {Boolean}            Mask value
         */
        function getMaskAt(maskPattern, i, j) {
            switch (maskPattern) {
                case exports.Patterns.PATTERN000:
                    return (i + j) % 2 === 0;
                case exports.Patterns.PATTERN001:
                    return i % 2 === 0;
                case exports.Patterns.PATTERN010:
                    return j % 3 === 0;
                case exports.Patterns.PATTERN011:
                    return (i + j) % 3 === 0;
                case exports.Patterns.PATTERN100:
                    return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
                case exports.Patterns.PATTERN101:
                    return ((i * j) % 2) + ((i * j) % 3) === 0;
                case exports.Patterns.PATTERN110:
                    return (((i * j) % 2) + ((i * j) % 3)) % 2 === 0;
                case exports.Patterns.PATTERN111:
                    return (((i * j) % 3) + ((i + j) % 2)) % 2 === 0;

                default:
                    throw new Error("bad maskPattern:" + maskPattern);
            }
        }

        /**
         * Apply a mask pattern to a BitMatrix
         *
         * @param  {Number}    pattern Pattern reference number
         * @param  {BitMatrix} data    BitMatrix data
         */
        exports.applyMask = function applyMask(pattern, data) {
            const size = data.size;

            for (let col = 0; col < size; col++) {
                for (let row = 0; row < size; row++) {
                    if (data.isReserved(row, col)) continue;
                    data.xor(row, col, getMaskAt(pattern, row, col));
                }
            }
        };

        /**
         * Returns the best mask pattern for data
         *
         * @param  {BitMatrix} data
         * @return {Number} Mask pattern reference number
         */
        exports.getBestMask = function getBestMask(data, setupFormatFunc) {
            const numPatterns = Object.keys(exports.Patterns).length;
            let bestPattern = 0;
            let lowerPenalty = Infinity;

            for (let p = 0; p < numPatterns; p++) {
                setupFormatFunc(p);
                exports.applyMask(p, data);

                // Calculate penalty
                const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);

                // Undo previously applied mask
                exports.applyMask(p, data);

                if (penalty < lowerPenalty) {
                    lowerPenalty = penalty;
                    bestPattern = p;
                }
            }

            return bestPattern;
        };
    })(maskPattern)
);

var errorCorrectionCode = {};

const ECLevel$1 = errorCorrectionLevel;

const EC_BLOCKS_TABLE = [
    // L  M  Q  H
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12,
    16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10,
    20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57,
    19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81,
];

const EC_CODEWORDS_TABLE = [
    // L  M  Q  H
    7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72,
    130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532,
    180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870,
    1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350,
    1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316,
    1950, 2310, 750, 1372, 2040, 2430,
];

/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */
errorCorrectionCode.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
        case ECLevel$1.L:
            return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];
        case ECLevel$1.M:
            return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];
        case ECLevel$1.Q:
            return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];
        case ECLevel$1.H:
            return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];
        default:
            return undefined;
    }
};

/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */
errorCorrectionCode.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
        case ECLevel$1.L:
            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];
        case ECLevel$1.M:
            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];
        case ECLevel$1.Q:
            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];
        case ECLevel$1.H:
            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];
        default:
            return undefined;
    }
};

var polynomial = {};

var galoisField = {};

const EXP_TABLE = new Uint8Array(512);
const LOG_TABLE = new Uint8Array(256);
/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */
(function initTables() {
    let x = 1;
    for (let i = 0; i < 255; i++) {
        EXP_TABLE[i] = x;
        LOG_TABLE[x] = i;

        x <<= 1; // multiply by 2

        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
        // This means that when a number is 256 or larger, it should be XORed with 0x11D.
        if (x & 0x100) {
            // similar to x >= 256, but a lot faster (because 0x100 == 256)
            x ^= 0x11d;
        }
    }

    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
    // stay inside the bounds (because we will mainly use this table for the multiplication of
    // two GF numbers, no more).
    // @see {@link mul}
    for (let i = 255; i < 512; i++) {
        EXP_TABLE[i] = EXP_TABLE[i - 255];
    }
})();

/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */
galoisField.log = function log(n) {
    if (n < 1) throw new Error("log(" + n + ")");
    return LOG_TABLE[n];
};

/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */
galoisField.exp = function exp(n) {
    return EXP_TABLE[n];
};

/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */
galoisField.mul = function mul(x, y) {
    if (x === 0 || y === 0) return 0;

    // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
    // @see {@link initTables}
    return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
};

(function (exports) {
    const GF = galoisField;

    /**
     * Multiplies two polynomials inside Galois Field
     *
     * @param  {Uint8Array} p1 Polynomial
     * @param  {Uint8Array} p2 Polynomial
     * @return {Uint8Array}    Product of p1 and p2
     */
    exports.mul = function mul(p1, p2) {
        const coeff = new Uint8Array(p1.length + p2.length - 1);

        for (let i = 0; i < p1.length; i++) {
            for (let j = 0; j < p2.length; j++) {
                coeff[i + j] ^= GF.mul(p1[i], p2[j]);
            }
        }

        return coeff;
    };

    /**
     * Calculate the remainder of polynomials division
     *
     * @param  {Uint8Array} divident Polynomial
     * @param  {Uint8Array} divisor  Polynomial
     * @return {Uint8Array}          Remainder
     */
    exports.mod = function mod(divident, divisor) {
        let result = new Uint8Array(divident);

        while (result.length - divisor.length >= 0) {
            const coeff = result[0];

            for (let i = 0; i < divisor.length; i++) {
                result[i] ^= GF.mul(divisor[i], coeff);
            }

            // remove all zeros from buffer head
            let offset = 0;
            while (offset < result.length && result[offset] === 0) offset++;
            result = result.slice(offset);
        }

        return result;
    };

    /**
     * Generate an irreducible generator polynomial of specified degree
     * (used by Reed-Solomon encoder)
     *
     * @param  {Number} degree Degree of the generator polynomial
     * @return {Uint8Array}    Buffer containing polynomial coefficients
     */
    exports.generateECPolynomial = function generateECPolynomial(degree) {
        let poly = new Uint8Array([1]);
        for (let i = 0; i < degree; i++) {
            poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));
        }

        return poly;
    };
})(polynomial);

const Polynomial = polynomial;

function ReedSolomonEncoder$1(degree) {
    this.genPoly = undefined;
    this.degree = degree;

    if (this.degree) this.initialize(this.degree);
}

/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */
ReedSolomonEncoder$1.prototype.initialize = function initialize(degree) {
    // create an irreducible generator polynomial
    this.degree = degree;
    this.genPoly = Polynomial.generateECPolynomial(this.degree);
};

/**
 * Encodes a chunk of data
 *
 * @param  {Uint8Array} data Buffer containing input data
 * @return {Uint8Array}      Buffer containing encoded data
 */
ReedSolomonEncoder$1.prototype.encode = function encode(data) {
    if (!this.genPoly) {
        throw new Error("Encoder not initialized");
    }

    // Calculate EC for this data block
    // extends data size to data+genPoly size
    const paddedData = new Uint8Array(data.length + this.degree);
    paddedData.set(data);

    // The error correction codewords are the remainder after dividing the data codewords
    // by a generator polynomial
    const remainder = Polynomial.mod(paddedData, this.genPoly);

    // return EC data blocks (last n byte, where n is the degree of genPoly)
    // If coefficients number in remainder are less than genPoly degree,
    // pad with 0s to the left to reach the needed number of coefficients
    const start = this.degree - remainder.length;
    if (start > 0) {
        const buff = new Uint8Array(this.degree);
        buff.set(remainder, start);

        return buff;
    }

    return remainder;
};

var reedSolomonEncoder = ReedSolomonEncoder$1;

var version = {};

var mode = {};

var versionCheck = {};

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */

versionCheck.isValid = function isValid(version) {
    return !isNaN(version) && version >= 1 && version <= 40;
};

var regex = {};

const numeric = "[0-9]+";
const alphanumeric = "[A-Z $%*+\\-./:]+";
let kanji =
    "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|" +
    "[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|" +
    "[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|" +
    "[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
kanji = kanji.replace(/u/g, "\\u");

const byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";

regex.KANJI = new RegExp(kanji, "g");
regex.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
regex.BYTE = new RegExp(byte, "g");
regex.NUMERIC = new RegExp(numeric, "g");
regex.ALPHANUMERIC = new RegExp(alphanumeric, "g");

const TEST_KANJI = new RegExp("^" + kanji + "$");
const TEST_NUMERIC = new RegExp("^" + numeric + "$");
const TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");

regex.testKanji = function testKanji(str) {
    return TEST_KANJI.test(str);
};

regex.testNumeric = function testNumeric(str) {
    return TEST_NUMERIC.test(str);
};

regex.testAlphanumeric = function testAlphanumeric(str) {
    return TEST_ALPHANUMERIC.test(str);
};

(function (exports) {
    const VersionCheck = versionCheck;
    const Regex = regex;

    /**
     * Numeric mode encodes data from the decimal digit set (0 - 9)
     * (byte values 30HEX to 39HEX).
     * Normally, 3 data characters are represented by 10 bits.
     *
     * @type {Object}
     */
    exports.NUMERIC = {
        id: "Numeric",
        bit: 1 << 0,
        ccBits: [10, 12, 14],
    };

    /**
     * Alphanumeric mode encodes data from a set of 45 characters,
     * i.e. 10 numeric digits (0 - 9),
     *      26 alphabetic characters (A - Z),
     *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
     * Normally, two input characters are represented by 11 bits.
     *
     * @type {Object}
     */
    exports.ALPHANUMERIC = {
        id: "Alphanumeric",
        bit: 1 << 1,
        ccBits: [9, 11, 13],
    };

    /**
     * In byte mode, data is encoded at 8 bits per character.
     *
     * @type {Object}
     */
    exports.BYTE = {
        id: "Byte",
        bit: 1 << 2,
        ccBits: [8, 16, 16],
    };

    /**
     * The Kanji mode efficiently encodes Kanji characters in accordance with
     * the Shift JIS system based on JIS X 0208.
     * The Shift JIS values are shifted from the JIS X 0208 values.
     * JIS X 0208 gives details of the shift coded representation.
     * Each two-byte character value is compacted to a 13-bit binary codeword.
     *
     * @type {Object}
     */
    exports.KANJI = {
        id: "Kanji",
        bit: 1 << 3,
        ccBits: [8, 10, 12],
    };

    /**
     * Mixed mode will contain a sequences of data in a combination of any of
     * the modes described above
     *
     * @type {Object}
     */
    exports.MIXED = {
        bit: -1,
    };

    /**
     * Returns the number of bits needed to store the data length
     * according to QR Code specifications.
     *
     * @param  {Mode}   mode    Data mode
     * @param  {Number} version QR Code version
     * @return {Number}         Number of bits
     */
    exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
        if (!mode.ccBits) throw new Error("Invalid mode: " + mode);

        if (!VersionCheck.isValid(version)) {
            throw new Error("Invalid version: " + version);
        }

        if (version >= 1 && version < 10) return mode.ccBits[0];
        else if (version < 27) return mode.ccBits[1];
        return mode.ccBits[2];
    };

    /**
     * Returns the most efficient mode to store the specified data
     *
     * @param  {String} dataStr Input data string
     * @return {Mode}           Best mode
     */
    exports.getBestModeForData = function getBestModeForData(dataStr) {
        if (Regex.testNumeric(dataStr)) return exports.NUMERIC;
        else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;
        else if (Regex.testKanji(dataStr)) return exports.KANJI;
        else return exports.BYTE;
    };

    /**
     * Return mode name as string
     *
     * @param {Mode} mode Mode object
     * @returns {String}  Mode name
     */
    exports.toString = function toString(mode) {
        if (mode && mode.id) return mode.id;
        throw new Error("Invalid mode");
    };

    /**
     * Check if input param is a valid mode object
     *
     * @param   {Mode}    mode Mode object
     * @returns {Boolean} True if valid mode, false otherwise
     */
    exports.isValid = function isValid(mode) {
        return mode && mode.bit && mode.ccBits;
    };

    /**
     * Get mode object from its name
     *
     * @param   {String} string Mode name
     * @returns {Mode}          Mode object
     */
    function fromString(string) {
        if (typeof string !== "string") {
            throw new Error("Param is not a string");
        }

        const lcStr = string.toLowerCase();

        switch (lcStr) {
            case "numeric":
                return exports.NUMERIC;
            case "alphanumeric":
                return exports.ALPHANUMERIC;
            case "kanji":
                return exports.KANJI;
            case "byte":
                return exports.BYTE;
            default:
                throw new Error("Unknown mode: " + string);
        }
    }

    /**
     * Returns mode from a value.
     * If value is not a valid mode, returns defaultValue
     *
     * @param  {Mode|String} value        Encoding mode
     * @param  {Mode}        defaultValue Fallback value
     * @return {Mode}                     Encoding mode
     */
    exports.from = function from(value, defaultValue) {
        if (exports.isValid(value)) {
            return value;
        }

        try {
            return fromString(value);
        } catch (e) {
            return defaultValue;
        }
    };
})(mode);

(function (exports) {
    const Utils = utils$1;
    const ECCode = errorCorrectionCode;
    const ECLevel = errorCorrectionLevel;
    const Mode = mode;
    const VersionCheck = versionCheck;

    // Generator polynomial used to encode version information
    const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
    const G18_BCH = Utils.getBCHDigit(G18);

    function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
        for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
            if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
                return currentVersion;
            }
        }

        return undefined;
    }

    function getReservedBitsCount(mode, version) {
        // Character count indicator + mode indicator bits
        return Mode.getCharCountIndicator(mode, version) + 4;
    }

    function getTotalBitsFromDataArray(segments, version) {
        let totalBits = 0;

        segments.forEach(function (data) {
            const reservedBits = getReservedBitsCount(data.mode, version);
            totalBits += reservedBits + data.getBitsLength();
        });

        return totalBits;
    }

    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
        for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
            const length = getTotalBitsFromDataArray(segments, currentVersion);
            if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
                return currentVersion;
            }
        }

        return undefined;
    }

    /**
     * Returns version number from a value.
     * If value is not a valid version, returns defaultValue
     *
     * @param  {Number|String} value        QR Code version
     * @param  {Number}        defaultValue Fallback value
     * @return {Number}                     QR Code version number
     */
    exports.from = function from(value, defaultValue) {
        if (VersionCheck.isValid(value)) {
            return parseInt(value, 10);
        }

        return defaultValue;
    };

    /**
     * Returns how much data can be stored with the specified QR code version
     * and error correction level
     *
     * @param  {Number} version              QR Code version (1-40)
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Mode}   mode                 Data mode
     * @return {Number}                      Quantity of storable data
     */
    exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
        if (!VersionCheck.isValid(version)) {
            throw new Error("Invalid QR Code version");
        }

        // Use Byte mode as default
        if (typeof mode === "undefined") mode = Mode.BYTE;

        // Total codewords for this QR code version (Data + Error correction)
        const totalCodewords = Utils.getSymbolTotalCodewords(version);

        // Total number of error correction codewords
        const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

        // Total number of data codewords
        const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

        if (mode === Mode.MIXED) return dataTotalCodewordsBits;

        const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);

        // Return max number of storable codewords
        switch (mode) {
            case Mode.NUMERIC:
                return Math.floor((usableBits / 10) * 3);

            case Mode.ALPHANUMERIC:
                return Math.floor((usableBits / 11) * 2);

            case Mode.KANJI:
                return Math.floor(usableBits / 13);

            case Mode.BYTE:
            default:
                return Math.floor(usableBits / 8);
        }
    };

    /**
     * Returns the minimum version needed to contain the amount of data
     *
     * @param  {Segment} data                    Segment of data
     * @param  {Number} [errorCorrectionLevel=H] Error correction level
     * @param  {Mode} mode                       Data mode
     * @return {Number}                          QR Code version
     */
    exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
        let seg;

        const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);

        if (Array.isArray(data)) {
            if (data.length > 1) {
                return getBestVersionForMixedData(data, ecl);
            }

            if (data.length === 0) {
                return 1;
            }

            seg = data[0];
        } else {
            seg = data;
        }

        return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
    };

    /**
     * Returns version information with relative error correction bits
     *
     * The version information is included in QR Code symbols of version 7 or larger.
     * It consists of an 18-bit sequence containing 6 data bits,
     * with 12 error correction bits calculated using the (18, 6) Golay code.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Encoded version info bits
     */
    exports.getEncodedBits = function getEncodedBits(version) {
        if (!VersionCheck.isValid(version) || version < 7) {
            throw new Error("Invalid QR Code version");
        }

        let d = version << 12;

        while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
            d ^= G18 << (Utils.getBCHDigit(d) - G18_BCH);
        }

        return (version << 12) | d;
    };
})(version);

var formatInfo = {};

const Utils$3 = utils$1;

const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
const G15_BCH = Utils$3.getBCHDigit(G15);

/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */
formatInfo.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
    const data = (errorCorrectionLevel.bit << 3) | mask;
    let d = data << 10;

    while (Utils$3.getBCHDigit(d) - G15_BCH >= 0) {
        d ^= G15 << (Utils$3.getBCHDigit(d) - G15_BCH);
    }

    // xor final data with mask pattern in order to ensure that
    // no combination of Error Correction Level and data mask pattern
    // will result in an all-zero data string
    return ((data << 10) | d) ^ G15_MASK;
};

var segments = {};

const Mode$4 = mode;

function NumericData(data) {
    this.mode = Mode$4.NUMERIC;
    this.data = data.toString();
}

NumericData.getBitsLength = function getBitsLength(length) {
    return 10 * Math.floor(length / 3) + (length % 3 ? (length % 3) * 3 + 1 : 0);
};

NumericData.prototype.getLength = function getLength() {
    return this.data.length;
};

NumericData.prototype.getBitsLength = function getBitsLength() {
    return NumericData.getBitsLength(this.data.length);
};

NumericData.prototype.write = function write(bitBuffer) {
    let i, group, value;

    // The input data string is divided into groups of three digits,
    // and each group is converted to its 10-bit binary equivalent.
    for (i = 0; i + 3 <= this.data.length; i += 3) {
        group = this.data.substr(i, 3);
        value = parseInt(group, 10);

        bitBuffer.put(value, 10);
    }

    // If the number of input digits is not an exact multiple of three,
    // the final one or two digits are converted to 4 or 7 bits respectively.
    const remainingNum = this.data.length - i;
    if (remainingNum > 0) {
        group = this.data.substr(i);
        value = parseInt(group, 10);

        bitBuffer.put(value, remainingNum * 3 + 1);
    }
};

var numericData = NumericData;

const Mode$3 = mode;

/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */
const ALPHA_NUM_CHARS = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    " ",
    "$",
    "%",
    "*",
    "+",
    "-",
    ".",
    "/",
    ":",
];

function AlphanumericData(data) {
    this.mode = Mode$3.ALPHANUMERIC;
    this.data = data;
}

AlphanumericData.getBitsLength = function getBitsLength(length) {
    return 11 * Math.floor(length / 2) + 6 * (length % 2);
};

AlphanumericData.prototype.getLength = function getLength() {
    return this.data.length;
};

AlphanumericData.prototype.getBitsLength = function getBitsLength() {
    return AlphanumericData.getBitsLength(this.data.length);
};

AlphanumericData.prototype.write = function write(bitBuffer) {
    let i;

    // Input data characters are divided into groups of two characters
    // and encoded as 11-bit binary codes.
    for (i = 0; i + 2 <= this.data.length; i += 2) {
        // The character value of the first character is multiplied by 45
        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

        // The character value of the second digit is added to the product
        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

        // The sum is then stored as 11-bit binary number
        bitBuffer.put(value, 11);
    }

    // If the number of input data characters is not a multiple of two,
    // the character value of the final character is encoded as a 6-bit binary number.
    if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
    }
};

var alphanumericData = AlphanumericData;

var encodeUtf8$1 = function encodeUtf8(input) {
    var result = [];
    var size = input.length;

    for (var index = 0; index < size; index++) {
        var point = input.charCodeAt(index);

        if (point >= 0xd800 && point <= 0xdbff && size > index + 1) {
            var second = input.charCodeAt(index + 1);

            if (second >= 0xdc00 && second <= 0xdfff) {
                // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                point = (point - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                index += 1;
            }
        }

        // US-ASCII
        if (point < 0x80) {
            result.push(point);
            continue;
        }

        // 2-byte UTF-8
        if (point < 0x800) {
            result.push((point >> 6) | 192);
            result.push((point & 63) | 128);
            continue;
        }

        // 3-byte UTF-8
        if (point < 0xd800 || (point >= 0xe000 && point < 0x10000)) {
            result.push((point >> 12) | 224);
            result.push(((point >> 6) & 63) | 128);
            result.push((point & 63) | 128);
            continue;
        }

        // 4-byte UTF-8
        if (point >= 0x10000 && point <= 0x10ffff) {
            result.push((point >> 18) | 240);
            result.push(((point >> 12) & 63) | 128);
            result.push(((point >> 6) & 63) | 128);
            result.push((point & 63) | 128);
            continue;
        }

        // Invalid character
        result.push(0xef, 0xbf, 0xbd);
    }

    return new Uint8Array(result).buffer;
};

const encodeUtf8 = encodeUtf8$1;
const Mode$2 = mode;

function ByteData(data) {
    this.mode = Mode$2.BYTE;
    if (typeof data === "string") {
        data = encodeUtf8(data);
    }
    this.data = new Uint8Array(data);
}

ByteData.getBitsLength = function getBitsLength(length) {
    return length * 8;
};

ByteData.prototype.getLength = function getLength() {
    return this.data.length;
};

ByteData.prototype.getBitsLength = function getBitsLength() {
    return ByteData.getBitsLength(this.data.length);
};

ByteData.prototype.write = function (bitBuffer) {
    for (let i = 0, l = this.data.length; i < l; i++) {
        bitBuffer.put(this.data[i], 8);
    }
};

var byteData = ByteData;

const Mode$1 = mode;
const Utils$2 = utils$1;

function KanjiData(data) {
    this.mode = Mode$1.KANJI;
    this.data = data;
}

KanjiData.getBitsLength = function getBitsLength(length) {
    return length * 13;
};

KanjiData.prototype.getLength = function getLength() {
    return this.data.length;
};

KanjiData.prototype.getBitsLength = function getBitsLength() {
    return KanjiData.getBitsLength(this.data.length);
};

KanjiData.prototype.write = function (bitBuffer) {
    let i;

    // In the Shift JIS system, Kanji characters are represented by a two byte combination.
    // These byte values are shifted from the JIS X 0208 values.
    // JIS X 0208 gives details of the shift coded representation.
    for (i = 0; i < this.data.length; i++) {
        let value = Utils$2.toSJIS(this.data[i]);

        // For characters with Shift JIS values from 0x8140 to 0x9FFC:
        if (value >= 0x8140 && value <= 0x9ffc) {
            // Subtract 0x8140 from Shift JIS value
            value -= 0x8140;

            // For characters with Shift JIS values from 0xE040 to 0xEBBF
        } else if (value >= 0xe040 && value <= 0xebbf) {
            // Subtract 0xC140 from Shift JIS value
            value -= 0xc140;
        } else {
            throw new Error("Invalid SJIS character: " + this.data[i] + "\n" + "Make sure your charset is UTF-8");
        }

        // Multiply most significant byte of result by 0xC0
        // and add least significant byte to product
        value = ((value >>> 8) & 0xff) * 0xc0 + (value & 0xff);

        // Convert result to a 13-bit binary string
        bitBuffer.put(value, 13);
    }
};

var kanjiData = KanjiData;

var dijkstra = { exports: {} };

(function (module) {
    /******************************************************************************
     * Created 2008-08-19.
     *
     * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
     *
     * Copyright (C) 2008
     *   Wyatt Baldwin <self@wyattbaldwin.com>
     *   All rights reserved
     *
     * Licensed under the MIT license.
     *
     *   http://www.opensource.org/licenses/mit-license.php
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     *****************************************************************************/
    var dijkstra = {
        single_source_shortest_paths: function (graph, s, d) {
            // Predecessor map for each node that has been encountered.
            // node ID => predecessor node ID
            var predecessors = {};

            // Costs of shortest paths from s to all nodes encountered.
            // node ID => cost
            var costs = {};
            costs[s] = 0;

            // Costs of shortest paths from s to all nodes encountered; differs from
            // `costs` in that it provides easy access to the node that currently has
            // the known shortest path from s.
            // XXX: Do we actually need both `costs` and `open`?
            var open = dijkstra.PriorityQueue.make();
            open.push(s, 0);

            var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;
            while (!open.empty()) {
                // In the nodes remaining in graph that have a known cost from s,
                // find the node, u, that currently has the shortest path from s.
                closest = open.pop();
                u = closest.value;
                cost_of_s_to_u = closest.cost;

                // Get nodes adjacent to u...
                adjacent_nodes = graph[u] || {};

                // ...and explore the edges that connect u to those nodes, updating
                // the cost of the shortest paths to any or all of those nodes as
                // necessary. v is the node across the current edge from u.
                for (v in adjacent_nodes) {
                    if (adjacent_nodes.hasOwnProperty(v)) {
                        // Get the cost of the edge running from u to v.
                        cost_of_e = adjacent_nodes[v];

                        // Cost of s to u plus the cost of u to v across e--this is *a*
                        // cost from s to v that may or may not be less than the current
                        // known cost to v.
                        cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

                        // If we haven't visited v yet OR if the current known cost from s to
                        // v is greater than the new cost we just found (cost of s to u plus
                        // cost of u to v across e), update v's cost in the cost list and
                        // update v's predecessor in the predecessor list (it's now u).
                        cost_of_s_to_v = costs[v];
                        first_visit = typeof costs[v] === "undefined";
                        if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                            costs[v] = cost_of_s_to_u_plus_cost_of_e;
                            open.push(v, cost_of_s_to_u_plus_cost_of_e);
                            predecessors[v] = u;
                        }
                    }
                }
            }

            if (typeof d !== "undefined" && typeof costs[d] === "undefined") {
                var msg = ["Could not find a path from ", s, " to ", d, "."].join("");
                throw new Error(msg);
            }

            return predecessors;
        },

        extract_shortest_path_from_predecessor_list: function (predecessors, d) {
            var nodes = [];
            var u = d;
            while (u) {
                nodes.push(u);
                predecessors[u];
                u = predecessors[u];
            }
            nodes.reverse();
            return nodes;
        },

        find_path: function (graph, s, d) {
            var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
            return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);
        },

        /**
         * A very naive priority queue implementation.
         */
        PriorityQueue: {
            make: function (opts) {
                var T = dijkstra.PriorityQueue,
                    t = {},
                    key;
                opts = opts || {};
                for (key in T) {
                    if (T.hasOwnProperty(key)) {
                        t[key] = T[key];
                    }
                }
                t.queue = [];
                t.sorter = opts.sorter || T.default_sorter;
                return t;
            },

            default_sorter: function (a, b) {
                return a.cost - b.cost;
            },

            /**
             * Add a new item to the queue and ensure the highest priority element
             * is at the front of the queue.
             */
            push: function (value, cost) {
                var item = { value: value, cost: cost };
                this.queue.push(item);
                this.queue.sort(this.sorter);
            },

            /**
             * Return the highest priority element in the queue.
             */
            pop: function () {
                return this.queue.shift();
            },

            empty: function () {
                return this.queue.length === 0;
            },
        },
    };

    // node.js module exports
    {
        module.exports = dijkstra;
    }
})(dijkstra);

var dijkstraExports = dijkstra.exports;

(function (exports) {
    const Mode = mode;
    const NumericData = numericData;
    const AlphanumericData = alphanumericData;
    const ByteData = byteData;
    const KanjiData = kanjiData;
    const Regex = regex;
    const Utils = utils$1;
    const dijkstra = dijkstraExports;

    /**
     * Returns UTF8 byte length
     *
     * @param  {String} str Input string
     * @return {Number}     Number of byte
     */
    function getStringByteLength(str) {
        return unescape(encodeURIComponent(str)).length;
    }

    /**
     * Get a list of segments of the specified mode
     * from a string
     *
     * @param  {Mode}   mode Segment mode
     * @param  {String} str  String to process
     * @return {Array}       Array of object with segments data
     */
    function getSegments(regex, mode, str) {
        const segments = [];
        let result;

        while ((result = regex.exec(str)) !== null) {
            segments.push({
                data: result[0],
                index: result.index,
                mode: mode,
                length: result[0].length,
            });
        }

        return segments;
    }

    /**
     * Extracts a series of segments with the appropriate
     * modes from a string
     *
     * @param  {String} dataStr Input string
     * @return {Array}          Array of object with segments data
     */
    function getSegmentsFromString(dataStr) {
        const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
        const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
        let byteSegs;
        let kanjiSegs;

        if (Utils.isKanjiModeEnabled()) {
            byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
            kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
        } else {
            byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
            kanjiSegs = [];
        }

        const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

        return segs
            .sort(function (s1, s2) {
                return s1.index - s2.index;
            })
            .map(function (obj) {
                return {
                    data: obj.data,
                    mode: obj.mode,
                    length: obj.length,
                };
            });
    }

    /**
     * Returns how many bits are needed to encode a string of
     * specified length with the specified mode
     *
     * @param  {Number} length String length
     * @param  {Mode} mode     Segment mode
     * @return {Number}        Bit length
     */
    function getSegmentBitsLength(length, mode) {
        switch (mode) {
            case Mode.NUMERIC:
                return NumericData.getBitsLength(length);
            case Mode.ALPHANUMERIC:
                return AlphanumericData.getBitsLength(length);
            case Mode.KANJI:
                return KanjiData.getBitsLength(length);
            case Mode.BYTE:
                return ByteData.getBitsLength(length);
        }
    }

    /**
     * Merges adjacent segments which have the same mode
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function mergeSegments(segs) {
        return segs.reduce(function (acc, curr) {
            const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
            if (prevSeg && prevSeg.mode === curr.mode) {
                acc[acc.length - 1].data += curr.data;
                return acc;
            }

            acc.push(curr);
            return acc;
        }, []);
    }

    /**
     * Generates a list of all possible nodes combination which
     * will be used to build a segments graph.
     *
     * Nodes are divided by groups. Each group will contain a list of all the modes
     * in which is possible to encode the given text.
     *
     * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
     * The group for '12345' will contain then 3 objects, one for each
     * possible encoding mode.
     *
     * Each node represents a possible segment.
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function buildNodes(segs) {
        const nodes = [];
        for (let i = 0; i < segs.length; i++) {
            const seg = segs[i];

            switch (seg.mode) {
                case Mode.NUMERIC:
                    nodes.push([seg, { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length }, { data: seg.data, mode: Mode.BYTE, length: seg.length }]);
                    break;
                case Mode.ALPHANUMERIC:
                    nodes.push([seg, { data: seg.data, mode: Mode.BYTE, length: seg.length }]);
                    break;
                case Mode.KANJI:
                    nodes.push([seg, { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }]);
                    break;
                case Mode.BYTE:
                    nodes.push([{ data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }]);
            }
        }

        return nodes;
    }

    /**
     * Builds a graph from a list of nodes.
     * All segments in each node group will be connected with all the segments of
     * the next group and so on.
     *
     * At each connection will be assigned a weight depending on the
     * segment's byte length.
     *
     * @param  {Array} nodes    Array of object with segments data
     * @param  {Number} version QR Code version
     * @return {Object}         Graph of all possible segments
     */
    function buildGraph(nodes, version) {
        const table = {};
        const graph = { start: {} };
        let prevNodeIds = ["start"];

        for (let i = 0; i < nodes.length; i++) {
            const nodeGroup = nodes[i];
            const currentNodeIds = [];

            for (let j = 0; j < nodeGroup.length; j++) {
                const node = nodeGroup[j];
                const key = "" + i + j;

                currentNodeIds.push(key);
                table[key] = { node: node, lastCount: 0 };
                graph[key] = {};

                for (let n = 0; n < prevNodeIds.length; n++) {
                    const prevNodeId = prevNodeIds[n];

                    if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
                        graph[prevNodeId][key] =
                            getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
                            getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

                        table[prevNodeId].lastCount += node.length;
                    } else {
                        if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

                        graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost
                    }
                }
            }

            prevNodeIds = currentNodeIds;
        }

        for (let n = 0; n < prevNodeIds.length; n++) {
            graph[prevNodeIds[n]].end = 0;
        }

        return { map: graph, table: table };
    }

    /**
     * Builds a segment from a specified data and mode.
     * If a mode is not specified, the more suitable will be used.
     *
     * @param  {String} data             Input data
     * @param  {Mode | String} modesHint Data mode
     * @return {Segment}                 Segment
     */
    function buildSingleSegment(data, modesHint) {
        let mode;
        const bestMode = Mode.getBestModeForData(data);

        mode = Mode.from(modesHint, bestMode);

        // Make sure data can be encoded
        if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
            throw new Error('"' + data + '"' + " cannot be encoded with mode " + Mode.toString(mode) + ".\n Suggested mode is: " + Mode.toString(bestMode));
        }

        // Use Mode.BYTE if Kanji support is disabled
        if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
            mode = Mode.BYTE;
        }

        switch (mode) {
            case Mode.NUMERIC:
                return new NumericData(data);

            case Mode.ALPHANUMERIC:
                return new AlphanumericData(data);

            case Mode.KANJI:
                return new KanjiData(data);

            case Mode.BYTE:
                return new ByteData(data);
        }
    }

    /**
     * Builds a list of segments from an array.
     * Array can contain Strings or Objects with segment's info.
     *
     * For each item which is a string, will be generated a segment with the given
     * string and the more appropriate encoding mode.
     *
     * For each item which is an object, will be generated a segment with the given
     * data and mode.
     * Objects must contain at least the property "data".
     * If property "mode" is not present, the more suitable mode will be used.
     *
     * @param  {Array} array Array of objects with segments data
     * @return {Array}       Array of Segments
     */
    exports.fromArray = function fromArray(array) {
        return array.reduce(function (acc, seg) {
            if (typeof seg === "string") {
                acc.push(buildSingleSegment(seg, null));
            } else if (seg.data) {
                acc.push(buildSingleSegment(seg.data, seg.mode));
            }

            return acc;
        }, []);
    };

    /**
     * Builds an optimized sequence of segments from a string,
     * which will produce the shortest possible bitstream.
     *
     * @param  {String} data    Input string
     * @param  {Number} version QR Code version
     * @return {Array}          Array of segments
     */
    exports.fromString = function fromString(data, version) {
        const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());

        const nodes = buildNodes(segs);
        const graph = buildGraph(nodes, version);
        const path = dijkstra.find_path(graph.map, "start", "end");

        const optimizedSegs = [];
        for (let i = 1; i < path.length - 1; i++) {
            optimizedSegs.push(graph.table[path[i]].node);
        }

        return exports.fromArray(mergeSegments(optimizedSegs));
    };

    /**
     * Splits a string in various segments with the modes which
     * best represent their content.
     * The produced segments are far from being optimized.
     * The output of this function is only used to estimate a QR Code version
     * which may contain the data.
     *
     * @param  {string} data Input string
     * @return {Array}       Array of segments
     */
    exports.rawSplit = function rawSplit(data) {
        return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));
    };
})(segments);

const Utils$1 = utils$1;
const ECLevel = errorCorrectionLevel;
const BitBuffer = bitBuffer;
const BitMatrix = bitMatrix;
const AlignmentPattern = alignmentPattern;
const FinderPattern = finderPattern;
const MaskPattern = maskPattern;
const ECCode = errorCorrectionCode;
const ReedSolomonEncoder = reedSolomonEncoder;
const Version = version;
const FormatInfo = formatInfo;
const Mode = mode;
const Segments = segments;

/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */
function setupFinderPattern(matrix, version) {
    const size = matrix.size;
    const pos = FinderPattern.getPositions(version);

    for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];

        for (let r = -1; r <= 7; r++) {
            if (row + r <= -1 || size <= row + r) continue;

            for (let c = -1; c <= 7; c++) {
                if (col + c <= -1 || size <= col + c) continue;

                if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) || (c >= 0 && c <= 6 && (r === 0 || r === 6)) || (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
                    matrix.set(row + r, col + c, true, true);
                } else {
                    matrix.set(row + r, col + c, false, true);
                }
            }
        }
    }
}

/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */
function setupTimingPattern(matrix) {
    const size = matrix.size;

    for (let r = 8; r < size - 8; r++) {
        const value = r % 2 === 0;
        matrix.set(r, 6, value, true);
        matrix.set(6, r, value, true);
    }
}

/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */
function setupAlignmentPattern(matrix, version) {
    const pos = AlignmentPattern.getPositions(version);

    for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];

        for (let r = -2; r <= 2; r++) {
            for (let c = -2; c <= 2; c++) {
                if (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {
                    matrix.set(row + r, col + c, true, true);
                } else {
                    matrix.set(row + r, col + c, false, true);
                }
            }
        }
    }
}

/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */
function setupVersionInfo(matrix, version) {
    const size = matrix.size;
    const bits = Version.getEncodedBits(version);
    let row, col, mod;

    for (let i = 0; i < 18; i++) {
        row = Math.floor(i / 3);
        col = (i % 3) + size - 8 - 3;
        mod = ((bits >> i) & 1) === 1;

        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
    }
}

/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */
function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
    const size = matrix.size;
    const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
    let i, mod;

    for (i = 0; i < 15; i++) {
        mod = ((bits >> i) & 1) === 1;

        // vertical
        if (i < 6) {
            matrix.set(i, 8, mod, true);
        } else if (i < 8) {
            matrix.set(i + 1, 8, mod, true);
        } else {
            matrix.set(size - 15 + i, 8, mod, true);
        }

        // horizontal
        if (i < 8) {
            matrix.set(8, size - i - 1, mod, true);
        } else if (i < 9) {
            matrix.set(8, 15 - i - 1 + 1, mod, true);
        } else {
            matrix.set(8, 15 - i - 1, mod, true);
        }
    }

    // fixed module
    matrix.set(size - 8, 8, 1, true);
}

/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix}  matrix Modules matrix
 * @param  {Uint8Array} data   Data codewords
 */
function setupData(matrix, data) {
    const size = matrix.size;
    let inc = -1;
    let row = size - 1;
    let bitIndex = 7;
    let byteIndex = 0;

    for (let col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--;

        while (true) {
            for (let c = 0; c < 2; c++) {
                if (!matrix.isReserved(row, col - c)) {
                    let dark = false;

                    if (byteIndex < data.length) {
                        dark = ((data[byteIndex] >>> bitIndex) & 1) === 1;
                    }

                    matrix.set(row, col - c, dark);
                    bitIndex--;

                    if (bitIndex === -1) {
                        byteIndex++;
                        bitIndex = 7;
                    }
                }
            }

            row += inc;

            if (row < 0 || size <= row) {
                row -= inc;
                inc = -inc;
                break;
            }
        }
    }
}

/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Uint8Array}                    Buffer containing encoded codewords
 */
function createData(version, errorCorrectionLevel, segments) {
    // Prepare data buffer
    const buffer = new BitBuffer();

    segments.forEach(function (data) {
        // prefix data with mode indicator (4 bits)
        buffer.put(data.mode.bit, 4);

        // Prefix data with character count indicator.
        // The character count indicator is a string of bits that represents the
        // number of characters that are being encoded.
        // The character count indicator must be placed after the mode indicator
        // and must be a certain number of bits long, depending on the QR version
        // and data mode
        // @see {@link Mode.getCharCountIndicator}.
        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));

        // add binary data sequence to buffer
        data.write(buffer);
    });

    // Calculate required number of bits
    const totalCodewords = Utils$1.getSymbolTotalCodewords(version);
    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);
    const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

    // Add a terminator.
    // If the bit string is shorter than the total number of required bits,
    // a terminator of up to four 0s must be added to the right side of the string.
    // If the bit string is more than four bits shorter than the required number of bits,
    // add four 0s to the end.
    if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
    }

    // If the bit string is fewer than four bits shorter, add only the number of 0s that
    // are needed to reach the required number of bits.

    // After adding the terminator, if the number of bits in the string is not a multiple of 8,
    // pad the string on the right with 0s to make the string's length a multiple of 8.
    while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
    }

    // Add pad bytes if the string is still shorter than the total number of required bits.
    // Extend the buffer to fill the data capacity of the symbol corresponding to
    // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
    // and 00010001 (0x11) alternately.
    const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
    for (let i = 0; i < remainingByte; i++) {
        buffer.put(i % 2 ? 0x11 : 0xec, 8);
    }

    return createCodewords(buffer, version, errorCorrectionLevel);
}

/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Uint8Array}                     Buffer containing encoded codewords
 */
function createCodewords(bitBuffer, version, errorCorrectionLevel) {
    // Total codewords for this QR code version (Data + Error correction)
    const totalCodewords = Utils$1.getSymbolTotalCodewords(version);

    // Total number of error correction codewords
    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

    // Total number of data codewords
    const dataTotalCodewords = totalCodewords - ecTotalCodewords;

    // Total number of blocks
    const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);

    // Calculate how many blocks each group should contain
    const blocksInGroup2 = totalCodewords % ecTotalBlocks;
    const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

    const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

    const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
    const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

    // Number of EC codewords is the same for both groups
    const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

    // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
    const rs = new ReedSolomonEncoder(ecCount);

    let offset = 0;
    const dcData = new Array(ecTotalBlocks);
    const ecData = new Array(ecTotalBlocks);
    let maxDataSize = 0;
    const buffer = new Uint8Array(bitBuffer.buffer);

    // Divide the buffer into the required number of blocks
    for (let b = 0; b < ecTotalBlocks; b++) {
        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

        // extract a block of data from buffer
        dcData[b] = buffer.slice(offset, offset + dataSize);

        // Calculate EC codewords for this data block
        ecData[b] = rs.encode(dcData[b]);

        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
    }

    // Create final data
    // Interleave the data and error correction codewords from each block
    const data = new Uint8Array(totalCodewords);
    let index = 0;
    let i, r;

    // Add data codewords
    for (i = 0; i < maxDataSize; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
            if (i < dcData[r].length) {
                data[index++] = dcData[r][i];
            }
        }
    }

    // Apped EC codewords
    for (i = 0; i < ecCount; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
            data[index++] = ecData[r][i];
        }
    }

    return data;
}

/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */
function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
    let segments;

    if (Array.isArray(data)) {
        segments = Segments.fromArray(data);
    } else if (typeof data === "string") {
        let estimatedVersion = version;

        if (!estimatedVersion) {
            const rawSegments = Segments.rawSplit(data);

            // Estimate best version that can contain raw splitted segments
            estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
        }

        // Build optimized segments
        // If estimated version is undefined, try with the highest version
        segments = Segments.fromString(data, estimatedVersion || 40);
    } else {
        throw new Error("Invalid data");
    }

    // Get the min version that can contain data
    const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);

    // If no version is found, data cannot be stored
    if (!bestVersion) {
        throw new Error("The amount of data is too big to be stored in a QR Code");
    }

    // If not specified, use min version as default
    if (!version) {
        version = bestVersion;

        // Check if the specified version can contain the data
    } else if (version < bestVersion) {
        throw new Error(
            "\n" +
                "The chosen QR Code version cannot contain this amount of data.\n" +
                "Minimum version required to store current data is: " +
                bestVersion +
                ".\n"
        );
    }

    const dataBits = createData(version, errorCorrectionLevel, segments);

    // Allocate matrix buffer
    const moduleCount = Utils$1.getSymbolSize(version);
    const modules = new BitMatrix(moduleCount);

    // Add function modules
    setupFinderPattern(modules, version);
    setupTimingPattern(modules);
    setupAlignmentPattern(modules, version);

    // Add temporary dummy bits for format info just to set them as reserved.
    // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
    // since the masking operation must be performed only on the encoding region.
    // These blocks will be replaced with correct values later in code.
    setupFormatInfo(modules, errorCorrectionLevel, 0);

    if (version >= 7) {
        setupVersionInfo(modules, version);
    }

    // Add data codewords
    setupData(modules, dataBits);

    if (isNaN(maskPattern)) {
        // Find best mask pattern
        maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));
    }

    // Apply mask pattern
    MaskPattern.applyMask(maskPattern, modules);

    // Replace format info bits with correct values
    setupFormatInfo(modules, errorCorrectionLevel, maskPattern);

    return {
        modules: modules,
        version: version,
        errorCorrectionLevel: errorCorrectionLevel,
        maskPattern: maskPattern,
        segments: segments,
    };
}

/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */
qrcode.create = function create(data, options) {
    if (typeof data === "undefined" || data === "") {
        throw new Error("No input text");
    }

    let errorCorrectionLevel = ECLevel.M;
    let version;
    let mask;

    if (typeof options !== "undefined") {
        // Use higher error correction level as default
        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
        version = Version.from(options.version);
        mask = MaskPattern.from(options.maskPattern);

        if (options.toSJISFunc) {
            Utils$1.setToSJISFunction(options.toSJISFunc);
        }
    }

    return createSymbol(data, version, errorCorrectionLevel, mask);
};

var canvas = {};

var utils = {};

(function (exports) {
    function hex2rgba(hex) {
        if (typeof hex === "number") {
            hex = hex.toString();
        }

        if (typeof hex !== "string") {
            throw new Error("Color should be defined as hex string");
        }

        let hexCode = hex.slice().replace("#", "").split("");
        if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
            throw new Error("Invalid hex color: " + hex);
        }

        // Convert from short to long form (fff -> ffffff)
        if (hexCode.length === 3 || hexCode.length === 4) {
            hexCode = Array.prototype.concat.apply(
                [],
                hexCode.map(function (c) {
                    return [c, c];
                })
            );
        }

        // Add default alpha value
        if (hexCode.length === 6) hexCode.push("F", "F");

        const hexValue = parseInt(hexCode.join(""), 16);

        return {
            r: (hexValue >> 24) & 255,
            g: (hexValue >> 16) & 255,
            b: (hexValue >> 8) & 255,
            a: hexValue & 255,
            hex: "#" + hexCode.slice(0, 6).join(""),
        };
    }

    exports.getOptions = function getOptions(options) {
        if (!options) options = {};
        if (!options.color) options.color = {};

        const margin = typeof options.margin === "undefined" || options.margin === null || options.margin < 0 ? 4 : options.margin;

        const width = options.width && options.width >= 21 ? options.width : undefined;
        const scale = options.scale || 4;

        return {
            width: width,
            scale: width ? 4 : scale,
            margin: margin,
            color: {
                dark: hex2rgba(options.color.dark || "#000000ff"),
                light: hex2rgba(options.color.light || "#ffffffff"),
            },
            type: options.type,
            rendererOpts: options.rendererOpts || {},
        };
    };

    exports.getScale = function getScale(qrSize, opts) {
        return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
    };

    exports.getImageWidth = function getImageWidth(qrSize, opts) {
        const scale = exports.getScale(qrSize, opts);
        return Math.floor((qrSize + opts.margin * 2) * scale);
    };

    exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
        const size = qr.modules.size;
        const data = qr.modules.data;
        const scale = exports.getScale(size, opts);
        const symbolSize = Math.floor((size + opts.margin * 2) * scale);
        const scaledMargin = opts.margin * scale;
        const palette = [opts.color.light, opts.color.dark];

        for (let i = 0; i < symbolSize; i++) {
            for (let j = 0; j < symbolSize; j++) {
                let posDst = (i * symbolSize + j) * 4;
                let pxColor = opts.color.light;

                if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
                    const iSrc = Math.floor((i - scaledMargin) / scale);
                    const jSrc = Math.floor((j - scaledMargin) / scale);
                    pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
                }

                imgData[posDst++] = pxColor.r;
                imgData[posDst++] = pxColor.g;
                imgData[posDst++] = pxColor.b;
                imgData[posDst] = pxColor.a;
            }
        }
    };
})(utils);

(function (exports) {
    const Utils = utils;

    function clearCanvas(ctx, canvas, size) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        if (!canvas.style) canvas.style = {};
        canvas.height = size;
        canvas.width = size;
        canvas.style.height = size + "px";
        canvas.style.width = size + "px";
    }

    function getCanvasElement() {
        try {
            return document.createElement("canvas");
        } catch (e) {
            throw new Error("You need to specify a canvas element");
        }
    }

    exports.render = function render(qrData, canvas, options) {
        let opts = options;
        let canvasEl = canvas;

        if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
            opts = canvas;
            canvas = undefined;
        }

        if (!canvas) {
            canvasEl = getCanvasElement();
        }

        opts = Utils.getOptions(opts);
        const size = Utils.getImageWidth(qrData.modules.size, opts);

        const ctx = canvasEl.getContext("2d");
        const image = ctx.createImageData(size, size);
        Utils.qrToImageData(image.data, qrData, opts);

        clearCanvas(ctx, canvasEl, size);
        ctx.putImageData(image, 0, 0);

        return canvasEl;
    };

    exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
        let opts = options;

        if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
            opts = canvas;
            canvas = undefined;
        }

        if (!opts) opts = {};

        const canvasEl = exports.render(qrData, canvas, opts);

        const type = opts.type || "image/png";
        const rendererOpts = opts.rendererOpts || {};

        return canvasEl.toDataURL(type, rendererOpts.quality);
    };
})(canvas);

var svgTag = {};

const Utils = utils;

function getColorAttrib(color, attrib) {
    const alpha = color.a / 255;
    const str = attrib + '="' + color.hex + '"';

    return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
}

function svgCmd(cmd, x, y) {
    let str = cmd + x;
    if (typeof y !== "undefined") str += " " + y;

    return str;
}

function qrToPath(data, size, margin) {
    let path = "";
    let moveBy = 0;
    let newRow = false;
    let lineLength = 0;

    for (let i = 0; i < data.length; i++) {
        const col = Math.floor(i % size);
        const row = Math.floor(i / size);

        if (!col && !newRow) newRow = true;

        if (data[i]) {
            lineLength++;

            if (!(i > 0 && col > 0 && data[i - 1])) {
                path += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);

                moveBy = 0;
                newRow = false;
            }

            if (!(col + 1 < size && data[i + 1])) {
                path += svgCmd("h", lineLength);
                lineLength = 0;
            }
        } else {
            moveBy++;
        }
    }

    return path;
}

svgTag.render = function render(qrData, options, cb) {
    const opts = Utils.getOptions(options);
    const size = qrData.modules.size;
    const data = qrData.modules.data;
    const qrcodesize = size + opts.margin * 2;

    const bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';

    const path = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size, opts.margin) + '"/>';

    const viewBox = 'viewBox="' + "0 0 " + qrcodesize + " " + qrcodesize + '"';

    const width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';

    const svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + "</svg>\n";

    if (typeof cb === "function") {
        cb(null, svgTag);
    }

    return svgTag;
};

const canPromise = canPromise$1;

const QRCode = qrcode;
const CanvasRenderer = canvas;
const SvgRenderer = svgTag;

function renderCanvas(renderFunc, canvas, text, opts, cb) {
    const args = [].slice.call(arguments, 1);
    const argsNum = args.length;
    const isLastArgCb = typeof args[argsNum - 1] === "function";

    if (!isLastArgCb && !canPromise()) {
        throw new Error("Callback required as last argument");
    }

    if (isLastArgCb) {
        if (argsNum < 2) {
            throw new Error("Too few arguments provided");
        }

        if (argsNum === 2) {
            cb = text;
            text = canvas;
            canvas = opts = undefined;
        } else if (argsNum === 3) {
            if (canvas.getContext && typeof cb === "undefined") {
                cb = opts;
                opts = undefined;
            } else {
                cb = opts;
                opts = text;
                text = canvas;
                canvas = undefined;
            }
        }
    } else {
        if (argsNum < 1) {
            throw new Error("Too few arguments provided");
        }

        if (argsNum === 1) {
            text = canvas;
            canvas = opts = undefined;
        } else if (argsNum === 2 && !canvas.getContext) {
            opts = text;
            text = canvas;
            canvas = undefined;
        }

        return new Promise(function (resolve, reject) {
            try {
                const data = QRCode.create(text, opts);
                resolve(renderFunc(data, canvas, opts));
            } catch (e) {
                reject(e);
            }
        });
    }

    try {
        const data = QRCode.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
    } catch (e) {
        cb(e);
    }
}

browser.create = QRCode.create;
browser.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
browser.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);

// only svg for now.
browser.toString = renderCanvas.bind(null, function (data, _, opts) {
    return SvgRenderer.render(data, opts);
});

var et = Object.defineProperty,
    Be = Object.getOwnPropertySymbols,
    tt = Object.prototype.hasOwnProperty,
    ot = Object.prototype.propertyIsEnumerable,
    Ue = (e, o, r) => (o in e ? et(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : (e[o] = r)),
    ve = (e, o) => {
        for (var r in o || (o = {})) tt.call(o, r) && Ue(e, r, o[r]);
        if (Be) for (var r of Be(o)) ot.call(o, r) && Ue(e, r, o[r]);
        return e;
    };
function rt() {
    var e;
    const o = (e = ne$1.state.themeMode) != null ? e : "dark",
        r = {
            light: {
                foreground: { 1: "rgb(20,20,20)", 2: "rgb(121,134,134)", 3: "rgb(158,169,169)" },
                background: { 1: "rgb(255,255,255)", 2: "rgb(241,243,243)", 3: "rgb(228,231,231)" },
                overlay: "rgba(0,0,0,0.1)",
            },
            dark: {
                foreground: { 1: "rgb(228,231,231)", 2: "rgb(148,158,158)", 3: "rgb(110,119,119)" },
                background: { 1: "rgb(20,20,20)", 2: "rgb(39,42,42)", 3: "rgb(59,64,64)" },
                overlay: "rgba(255,255,255,0.1)",
            },
        }[o];
    return {
        "--wcm-color-fg-1": r.foreground[1],
        "--wcm-color-fg-2": r.foreground[2],
        "--wcm-color-fg-3": r.foreground[3],
        "--wcm-color-bg-1": r.background[1],
        "--wcm-color-bg-2": r.background[2],
        "--wcm-color-bg-3": r.background[3],
        "--wcm-color-overlay": r.overlay,
    };
}
function He() {
    return {
        "--wcm-accent-color": "#3396FF",
        "--wcm-accent-fill-color": "#FFFFFF",
        "--wcm-z-index": "89",
        "--wcm-background-color": "#3396FF",
        "--wcm-background-border-radius": "8px",
        "--wcm-container-border-radius": "30px",
        "--wcm-wallet-icon-border-radius": "15px",
        "--wcm-wallet-icon-large-border-radius": "30px",
        "--wcm-wallet-icon-small-border-radius": "7px",
        "--wcm-input-border-radius": "28px",
        "--wcm-button-border-radius": "10px",
        "--wcm-notification-border-radius": "36px",
        "--wcm-secondary-button-border-radius": "28px",
        "--wcm-icon-button-border-radius": "50%",
        "--wcm-button-hover-highlight-border-radius": "10px",
        "--wcm-text-big-bold-size": "20px",
        "--wcm-text-big-bold-weight": "600",
        "--wcm-text-big-bold-line-height": "24px",
        "--wcm-text-big-bold-letter-spacing": "-0.03em",
        "--wcm-text-big-bold-text-transform": "none",
        "--wcm-text-xsmall-bold-size": "10px",
        "--wcm-text-xsmall-bold-weight": "700",
        "--wcm-text-xsmall-bold-line-height": "12px",
        "--wcm-text-xsmall-bold-letter-spacing": "0.02em",
        "--wcm-text-xsmall-bold-text-transform": "uppercase",
        "--wcm-text-xsmall-regular-size": "12px",
        "--wcm-text-xsmall-regular-weight": "600",
        "--wcm-text-xsmall-regular-line-height": "14px",
        "--wcm-text-xsmall-regular-letter-spacing": "-0.03em",
        "--wcm-text-xsmall-regular-text-transform": "none",
        "--wcm-text-small-thin-size": "14px",
        "--wcm-text-small-thin-weight": "500",
        "--wcm-text-small-thin-line-height": "16px",
        "--wcm-text-small-thin-letter-spacing": "-0.03em",
        "--wcm-text-small-thin-text-transform": "none",
        "--wcm-text-small-regular-size": "14px",
        "--wcm-text-small-regular-weight": "600",
        "--wcm-text-small-regular-line-height": "16px",
        "--wcm-text-small-regular-letter-spacing": "-0.03em",
        "--wcm-text-small-regular-text-transform": "none",
        "--wcm-text-medium-regular-size": "16px",
        "--wcm-text-medium-regular-weight": "600",
        "--wcm-text-medium-regular-line-height": "20px",
        "--wcm-text-medium-regular-letter-spacing": "-0.03em",
        "--wcm-text-medium-regular-text-transform": "none",
        "--wcm-font-family": "-apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, 'Helvetica Neue', sans-serif",
        "--wcm-font-feature-settings": "'tnum' on, 'lnum' on, 'case' on",
        "--wcm-success-color": "rgb(38,181,98)",
        "--wcm-error-color": "rgb(242, 90, 103)",
        "--wcm-overlay-background-color": "rgba(0, 0, 0, 0.3)",
        "--wcm-overlay-backdrop-filter": "none",
    };
}
const h = {
        getPreset(e) {
            return He()[e];
        },
        setTheme() {
            const e = document.querySelector(":root"),
                { themeVariables: o } = ne$1.state;
            if (e) {
                const r = ve(ve(ve({}, rt()), He()), o);
                Object.entries(r).forEach(([a, t]) => e.style.setProperty(a, t));
            }
        },
        globalCss: i$3`*,::after,::before{margin:0;padding:0;box-sizing:border-box;font-style:normal;text-rendering:optimizeSpeed;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-tap-highlight-color:transparent;backface-visibility:hidden}button{cursor:pointer;display:flex;justify-content:center;align-items:center;position:relative;border:none;background-color:transparent;transition:all .2s ease}@media (hover:hover) and (pointer:fine){button:active{transition:all .1s ease;transform:scale(.93)}}button::after{content:'';position:absolute;top:0;bottom:0;left:0;right:0;transition:background-color,.2s ease}button:disabled{cursor:not-allowed}button svg,button wcm-text{position:relative;z-index:1}input{border:none;outline:0;appearance:none}img{display:block}::selection{color:var(--wcm-accent-fill-color);background:var(--wcm-accent-color)}`,
    },
    at = i$3`button{border-radius:var(--wcm-secondary-button-border-radius);height:28px;padding:0 10px;background-color:var(--wcm-accent-color)}button path{fill:var(--wcm-accent-fill-color)}button::after{border-radius:inherit;border:1px solid var(--wcm-color-overlay)}button:disabled::after{background-color:transparent}.wcm-icon-left svg{margin-right:5px}.wcm-icon-right svg{margin-left:5px}button:active::after{background-color:var(--wcm-color-overlay)}.wcm-ghost,.wcm-ghost:active::after,.wcm-outline{background-color:transparent}.wcm-ghost:active{opacity:.5}@media(hover:hover){button:hover::after{background-color:var(--wcm-color-overlay)}.wcm-ghost:hover::after{background-color:transparent}.wcm-ghost:hover{opacity:.5}}button:disabled{background-color:var(--wcm-color-bg-3);pointer-events:none}.wcm-ghost::after{border-color:transparent}.wcm-ghost path{fill:var(--wcm-color-fg-2)}.wcm-outline path{fill:var(--wcm-accent-color)}.wcm-outline:disabled{background-color:transparent;opacity:.5}`;
var lt = Object.defineProperty,
    it = Object.getOwnPropertyDescriptor,
    F = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? it(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && lt(o, r, t), t;
    };
let T = class extends s {
    constructor() {
        super(...arguments), (this.disabled = !1), (this.iconLeft = void 0), (this.iconRight = void 0), (this.onClick = () => null), (this.variant = "default");
    }
    render() {
        const e = {
            "wcm-icon-left": this.iconLeft !== void 0,
            "wcm-icon-right": this.iconRight !== void 0,
            "wcm-ghost": this.variant === "ghost",
            "wcm-outline": this.variant === "outline",
        };
        let o$1 = "inverse";
        return (
            this.variant === "ghost" && (o$1 = "secondary"),
            this.variant === "outline" && (o$1 = "accent"),
            x`<button class="${o(e)}" ?disabled="${this.disabled}" @click="${this.onClick}">${
                this.iconLeft
            }<wcm-text variant="small-regular" color="${o$1}"><slot></slot></wcm-text>${this.iconRight}</button>`
        );
    }
};
(T.styles = [h.globalCss, at]),
    F([n$1({ type: Boolean })], T.prototype, "disabled", 2),
    F([n$1()], T.prototype, "iconLeft", 2),
    F([n$1()], T.prototype, "iconRight", 2),
    F([n$1()], T.prototype, "onClick", 2),
    F([n$1()], T.prototype, "variant", 2),
    (T = F([e$2("wcm-button")], T));
const nt = i$3`:host{display:inline-block}button{padding:0 15px 1px;height:40px;border-radius:var(--wcm-button-border-radius);color:var(--wcm-accent-fill-color);background-color:var(--wcm-accent-color)}button::after{content:'';top:0;bottom:0;left:0;right:0;position:absolute;background-color:transparent;border-radius:inherit;transition:background-color .2s ease;border:1px solid var(--wcm-color-overlay)}button:active::after{background-color:var(--wcm-color-overlay)}button:disabled{padding-bottom:0;background-color:var(--wcm-color-bg-3);color:var(--wcm-color-fg-3)}.wcm-secondary{color:var(--wcm-accent-color);background-color:transparent}.wcm-secondary::after{display:none}@media(hover:hover){button:hover::after{background-color:var(--wcm-color-overlay)}}`;
var ct = Object.defineProperty,
    st = Object.getOwnPropertyDescriptor,
    ue = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? st(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && ct(o, r, t), t;
    };
let ee = class extends s {
    constructor() {
        super(...arguments), (this.disabled = !1), (this.variant = "primary");
    }
    render() {
        const e = { "wcm-secondary": this.variant === "secondary" };
        return x`<button ?disabled="${this.disabled}" class="${o(e)}"><slot></slot></button>`;
    }
};
(ee.styles = [h.globalCss, nt]),
    ue([n$1({ type: Boolean })], ee.prototype, "disabled", 2),
    ue([n$1()], ee.prototype, "variant", 2),
    (ee = ue([e$2("wcm-button-big")], ee));
const dt = i$3`:host{background-color:var(--wcm-color-bg-2);border-top:1px solid var(--wcm-color-bg-3)}div{padding:10px 20px;display:inherit;flex-direction:inherit;align-items:inherit;width:inherit;justify-content:inherit}`;
var wt = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let be = class extends s {
    render() {
        return x`<div><slot></slot></div>`;
    }
};
(be.styles = [h.globalCss, dt]), (be = wt([e$2("wcm-info-footer")], be));
const v = {
        CROSS_ICON: b`<svg width="12" height="12" viewBox="0 0 12 12"><path d="M9.94 11A.75.75 0 1 0 11 9.94L7.414 6.353a.5.5 0 0 1 0-.708L11 2.061A.75.75 0 1 0 9.94 1L6.353 4.586a.5.5 0 0 1-.708 0L2.061 1A.75.75 0 0 0 1 2.06l3.586 3.586a.5.5 0 0 1 0 .708L1 9.939A.75.75 0 1 0 2.06 11l3.586-3.586a.5.5 0 0 1 .708 0L9.939 11Z" fill="#fff"/></svg>`,
        WALLET_CONNECT_LOGO: b`<svg width="178" height="29" viewBox="0 0 178 29" id="wcm-wc-logo"><path d="M10.683 7.926c5.284-5.17 13.85-5.17 19.134 0l.636.623a.652.652 0 0 1 0 .936l-2.176 2.129a.343.343 0 0 1-.478 0l-.875-.857c-3.686-3.607-9.662-3.607-13.348 0l-.937.918a.343.343 0 0 1-.479 0l-2.175-2.13a.652.652 0 0 1 0-.936l.698-.683Zm23.633 4.403 1.935 1.895a.652.652 0 0 1 0 .936l-8.73 8.543a.687.687 0 0 1-.956 0L20.37 17.64a.172.172 0 0 0-.239 0l-6.195 6.063a.687.687 0 0 1-.957 0l-8.73-8.543a.652.652 0 0 1 0-.936l1.936-1.895a.687.687 0 0 1 .957 0l6.196 6.064a.172.172 0 0 0 .239 0l6.195-6.064a.687.687 0 0 1 .957 0l6.196 6.064a.172.172 0 0 0 .24 0l6.195-6.064a.687.687 0 0 1 .956 0ZM48.093 20.948l2.338-9.355c.139-.515.258-1.07.416-1.942.12.872.258 1.427.357 1.942l2.022 9.355h4.181l3.528-13.874h-3.21l-1.943 8.523a24.825 24.825 0 0 0-.456 2.457c-.158-.931-.317-1.625-.495-2.438l-1.883-8.542h-4.201l-2.042 8.542a41.204 41.204 0 0 0-.475 2.438 41.208 41.208 0 0 0-.476-2.438l-1.903-8.542h-3.349l3.508 13.874h4.083ZM63.33 21.304c1.585 0 2.596-.654 3.11-1.605-.059.297-.078.595-.078.892v.357h2.655V15.22c0-2.735-1.248-4.32-4.3-4.32-2.636 0-4.36 1.466-4.52 3.487h2.914c.1-.891.734-1.426 1.705-1.426.911 0 1.407.515 1.407 1.11 0 .435-.258.693-1.03.792l-1.388.159c-2.061.257-3.825 1.01-3.825 3.19 0 1.982 1.645 3.092 3.35 3.092Zm.891-2.041c-.773 0-1.348-.436-1.348-1.19 0-.733.655-1.09 1.645-1.268l.674-.119c.575-.118.892-.218 1.09-.396v.912c0 1.228-.892 2.06-2.06 2.06ZM70.398 7.074v13.874h2.874V7.074h-2.874ZM74.934 7.074v13.874h2.874V7.074h-2.874ZM84.08 21.304c2.735 0 4.5-1.546 4.697-3.567h-2.893c-.139.892-.892 1.387-1.804 1.387-1.228 0-2.12-.99-2.14-2.358h6.897v-.555c0-3.21-1.764-5.312-4.816-5.312-2.933 0-4.994 2.062-4.994 5.173 0 3.37 2.12 5.232 5.053 5.232Zm-2.16-6.421c.119-1.11.932-1.922 2.081-1.922 1.11 0 1.883.772 1.903 1.922H81.92ZM94.92 21.146c.633 0 1.248-.1 1.525-.179v-2.18c-.218.04-.475.06-.693.06-1.05 0-1.427-.595-1.427-1.566v-3.805h2.338v-2.24h-2.338V7.788H91.47v3.448H89.37v2.24h2.1v4.201c0 2.3 1.15 3.469 3.45 3.469ZM104.62 21.304c3.924 0 6.302-2.299 6.599-5.608h-3.111c-.238 1.803-1.506 3.032-3.369 3.032-2.2 0-3.746-1.784-3.746-4.796 0-2.953 1.605-4.638 3.805-4.638 1.883 0 2.953 1.15 3.171 2.834h3.191c-.317-3.448-2.854-5.41-6.342-5.41-3.984 0-7.036 2.695-7.036 7.214 0 4.677 2.676 7.372 6.838 7.372ZM117.449 21.304c2.993 0 5.114-1.882 5.114-5.172 0-3.23-2.121-5.233-5.114-5.233-2.972 0-5.093 2.002-5.093 5.233 0 3.29 2.101 5.172 5.093 5.172Zm0-2.22c-1.327 0-2.18-1.09-2.18-2.952 0-1.903.892-2.973 2.18-2.973 1.308 0 2.2 1.07 2.2 2.973 0 1.862-.872 2.953-2.2 2.953ZM126.569 20.948v-5.689c0-1.208.753-2.1 1.823-2.1 1.011 0 1.606.773 1.606 2.06v5.729h2.873v-6.144c0-2.339-1.229-3.905-3.428-3.905-1.526 0-2.458.734-2.953 1.606a5.31 5.31 0 0 0 .079-.892v-.377h-2.874v9.712h2.874ZM137.464 20.948v-5.689c0-1.208.753-2.1 1.823-2.1 1.011 0 1.606.773 1.606 2.06v5.729h2.873v-6.144c0-2.339-1.228-3.905-3.428-3.905-1.526 0-2.458.734-2.953 1.606a5.31 5.31 0 0 0 .079-.892v-.377h-2.874v9.712h2.874ZM149.949 21.304c2.735 0 4.499-1.546 4.697-3.567h-2.893c-.139.892-.892 1.387-1.804 1.387-1.228 0-2.12-.99-2.14-2.358h6.897v-.555c0-3.21-1.764-5.312-4.816-5.312-2.933 0-4.994 2.062-4.994 5.173 0 3.37 2.12 5.232 5.053 5.232Zm-2.16-6.421c.119-1.11.932-1.922 2.081-1.922 1.11 0 1.883.772 1.903 1.922h-3.984ZM160.876 21.304c3.013 0 4.658-1.645 4.975-4.201h-2.874c-.099 1.07-.713 1.982-2.001 1.982-1.309 0-2.2-1.21-2.2-2.993 0-1.942 1.03-2.933 2.259-2.933 1.209 0 1.803.872 1.883 1.882h2.873c-.218-2.358-1.823-4.142-4.776-4.142-2.874 0-5.153 1.903-5.153 5.193 0 3.25 1.923 5.212 5.014 5.212ZM172.067 21.146c.634 0 1.248-.1 1.526-.179v-2.18c-.218.04-.476.06-.694.06-1.05 0-1.427-.595-1.427-1.566v-3.805h2.339v-2.24h-2.339V7.788h-2.854v3.448h-2.1v2.24h2.1v4.201c0 2.3 1.15 3.469 3.449 3.469Z" fill="#fff"/></svg>`,
        WALLET_CONNECT_ICON: b`<svg width="28" height="20" viewBox="0 0 28 20"><g clip-path="url(#a)"><path d="M7.386 6.482c3.653-3.576 9.575-3.576 13.228 0l.44.43a.451.451 0 0 1 0 .648L19.55 9.033a.237.237 0 0 1-.33 0l-.606-.592c-2.548-2.496-6.68-2.496-9.228 0l-.648.634a.237.237 0 0 1-.33 0L6.902 7.602a.451.451 0 0 1 0-.647l.483-.473Zm16.338 3.046 1.339 1.31a.451.451 0 0 1 0 .648l-6.035 5.909a.475.475 0 0 1-.662 0L14.083 13.2a.119.119 0 0 0-.166 0l-4.283 4.194a.475.475 0 0 1-.662 0l-6.035-5.91a.451.451 0 0 1 0-.647l1.338-1.31a.475.475 0 0 1 .662 0l4.283 4.194c.046.044.12.044.166 0l4.283-4.194a.475.475 0 0 1 .662 0l4.283 4.194c.046.044.12.044.166 0l4.283-4.194a.475.475 0 0 1 .662 0Z" fill="#000000"/></g><defs><clipPath id="a"><path fill="#ffffff" d="M0 0h28v20H0z"/></clipPath></defs></svg>`,
        WALLET_CONNECT_ICON_COLORED: b`<svg width="96" height="96" fill="none"><path fill="#fff" d="M25.322 33.597c12.525-12.263 32.83-12.263 45.355 0l1.507 1.476a1.547 1.547 0 0 1 0 2.22l-5.156 5.048a.814.814 0 0 1-1.134 0l-2.074-2.03c-8.737-8.555-22.903-8.555-31.64 0l-2.222 2.175a.814.814 0 0 1-1.134 0l-5.156-5.049a1.547 1.547 0 0 1 0-2.22l1.654-1.62Zm56.019 10.44 4.589 4.494a1.547 1.547 0 0 1 0 2.22l-20.693 20.26a1.628 1.628 0 0 1-2.267 0L48.283 56.632a.407.407 0 0 0-.567 0L33.03 71.012a1.628 1.628 0 0 1-2.268 0L10.07 50.75a1.547 1.547 0 0 1 0-2.22l4.59-4.494a1.628 1.628 0 0 1 2.267 0l14.687 14.38c.156.153.41.153.567 0l14.685-14.38a1.628 1.628 0 0 1 2.268 0l14.687 14.38c.156.153.41.153.567 0l14.686-14.38a1.628 1.628 0 0 1 2.268 0Z"/><path stroke="#000" d="M25.672 33.954c12.33-12.072 32.325-12.072 44.655 0l1.508 1.476a1.047 1.047 0 0 1 0 1.506l-5.157 5.048a.314.314 0 0 1-.434 0l-2.074-2.03c-8.932-8.746-23.409-8.746-32.34 0l-2.222 2.174a.314.314 0 0 1-.434 0l-5.157-5.048a1.047 1.047 0 0 1 0-1.506l1.655-1.62Zm55.319 10.44 4.59 4.494a1.047 1.047 0 0 1 0 1.506l-20.694 20.26a1.128 1.128 0 0 1-1.568 0l-14.686-14.38a.907.907 0 0 0-1.267 0L32.68 70.655a1.128 1.128 0 0 1-1.568 0L10.42 50.394a1.047 1.047 0 0 1 0-1.506l4.59-4.493a1.128 1.128 0 0 1 1.567 0l14.687 14.379a.907.907 0 0 0 1.266 0l-.35-.357.35.357 14.686-14.38a1.128 1.128 0 0 1 1.568 0l14.687 14.38a.907.907 0 0 0 1.267 0l14.686-14.38a1.128 1.128 0 0 1 1.568 0Z"/></svg>`,
        BACK_ICON: b`<svg width="10" height="18" viewBox="0 0 10 18"><path fill-rule="evenodd" clip-rule="evenodd" d="M8.735.179a.75.75 0 0 1 .087 1.057L2.92 8.192a1.25 1.25 0 0 0 0 1.617l5.902 6.956a.75.75 0 1 1-1.144.97L1.776 10.78a2.75 2.75 0 0 1 0-3.559L7.678.265A.75.75 0 0 1 8.735.18Z" fill="#fff"/></svg>`,
        COPY_ICON: b`<svg width="24" height="24" fill="none"><path fill="#fff" fill-rule="evenodd" d="M7.01 7.01c.03-1.545.138-2.5.535-3.28A5 5 0 0 1 9.73 1.545C10.8 1 12.2 1 15 1c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 4.8 23 6.2 23 9c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185c-.78.397-1.735.505-3.28.534l-.001.01c-.03 1.54-.138 2.493-.534 3.27a5 5 0 0 1-2.185 2.186C13.2 23 11.8 23 9 23c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C1 19.2 1 17.8 1 15c0-2.8 0-4.2.545-5.27A5 5 0 0 1 3.73 7.545C4.508 7.149 5.46 7.04 7 7.01h.01ZM15 15.5c-1.425 0-2.403-.001-3.162-.063-.74-.06-1.139-.172-1.427-.319a3.5 3.5 0 0 1-1.53-1.529c-.146-.288-.257-.686-.318-1.427C8.501 11.403 8.5 10.425 8.5 9c0-1.425.001-2.403.063-3.162.06-.74.172-1.139.318-1.427a3.5 3.5 0 0 1 1.53-1.53c.288-.146.686-.257 1.427-.318.759-.062 1.737-.063 3.162-.063 1.425 0 2.403.001 3.162.063.74.06 1.139.172 1.427.318a3.5 3.5 0 0 1 1.53 1.53c.146.288.257.686.318 1.427.062.759.063 1.737.063 3.162 0 1.425-.001 2.403-.063 3.162-.06.74-.172 1.139-.319 1.427a3.5 3.5 0 0 1-1.529 1.53c-.288.146-.686.257-1.427.318-.759.062-1.737.063-3.162.063ZM7 8.511c-.444.009-.825.025-1.162.052-.74.06-1.139.172-1.427.318a3.5 3.5 0 0 0-1.53 1.53c-.146.288-.257.686-.318 1.427-.062.759-.063 1.737-.063 3.162 0 1.425.001 2.403.063 3.162.06.74.172 1.139.318 1.427a3.5 3.5 0 0 0 1.53 1.53c.288.146.686.257 1.427.318.759.062 1.737.063 3.162.063 1.425 0 2.403-.001 3.162-.063.74-.06 1.139-.172 1.427-.319a3.5 3.5 0 0 0 1.53-1.53c.146-.287.257-.685.318-1.426.027-.337.043-.718.052-1.162H15c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C7 13.2 7 11.8 7 9v-.489Z" clip-rule="evenodd"/></svg>`,
        RETRY_ICON: b`<svg width="15" height="16" viewBox="0 0 15 16"><path d="M6.464 2.03A.75.75 0 0 0 5.403.97L2.08 4.293a1 1 0 0 0 0 1.414L5.403 9.03a.75.75 0 0 0 1.06-1.06L4.672 6.177a.25.25 0 0 1 .177-.427h2.085a4 4 0 1 1-3.93 4.746c-.077-.407-.405-.746-.82-.746-.414 0-.755.338-.7.748a5.501 5.501 0 1 0 5.45-6.248H4.848a.25.25 0 0 1-.177-.427L6.464 2.03Z" fill="#fff"/></svg>`,
        DESKTOP_ICON: b`<svg width="16" height="16" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M0 5.98c0-1.85 0-2.775.394-3.466a3 3 0 0 1 1.12-1.12C2.204 1 3.13 1 4.98 1h6.04c1.85 0 2.775 0 3.466.394a3 3 0 0 1 1.12 1.12C16 3.204 16 4.13 16 5.98v1.04c0 1.85 0 2.775-.394 3.466a3 3 0 0 1-1.12 1.12C13.796 12 12.87 12 11.02 12H4.98c-1.85 0-2.775 0-3.466-.394a3 3 0 0 1-1.12-1.12C0 9.796 0 8.87 0 7.02V5.98ZM4.98 2.5h6.04c.953 0 1.568.001 2.034.043.446.04.608.108.69.154a1.5 1.5 0 0 1 .559.56c.046.08.114.243.154.69.042.465.043 1.08.043 2.033v1.04c0 .952-.001 1.568-.043 2.034-.04.446-.108.608-.154.69a1.499 1.499 0 0 1-.56.559c-.08.046-.243.114-.69.154-.466.042-1.08.043-2.033.043H4.98c-.952 0-1.568-.001-2.034-.043-.446-.04-.608-.108-.69-.154a1.5 1.5 0 0 1-.559-.56c-.046-.08-.114-.243-.154-.69-.042-.465-.043-1.08-.043-2.033V5.98c0-.952.001-1.568.043-2.034.04-.446.108-.608.154-.69a1.5 1.5 0 0 1 .56-.559c.08-.046.243-.114.69-.154.465-.042 1.08-.043 2.033-.043Z" fill="#fff"/><path d="M4 14.25a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Z" fill="#fff"/></svg>`,
        MOBILE_ICON: b`<svg width="16" height="16" viewBox="0 0 16 16"><path d="M6.75 5a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M3 4.98c0-1.85 0-2.775.394-3.466a3 3 0 0 1 1.12-1.12C5.204 0 6.136 0 8 0s2.795 0 3.486.394a3 3 0 0 1 1.12 1.12C13 2.204 13 3.13 13 4.98v6.04c0 1.85 0 2.775-.394 3.466a3 3 0 0 1-1.12 1.12C10.796 16 9.864 16 8 16s-2.795 0-3.486-.394a3 3 0 0 1-1.12-1.12C3 13.796 3 12.87 3 11.02V4.98Zm8.5 0v6.04c0 .953-.001 1.568-.043 2.034-.04.446-.108.608-.154.69a1.499 1.499 0 0 1-.56.559c-.08.045-.242.113-.693.154-.47.042-1.091.043-2.05.043-.959 0-1.58-.001-2.05-.043-.45-.04-.613-.109-.693-.154a1.5 1.5 0 0 1-.56-.56c-.046-.08-.114-.243-.154-.69-.042-.466-.043-1.08-.043-2.033V4.98c0-.952.001-1.568.043-2.034.04-.446.108-.608.154-.69a1.5 1.5 0 0 1 .56-.559c.08-.045.243-.113.693-.154C6.42 1.501 7.041 1.5 8 1.5c.959 0 1.58.001 2.05.043.45.04.613.109.693.154a1.5 1.5 0 0 1 .56.56c.046.08.114.243.154.69.042.465.043 1.08.043 2.033Z" fill="#fff"/></svg>`,
        ARROW_DOWN_ICON: b`<svg width="14" height="14" viewBox="0 0 14 14"><path d="M2.28 7.47a.75.75 0 0 0-1.06 1.06l5.25 5.25a.75.75 0 0 0 1.06 0l5.25-5.25a.75.75 0 0 0-1.06-1.06l-3.544 3.543a.25.25 0 0 1-.426-.177V.75a.75.75 0 0 0-1.5 0v10.086a.25.25 0 0 1-.427.176L2.28 7.47Z" fill="#fff"/></svg>`,
        ARROW_UP_RIGHT_ICON: b`<svg width="15" height="14" fill="none"><path d="M4.5 1.75A.75.75 0 0 1 5.25 1H12a1.5 1.5 0 0 1 1.5 1.5v6.75a.75.75 0 0 1-1.5 0V4.164a.25.25 0 0 0-.427-.176L4.061 11.5A.75.75 0 0 1 3 10.44l7.513-7.513a.25.25 0 0 0-.177-.427H5.25a.75.75 0 0 1-.75-.75Z" fill="#fff"/></svg>`,
        ARROW_RIGHT_ICON: b`<svg width="6" height="14" viewBox="0 0 6 14"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.181 1.099a.75.75 0 0 1 1.024.279l2.433 4.258a2.75 2.75 0 0 1 0 2.729l-2.433 4.257a.75.75 0 1 1-1.303-.744L4.335 7.62a1.25 1.25 0 0 0 0-1.24L1.902 2.122a.75.75 0 0 1 .28-1.023Z" fill="#fff"/></svg>`,
        QRCODE_ICON: b`<svg width="25" height="24" viewBox="0 0 25 24"><path d="M23.748 9a.748.748 0 0 0 .748-.752c-.018-2.596-.128-4.07-.784-5.22a6 6 0 0 0-2.24-2.24c-1.15-.656-2.624-.766-5.22-.784a.748.748 0 0 0-.752.748c0 .414.335.749.748.752 1.015.007 1.82.028 2.494.088.995.09 1.561.256 1.988.5.7.398 1.28.978 1.679 1.678.243.427.41.993.498 1.988.061.675.082 1.479.09 2.493a.753.753 0 0 0 .75.749ZM3.527.788C4.677.132 6.152.022 8.747.004A.748.748 0 0 1 9.5.752a.753.753 0 0 1-.749.752c-1.014.007-1.818.028-2.493.088-.995.09-1.561.256-1.988.5-.7.398-1.28.978-1.679 1.678-.243.427-.41.993-.499 1.988-.06.675-.081 1.479-.088 2.493A.753.753 0 0 1 1.252 9a.748.748 0 0 1-.748-.752c.018-2.596.128-4.07.784-5.22a6 6 0 0 1 2.24-2.24ZM1.252 15a.748.748 0 0 0-.748.752c.018 2.596.128 4.07.784 5.22a6 6 0 0 0 2.24 2.24c1.15.656 2.624.766 5.22.784a.748.748 0 0 0 .752-.748.753.753 0 0 0-.749-.752c-1.014-.007-1.818-.028-2.493-.089-.995-.089-1.561-.255-1.988-.498a4.5 4.5 0 0 1-1.679-1.68c-.243-.426-.41-.992-.499-1.987-.06-.675-.081-1.479-.088-2.493A.753.753 0 0 0 1.252 15ZM22.996 15.749a.753.753 0 0 1 .752-.749c.415 0 .751.338.748.752-.018 2.596-.128 4.07-.784 5.22a6 6 0 0 1-2.24 2.24c-1.15.656-2.624.766-5.22.784a.748.748 0 0 1-.752-.748c0-.414.335-.749.748-.752 1.015-.007 1.82-.028 2.494-.089.995-.089 1.561-.255 1.988-.498a4.5 4.5 0 0 0 1.679-1.68c.243-.426.41-.992.498-1.987.061-.675.082-1.479.09-2.493Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M7 4a2.5 2.5 0 0 0-2.5 2.5v2A2.5 2.5 0 0 0 7 11h2a2.5 2.5 0 0 0 2.5-2.5v-2A2.5 2.5 0 0 0 9 4H7Zm2 1.5H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1ZM13.5 6.5A2.5 2.5 0 0 1 16 4h2a2.5 2.5 0 0 1 2.5 2.5v2A2.5 2.5 0 0 1 18 11h-2a2.5 2.5 0 0 1-2.5-2.5v-2Zm2.5-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1ZM7 13a2.5 2.5 0 0 0-2.5 2.5v2A2.5 2.5 0 0 0 7 20h2a2.5 2.5 0 0 0 2.5-2.5v-2A2.5 2.5 0 0 0 9 13H7Zm2 1.5H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z" fill="#fff"/><path d="M13.5 15.5c0-.465 0-.697.038-.89a2 2 0 0 1 1.572-1.572C15.303 13 15.535 13 16 13v2.5h-2.5ZM18 13c.465 0 .697 0 .89.038a2 2 0 0 1 1.572 1.572c.038.193.038.425.038.89H18V13ZM18 17.5h2.5c0 .465 0 .697-.038.89a2 2 0 0 1-1.572 1.572C18.697 20 18.465 20 18 20v-2.5ZM13.5 17.5H16V20c-.465 0-.697 0-.89-.038a2 2 0 0 1-1.572-1.572c-.038-.193-.038-.425-.038-.89Z" fill="#fff"/></svg>`,
        SCAN_ICON: b`<svg width="16" height="16" fill="none"><path fill="#fff" d="M10 15.216c0 .422.347.763.768.74 1.202-.064 2.025-.222 2.71-.613a5.001 5.001 0 0 0 1.865-1.866c.39-.684.549-1.507.613-2.709a.735.735 0 0 0-.74-.768.768.768 0 0 0-.76.732c-.009.157-.02.306-.032.447-.073.812-.206 1.244-.384 1.555-.31.545-.761.996-1.306 1.306-.311.178-.743.311-1.555.384-.141.013-.29.023-.447.032a.768.768 0 0 0-.732.76ZM10 .784c0 .407.325.737.732.76.157.009.306.02.447.032.812.073 1.244.206 1.555.384a3.5 3.5 0 0 1 1.306 1.306c.178.311.311.743.384 1.555.013.142.023.29.032.447a.768.768 0 0 0 .76.732.734.734 0 0 0 .74-.768c-.064-1.202-.222-2.025-.613-2.71A5 5 0 0 0 13.477.658c-.684-.39-1.507-.549-2.709-.613a.735.735 0 0 0-.768.74ZM5.232.044A.735.735 0 0 1 6 .784a.768.768 0 0 1-.732.76c-.157.009-.305.02-.447.032-.812.073-1.244.206-1.555.384A3.5 3.5 0 0 0 1.96 3.266c-.178.311-.311.743-.384 1.555-.013.142-.023.29-.032.447A.768.768 0 0 1 .784 6a.735.735 0 0 1-.74-.768c.064-1.202.222-2.025.613-2.71A5 5 0 0 1 2.523.658C3.207.267 4.03.108 5.233.044ZM5.268 14.456a.768.768 0 0 1 .732.76.734.734 0 0 1-.768.74c-1.202-.064-2.025-.222-2.71-.613a5 5 0 0 1-1.865-1.866c-.39-.684-.549-1.507-.613-2.709A.735.735 0 0 1 .784 10c.407 0 .737.325.76.732.009.157.02.306.032.447.073.812.206 1.244.384 1.555a3.5 3.5 0 0 0 1.306 1.306c.311.178.743.311 1.555.384.142.013.29.023.447.032Z"/></svg>`,
        CHECKMARK_ICON: b`<svg width="13" height="12" viewBox="0 0 13 12"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.155.132a.75.75 0 0 1 .232 1.035L5.821 11.535a1 1 0 0 1-1.626.09L.665 7.21a.75.75 0 1 1 1.17-.937L4.71 9.867a.25.25 0 0 0 .406-.023L11.12.364a.75.75 0 0 1 1.035-.232Z" fill="#fff"/></svg>`,
        SEARCH_ICON: b`<svg width="20" height="21"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.432 13.992c-.354-.353-.91-.382-1.35-.146a5.5 5.5 0 1 1 2.265-2.265c-.237.441-.208.997.145 1.35l3.296 3.296a.75.75 0 1 1-1.06 1.061l-3.296-3.296Zm.06-5a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" fill="#949E9E"/></svg>`,
        WALLET_PLACEHOLDER: b`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#q)"><path id="wallet-placeholder-fill" fill="#fff" d="M0 24.9c0-9.251 0-13.877 1.97-17.332a15 15 0 0 1 5.598-5.597C11.023 0 15.648 0 24.9 0h10.2c9.252 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.023 60 15.648 60 24.9v10.2c0 9.252 0 13.877-1.97 17.332a15.001 15.001 0 0 1-5.598 5.597C48.977 60 44.352 60 35.1 60H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.352 0 35.1V24.9Z"/><path id="wallet-placeholder-dash" stroke="#000" stroke-dasharray="4 4" stroke-width="1.5" d="M.04 41.708a231.598 231.598 0 0 1-.039-4.403l.75-.001L.75 35.1v-2.55H0v-5.1h.75V24.9l.001-2.204h-.75c.003-1.617.011-3.077.039-4.404l.75.016c.034-1.65.099-3.08.218-4.343l-.746-.07c.158-1.678.412-3.083.82-4.316l.713.236c.224-.679.497-1.296.827-1.875a14.25 14.25 0 0 1 1.05-1.585L3.076 5.9A15 15 0 0 1 5.9 3.076l.455.596a14.25 14.25 0 0 1 1.585-1.05c.579-.33 1.196-.603 1.875-.827l-.236-.712C10.812.674 12.217.42 13.895.262l.07.746C15.23.89 16.66.824 18.308.79l-.016-.75C19.62.012 21.08.004 22.695.001l.001.75L24.9.75h2.55V0h5.1v.75h2.55l2.204.001v-.75c1.617.003 3.077.011 4.404.039l-.016.75c1.65.034 3.08.099 4.343.218l.07-.746c1.678.158 3.083.412 4.316.82l-.236.713c.679.224 1.296.497 1.875.827a14.24 14.24 0 0 1 1.585 1.05l.455-.596A14.999 14.999 0 0 1 56.924 5.9l-.596.455c.384.502.735 1.032 1.05 1.585.33.579.602 1.196.827 1.875l.712-.236c.409 1.233.663 2.638.822 4.316l-.747.07c.119 1.264.184 2.694.218 4.343l.75-.016c.028 1.327.036 2.787.039 4.403l-.75.001.001 2.204v2.55H60v5.1h-.75v2.55l-.001 2.204h.75a231.431 231.431 0 0 1-.039 4.404l-.75-.016c-.034 1.65-.099 3.08-.218 4.343l.747.07c-.159 1.678-.413 3.083-.822 4.316l-.712-.236a10.255 10.255 0 0 1-.827 1.875 14.242 14.242 0 0 1-1.05 1.585l.596.455a14.997 14.997 0 0 1-2.824 2.824l-.455-.596c-.502.384-1.032.735-1.585 1.05-.579.33-1.196.602-1.875.827l.236.712c-1.233.409-2.638.663-4.316.822l-.07-.747c-1.264.119-2.694.184-4.343.218l.016.75c-1.327.028-2.787.036-4.403.039l-.001-.75-2.204.001h-2.55V60h-5.1v-.75H24.9l-2.204-.001v.75a231.431 231.431 0 0 1-4.404-.039l.016-.75c-1.65-.034-3.08-.099-4.343-.218l-.07.747c-1.678-.159-3.083-.413-4.316-.822l.236-.712a10.258 10.258 0 0 1-1.875-.827 14.252 14.252 0 0 1-1.585-1.05l-.455.596A14.999 14.999 0 0 1 3.076 54.1l.596-.455a14.24 14.24 0 0 1-1.05-1.585 10.259 10.259 0 0 1-.827-1.875l-.712.236C.674 49.188.42 47.783.262 46.105l.746-.07C.89 44.77.824 43.34.79 41.692l-.75.016Z"/><path fill="#fff" fill-rule="evenodd" d="M35.643 32.145c-.297-.743-.445-1.114-.401-1.275a.42.42 0 0 1 .182-.27c.134-.1.463-.1 1.123-.1.742 0 1.499.046 2.236-.05a6 6 0 0 0 5.166-5.166c.051-.39.051-.855.051-1.784 0-.928 0-1.393-.051-1.783a6 6 0 0 0-5.166-5.165c-.39-.052-.854-.052-1.783-.052h-7.72c-4.934 0-7.401 0-9.244 1.051a8 8 0 0 0-2.985 2.986C16.057 22.28 16.003 24.58 16 29 15.998 31.075 16 33.15 16 35.224A7.778 7.778 0 0 0 23.778 43H28.5c1.394 0 2.09 0 2.67-.116a6 6 0 0 0 4.715-4.714c.115-.58.115-1.301.115-2.744 0-1.31 0-1.964-.114-2.49a4.998 4.998 0 0 0-.243-.792Z" clip-rule="evenodd"/><path fill="#9EA9A9" fill-rule="evenodd" d="M37 18h-7.72c-2.494 0-4.266.002-5.647.126-1.361.122-2.197.354-2.854.728a6.5 6.5 0 0 0-2.425 2.426c-.375.657-.607 1.492-.729 2.853-.11 1.233-.123 2.777-.125 4.867 0 .7 0 1.05.097 1.181.096.13.182.181.343.2.163.02.518-.18 1.229-.581a6.195 6.195 0 0 1 3.053-.8H37c.977 0 1.32-.003 1.587-.038a4.5 4.5 0 0 0 3.874-3.874c.036-.268.039-.611.039-1.588 0-.976-.003-1.319-.038-1.587a4.5 4.5 0 0 0-3.875-3.874C38.32 18.004 37.977 18 37 18Zm-7.364 12.5h-7.414a4.722 4.722 0 0 0-4.722 4.723 6.278 6.278 0 0 0 6.278 6.278H28.5c1.466 0 1.98-.008 2.378-.087a4.5 4.5 0 0 0 3.535-3.536c.08-.397.087-.933.087-2.451 0-1.391-.009-1.843-.08-2.17a3.5 3.5 0 0 0-2.676-2.676c-.328-.072-.762-.08-2.108-.08Z" clip-rule="evenodd"/></g><defs><clipPath id="q"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,
        GLOBE_ICON: b`<svg width="16" height="16" fill="none" viewBox="0 0 16 16"><path fill="#fff" fill-rule="evenodd" d="M15.5 8a7.5 7.5 0 1 1-15 0 7.5 7.5 0 0 1 15 0Zm-2.113.75c.301 0 .535.264.47.558a6.01 6.01 0 0 1-2.867 3.896c-.203.116-.42-.103-.334-.32.409-1.018.691-2.274.797-3.657a.512.512 0 0 1 .507-.477h1.427Zm.47-2.058c.065.294-.169.558-.47.558H11.96a.512.512 0 0 1-.507-.477c-.106-1.383-.389-2.638-.797-3.656-.087-.217.13-.437.333-.32a6.01 6.01 0 0 1 2.868 3.895Zm-4.402.558c.286 0 .515-.24.49-.525-.121-1.361-.429-2.534-.83-3.393-.279-.6-.549-.93-.753-1.112a.535.535 0 0 0-.724 0c-.204.182-.474.513-.754 1.112-.4.859-.708 2.032-.828 3.393a.486.486 0 0 0 .49.525h2.909Zm-5.415 0c.267 0 .486-.21.507-.477.106-1.383.389-2.638.797-3.656.087-.217-.13-.437-.333-.32a6.01 6.01 0 0 0-2.868 3.895c-.065.294.169.558.47.558H4.04ZM2.143 9.308c-.065-.294.169-.558.47-.558H4.04c.267 0 .486.21.507.477.106 1.383.389 2.639.797 3.657.087.217-.13.436-.333.32a6.01 6.01 0 0 1-2.868-3.896Zm3.913-.033a.486.486 0 0 1 .49-.525h2.909c.286 0 .515.24.49.525-.121 1.361-.428 2.535-.83 3.394-.279.6-.549.93-.753 1.112a.535.535 0 0 1-.724 0c-.204-.182-.474-.513-.754-1.112-.4-.859-.708-2.033-.828-3.394Z" clip-rule="evenodd"/></svg>`,
    },
    pt = i$3`.wcm-toolbar-placeholder{top:0;bottom:0;left:0;right:0;width:100%;position:absolute;display:block;pointer-events:none;height:100px;border-radius:calc(var(--wcm-background-border-radius) * .9);background-color:var(--wcm-background-color);background-position:center;background-size:cover}.wcm-toolbar{height:38px;display:flex;position:relative;margin:5px 15px 5px 5px;justify-content:space-between;align-items:center}.wcm-toolbar img,.wcm-toolbar svg{height:28px;object-position:left center;object-fit:contain}#wcm-wc-logo path{fill:var(--wcm-accent-fill-color)}button{width:28px;height:28px;border-radius:var(--wcm-icon-button-border-radius);border:0;display:flex;justify-content:center;align-items:center;cursor:pointer;background-color:var(--wcm-color-bg-1);box-shadow:0 0 0 1px var(--wcm-color-overlay)}button:active{background-color:var(--wcm-color-bg-2)}button svg{display:block;object-position:center}button path{fill:var(--wcm-color-fg-1)}.wcm-toolbar div{display:flex}@media(hover:hover){button:hover{background-color:var(--wcm-color-bg-2)}}`;
var ut = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let fe = class extends s {
    render() {
        return x`<div class="wcm-toolbar-placeholder"></div><div class="wcm-toolbar">${v.WALLET_CONNECT_LOGO} <button @click="${se$1.close}">${v.CROSS_ICON}</button></div>`;
    }
};
(fe.styles = [h.globalCss, pt]), (fe = ut([e$2("wcm-modal-backcard")], fe));
const bt = i$3`main{padding:20px;padding-top:0;width:100%}`;
var yt = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let xe = class extends s {
    render() {
        return x`<main><slot></slot></main>`;
    }
};
(xe.styles = [h.globalCss, bt]), (xe = yt([e$2("wcm-modal-content")], xe));
const $t = i$3`footer{padding:10px;display:flex;flex-direction:column;align-items:inherit;justify-content:inherit;border-top:1px solid var(--wcm-color-bg-2)}`;
var Ot = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let ye = class extends s {
    render() {
        return x`<footer><slot></slot></footer>`;
    }
};
(ye.styles = [h.globalCss, $t]), (ye = Ot([e$2("wcm-modal-footer")], ye));
const Wt = i$3`header{display:flex;justify-content:center;align-items:center;padding:20px;position:relative}.wcm-border{border-bottom:1px solid var(--wcm-color-bg-2);margin-bottom:20px}header button{padding:15px 20px}header button:active{opacity:.5}@media(hover:hover){header button:hover{opacity:.5}}.wcm-back-btn{position:absolute;left:0}.wcm-action-btn{position:absolute;right:0}path{fill:var(--wcm-accent-color)}`;
var It = Object.defineProperty,
    Et = Object.getOwnPropertyDescriptor,
    te = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Et(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && It(o, r, t), t;
    };
let S = class extends s {
    constructor() {
        super(...arguments), (this.title = ""), (this.onAction = void 0), (this.actionIcon = void 0), (this.border = !1);
    }
    backBtnTemplate() {
        return x`<button class="wcm-back-btn" @click="${T$2.goBack}">${v.BACK_ICON}</button>`;
    }
    actionBtnTemplate() {
        return x`<button class="wcm-action-btn" @click="${this.onAction}">${this.actionIcon}</button>`;
    }
    render() {
        const e = { "wcm-border": this.border },
            o$1 = T$2.state.history.length > 1,
            r = this.title ? x`<wcm-text variant="big-bold">${this.title}</wcm-text>` : x`<slot></slot>`;
        return x`<header class="${o(e)}">${o$1 ? this.backBtnTemplate() : null} ${r} ${this.onAction ? this.actionBtnTemplate() : null}</header>`;
    }
};
(S.styles = [h.globalCss, Wt]),
    te([n$1()], S.prototype, "title", 2),
    te([n$1()], S.prototype, "onAction", 2),
    te([n$1()], S.prototype, "actionIcon", 2),
    te([n$1({ type: Boolean })], S.prototype, "border", 2),
    (S = te([e$2("wcm-modal-header")], S));
const c = {
        MOBILE_BREAKPOINT: 600,
        WCM_RECENT_WALLET_DATA: "WCM_RECENT_WALLET_DATA",
        EXPLORER_WALLET_URL: "https://explorer.walletconnect.com/?type=wallet",
        getShadowRootElement(e, o) {
            const r = e.renderRoot.querySelector(o);
            if (!r) throw new Error(`${o} not found`);
            return r;
        },
        getWalletIcon({ id: e, image_id: o }) {
            const { walletImages: r } = y$1.state;
            return r != null && r[e] ? r[e] : o ? te$1.getWalletImageUrl(o) : "";
        },
        getWalletName(e, o = !1) {
            return o && e.length > 8 ? `${e.substring(0, 8)}..` : e;
        },
        isMobileAnimation() {
            return window.innerWidth <= c.MOBILE_BREAKPOINT;
        },
        async preloadImage(e) {
            const o = new Promise((r, a) => {
                const t = new Image();
                (t.onload = r), (t.onerror = a), (t.crossOrigin = "anonymous"), (t.src = e);
            });
            return Promise.race([o, a$2.wait(3e3)]);
        },
        getErrorMessage(e) {
            return e instanceof Error ? e.message : "Unknown Error";
        },
        debounce(e, o = 500) {
            let r;
            return (...a) => {
                function t() {
                    e(...a);
                }
                r && clearTimeout(r), (r = setTimeout(t, o));
            };
        },
        handleMobileLinking(e) {
            const { walletConnectUri: o } = p$1.state,
                { mobile: r, name: a } = e,
                t = r?.native,
                l = r?.universal;
            c.setRecentWallet(e);
            function i(s) {
                let $ = "";
                t ? ($ = a$2.formatUniversalUrl(t, s, a)) : l && ($ = a$2.formatNativeUrl(l, s, a)), a$2.openHref($, "_self");
            }
            o && i(o);
        },
        handleAndroidLinking() {
            const { walletConnectUri: e } = p$1.state;
            e && (a$2.setWalletConnectAndroidDeepLink(e), a$2.openHref(e, "_self"));
        },
        async handleUriCopy() {
            const { walletConnectUri: e } = p$1.state;
            if (e)
                try {
                    await navigator.clipboard.writeText(e), oe$1.openToast("Link copied", "success");
                } catch {
                    oe$1.openToast("Failed to copy", "error");
                }
        },
        getCustomImageUrls() {
            const { walletImages: e } = y$1.state,
                o = Object.values(e ?? {});
            return Object.values(o);
        },
        truncate(e, o = 8) {
            return e.length <= o ? e : `${e.substring(0, 4)}...${e.substring(e.length - 4)}`;
        },
        setRecentWallet(e) {
            try {
                localStorage.setItem(c.WCM_RECENT_WALLET_DATA, JSON.stringify(e));
            } catch {
                console.info("Unable to set recent wallet");
            }
        },
        getRecentWallet() {
            try {
                const e = localStorage.getItem(c.WCM_RECENT_WALLET_DATA);
                return e ? JSON.parse(e) : void 0;
            } catch {
                console.info("Unable to get recent wallet");
            }
        },
        caseSafeIncludes(e, o) {
            return e.toUpperCase().includes(o.toUpperCase());
        },
        openWalletExplorerUrl() {
            a$2.openHref(c.EXPLORER_WALLET_URL, "_blank");
        },
        getCachedRouterWalletPlatforms() {
            const { desktop: e, mobile: o } = a$2.getWalletRouterData(),
                r = Boolean(e?.native),
                a = Boolean(e?.universal),
                t = Boolean(o?.native) || Boolean(o?.universal);
            return { isDesktop: r, isMobile: t, isWeb: a };
        },
        goToConnectingView(e) {
            T$2.setData({ Wallet: e });
            const o = a$2.isMobile(),
                { isDesktop: r, isWeb: a, isMobile: t } = c.getCachedRouterWalletPlatforms();
            o
                ? t
                    ? T$2.push("MobileConnecting")
                    : a
                    ? T$2.push("WebConnecting")
                    : T$2.push("InstallWallet")
                : r
                ? T$2.push("DesktopConnecting")
                : a
                ? T$2.push("WebConnecting")
                : t
                ? T$2.push("MobileQrcodeConnecting")
                : T$2.push("InstallWallet");
        },
    },
    Mt = i$3`.wcm-router{overflow:hidden;will-change:transform}.wcm-content{display:flex;flex-direction:column}`;
var Lt = Object.defineProperty,
    Rt = Object.getOwnPropertyDescriptor,
    $e = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Rt(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Lt(o, r, t), t;
    };
let oe = class extends s {
    constructor() {
        super(),
            (this.view = T$2.state.view),
            (this.prevView = T$2.state.view),
            (this.unsubscribe = void 0),
            (this.oldHeight = "0px"),
            (this.resizeObserver = void 0),
            (this.unsubscribe = T$2.subscribe((e) => {
                this.view !== e.view && this.onChangeRoute();
            }));
    }
    firstUpdated() {
        (this.resizeObserver = new ResizeObserver(([e]) => {
            const o = `${e.contentRect.height}px`;
            this.oldHeight !== "0px" && animate(this.routerEl, { height: [this.oldHeight, o] }, { duration: 0.2 }), (this.oldHeight = o);
        })),
            this.resizeObserver.observe(this.contentEl);
    }
    disconnectedCallback() {
        var e, o;
        (e = this.unsubscribe) == null || e.call(this), (o = this.resizeObserver) == null || o.disconnect();
    }
    get routerEl() {
        return c.getShadowRootElement(this, ".wcm-router");
    }
    get contentEl() {
        return c.getShadowRootElement(this, ".wcm-content");
    }
    viewTemplate() {
        switch (this.view) {
            case "ConnectWallet":
                return x`<wcm-connect-wallet-view></wcm-connect-wallet-view>`;
            case "DesktopConnecting":
                return x`<wcm-desktop-connecting-view></wcm-desktop-connecting-view>`;
            case "MobileConnecting":
                return x`<wcm-mobile-connecting-view></wcm-mobile-connecting-view>`;
            case "WebConnecting":
                return x`<wcm-web-connecting-view></wcm-web-connecting-view>`;
            case "MobileQrcodeConnecting":
                return x`<wcm-mobile-qr-connecting-view></wcm-mobile-qr-connecting-view>`;
            case "WalletExplorer":
                return x`<wcm-wallet-explorer-view></wcm-wallet-explorer-view>`;
            case "Qrcode":
                return x`<wcm-qrcode-view></wcm-qrcode-view>`;
            case "InstallWallet":
                return x`<wcm-install-wallet-view></wcm-install-wallet-view>`;
            default:
                return x`<div>Not Found</div>`;
        }
    }
    async onChangeRoute() {
        await animate(this.routerEl, { opacity: [1, 0], scale: [1, 1.02] }, { duration: 0.15, delay: 0.1 }).finished,
            (this.view = T$2.state.view),
            animate(this.routerEl, { opacity: [0, 1], scale: [0.99, 1] }, { duration: 0.37, delay: 0.05 });
    }
    render() {
        return x`<div class="wcm-router"><div class="wcm-content">${this.viewTemplate()}</div></div>`;
    }
};
(oe.styles = [h.globalCss, Mt]), $e([t$1()], oe.prototype, "view", 2), $e([t$1()], oe.prototype, "prevView", 2), (oe = $e([e$2("wcm-modal-router")], oe));
const At = i$3`div{height:36px;width:max-content;display:flex;justify-content:center;align-items:center;padding:9px 15px 11px;position:absolute;top:12px;box-shadow:0 6px 14px -6px rgba(10,16,31,.3),0 10px 32px -4px rgba(10,16,31,.15);z-index:2;left:50%;transform:translateX(-50%);pointer-events:none;backdrop-filter:blur(20px) saturate(1.8);-webkit-backdrop-filter:blur(20px) saturate(1.8);border-radius:var(--wcm-notification-border-radius);border:1px solid var(--wcm-color-overlay);background-color:var(--wcm-color-overlay)}svg{margin-right:5px}@-moz-document url-prefix(){div{background-color:var(--wcm-color-bg-3)}}.wcm-success path{fill:var(--wcm-accent-color)}.wcm-error path{fill:var(--wcm-error-color)}`;
var Pt = Object.defineProperty,
    Tt = Object.getOwnPropertyDescriptor,
    ze = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Tt(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Pt(o, r, t), t;
    };
let ne = class extends s {
    constructor() {
        super(),
            (this.open = !1),
            (this.unsubscribe = void 0),
            (this.timeout = void 0),
            (this.unsubscribe = oe$1.subscribe((e) => {
                e.open ? ((this.open = !0), (this.timeout = setTimeout(() => oe$1.closeToast(), 2200))) : ((this.open = !1), clearTimeout(this.timeout));
            }));
    }
    disconnectedCallback() {
        var e;
        (e = this.unsubscribe) == null || e.call(this), clearTimeout(this.timeout), oe$1.closeToast();
    }
    render() {
        const { message: e, variant: o$1 } = oe$1.state,
            r = { "wcm-success": o$1 === "success", "wcm-error": o$1 === "error" };
        return this.open
            ? x`<div class="${o(r)}">${o$1 === "success" ? v.CHECKMARK_ICON : null} ${
                  o$1 === "error" ? v.CROSS_ICON : null
              }<wcm-text variant="small-regular">${e}</wcm-text></div>`
            : null;
    }
};
(ne.styles = [h.globalCss, At]), ze([t$1()], ne.prototype, "open", 2), (ne = ze([e$2("wcm-modal-toast")], ne));
const jt = 0.1,
    Ve = 2.5,
    A = 7;
function Ce(e, o, r) {
    return e === o ? !1 : (e - o < 0 ? o - e : e - o) <= r + jt;
}
function _t(e, o) {
    const r = Array.prototype.slice.call(browser.create(e, { errorCorrectionLevel: o }).modules.data, 0),
        a = Math.sqrt(r.length);
    return r.reduce((t, l, i) => (i % a === 0 ? t.push([l]) : t[t.length - 1].push(l)) && t, []);
}
const Dt = {
        generate(e, o, r) {
            const a = "#141414",
                t = "#ffffff",
                l = [],
                i = _t(e, "Q"),
                s = o / i.length,
                $ = [
                    { x: 0, y: 0 },
                    { x: 1, y: 0 },
                    { x: 0, y: 1 },
                ];
            $.forEach(({ x: y, y: u }) => {
                const O = (i.length - A) * s * y,
                    b$1 = (i.length - A) * s * u,
                    E = 0.45;
                for (let M = 0; M < $.length; M += 1) {
                    const V = s * (A - M * 2);
                    l.push(b`<rect fill="${M % 2 === 0 ? a : t}" height="${V}" rx="${V * E}" ry="${V * E}" width="${V}" x="${O + s * M}" y="${b$1 + s * M}">`);
                }
            });
            const f = Math.floor((r + 25) / s),
                Ne = i.length / 2 - f / 2,
                Ze = i.length / 2 + f / 2 - 1,
                Se = [];
            i.forEach((y, u) => {
                y.forEach((O, b) => {
                    if (
                        i[u][b] &&
                        !((u < A && b < A) || (u > i.length - (A + 1) && b < A) || (u < A && b > i.length - (A + 1))) &&
                        !(u > Ne && u < Ze && b > Ne && b < Ze)
                    ) {
                        const E = u * s + s / 2,
                            M = b * s + s / 2;
                        Se.push([E, M]);
                    }
                });
            });
            const J = {};
            return (
                Se.forEach(([y, u]) => {
                    J[y] ? J[y].push(u) : (J[y] = [u]);
                }),
                Object.entries(J)
                    .map(([y, u]) => {
                        const O = u.filter((b) => u.every((E) => !Ce(b, E, s)));
                        return [Number(y), O];
                    })
                    .forEach(([y, u]) => {
                        u.forEach((O) => {
                            l.push(b`<circle cx="${y}" cy="${O}" fill="${a}" r="${s / Ve}">`);
                        });
                    }),
                Object.entries(J)
                    .filter(([y, u]) => u.length > 1)
                    .map(([y, u]) => {
                        const O = u.filter((b) => u.some((E) => Ce(b, E, s)));
                        return [Number(y), O];
                    })
                    .map(([y, u]) => {
                        u.sort((b, E) => (b < E ? -1 : 1));
                        const O = [];
                        for (const b of u) {
                            const E = O.find((M) => M.some((V) => Ce(b, V, s)));
                            E ? E.push(b) : O.push([b]);
                        }
                        return [y, O.map((b) => [b[0], b[b.length - 1]])];
                    })
                    .forEach(([y, u]) => {
                        u.forEach(([O, b$1]) => {
                            l.push(b`<line x1="${y}" x2="${y}" y1="${O}" y2="${b$1}" stroke="${a}" stroke-width="${s / (Ve / 2)}" stroke-linecap="round">`);
                        });
                    }),
                l
            );
        },
    },
    Nt = i$3`@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}div{position:relative;user-select:none;display:block;overflow:hidden;aspect-ratio:1/1;animation:fadeIn ease .2s}.wcm-dark{background-color:#fff;border-radius:var(--wcm-container-border-radius);padding:18px;box-shadow:0 2px 5px #000}svg:first-child,wcm-wallet-image{position:absolute;top:50%;left:50%;transform:translateY(-50%) translateX(-50%)}wcm-wallet-image{transform:translateY(-50%) translateX(-50%)}wcm-wallet-image{width:25%;height:25%;border-radius:var(--wcm-wallet-icon-border-radius)}svg:first-child{transform:translateY(-50%) translateX(-50%) scale(.9)}svg:first-child path:first-child{fill:var(--wcm-accent-color)}svg:first-child path:last-child{stroke:var(--wcm-color-overlay)}`;
var Zt = Object.defineProperty,
    St = Object.getOwnPropertyDescriptor,
    q = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? St(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Zt(o, r, t), t;
    };
let j = class extends s {
    constructor() {
        super(...arguments), (this.uri = ""), (this.size = 0), (this.imageId = void 0), (this.walletId = void 0), (this.imageUrl = void 0);
    }
    svgTemplate() {
        const e = ne$1.state.themeMode === "light" ? this.size : this.size - 36;
        return b`<svg height="${e}" width="${e}">${Dt.generate(this.uri, e, e / 4)}</svg>`;
    }
    render() {
        const e = { "wcm-dark": ne$1.state.themeMode === "dark" };
        return x`<div style="${`width: ${this.size}px`}" class="${o(e)}">${
            this.walletId || this.imageUrl
                ? x`<wcm-wallet-image walletId="${l(this.walletId)}" imageId="${l(this.imageId)}" imageUrl="${l(this.imageUrl)}"></wcm-wallet-image>`
                : v.WALLET_CONNECT_ICON_COLORED
        } ${this.svgTemplate()}</div>`;
    }
};
(j.styles = [h.globalCss, Nt]),
    q([n$1()], j.prototype, "uri", 2),
    q([n$1({ type: Number })], j.prototype, "size", 2),
    q([n$1()], j.prototype, "imageId", 2),
    q([n$1()], j.prototype, "walletId", 2),
    q([n$1()], j.prototype, "imageUrl", 2),
    (j = q([e$2("wcm-qrcode")], j));
const Bt = i$3`:host{position:relative;height:28px;width:80%}input{width:100%;height:100%;line-height:28px!important;border-radius:var(--wcm-input-border-radius);font-style:normal;font-family:-apple-system,system-ui,BlinkMacSystemFont,'Segoe UI',Roboto,Ubuntu,'Helvetica Neue',sans-serif;font-feature-settings:'case' on;font-weight:500;font-size:16px;letter-spacing:-.03em;padding:0 10px 0 34px;transition:.2s all ease;color:var(--wcm-color-fg-1);background-color:var(--wcm-color-bg-3);box-shadow:inset 0 0 0 1px var(--wcm-color-overlay);caret-color:var(--wcm-accent-color)}input::placeholder{color:var(--wcm-color-fg-2)}svg{left:10px;top:4px;pointer-events:none;position:absolute;width:20px;height:20px}input:focus-within{box-shadow:inset 0 0 0 1px var(--wcm-accent-color)}path{fill:var(--wcm-color-fg-2)}`;
var Ut = Object.defineProperty,
    Ht = Object.getOwnPropertyDescriptor,
    Fe = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Ht(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Ut(o, r, t), t;
    };
let ce = class extends s {
    constructor() {
        super(...arguments), (this.onChange = () => null);
    }
    render() {
        return x`<input type="text" @input="${this.onChange}" placeholder="Search wallets"> ${v.SEARCH_ICON}`;
    }
};
(ce.styles = [h.globalCss, Bt]), Fe([n$1()], ce.prototype, "onChange", 2), (ce = Fe([e$2("wcm-search-input")], ce));
const zt = i$3`@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1,150;stroke-dashoffset:0}50%{stroke-dasharray:90,150;stroke-dashoffset:-35}100%{stroke-dasharray:90,150;stroke-dashoffset:-124}}svg{animation:rotate 2s linear infinite;display:flex;justify-content:center;align-items:center}svg circle{stroke-linecap:round;animation:dash 1.5s ease infinite;stroke:var(--wcm-accent-color)}`;
var qt = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let ke = class extends s {
    render() {
        return x`<svg viewBox="0 0 50 50" width="24" height="24"><circle cx="25" cy="25" r="20" fill="none" stroke-width="4" stroke="#fff"/></svg>`;
    }
};
(ke.styles = [h.globalCss, zt]), (ke = qt([e$2("wcm-spinner")], ke));
const Qt = i$3`span{font-style:normal;font-family:var(--wcm-font-family);font-feature-settings:var(--wcm-font-feature-settings)}.wcm-xsmall-bold{font-family:var(--wcm-text-xsmall-bold-font-family);font-weight:var(--wcm-text-xsmall-bold-weight);font-size:var(--wcm-text-xsmall-bold-size);line-height:var(--wcm-text-xsmall-bold-line-height);letter-spacing:var(--wcm-text-xsmall-bold-letter-spacing);text-transform:var(--wcm-text-xsmall-bold-text-transform)}.wcm-xsmall-regular{font-family:var(--wcm-text-xsmall-regular-font-family);font-weight:var(--wcm-text-xsmall-regular-weight);font-size:var(--wcm-text-xsmall-regular-size);line-height:var(--wcm-text-xsmall-regular-line-height);letter-spacing:var(--wcm-text-xsmall-regular-letter-spacing);text-transform:var(--wcm-text-xsmall-regular-text-transform)}.wcm-small-thin{font-family:var(--wcm-text-small-thin-font-family);font-weight:var(--wcm-text-small-thin-weight);font-size:var(--wcm-text-small-thin-size);line-height:var(--wcm-text-small-thin-line-height);letter-spacing:var(--wcm-text-small-thin-letter-spacing);text-transform:var(--wcm-text-small-thin-text-transform)}.wcm-small-regular{font-family:var(--wcm-text-small-regular-font-family);font-weight:var(--wcm-text-small-regular-weight);font-size:var(--wcm-text-small-regular-size);line-height:var(--wcm-text-small-regular-line-height);letter-spacing:var(--wcm-text-small-regular-letter-spacing);text-transform:var(--wcm-text-small-regular-text-transform)}.wcm-medium-regular{font-family:var(--wcm-text-medium-regular-font-family);font-weight:var(--wcm-text-medium-regular-weight);font-size:var(--wcm-text-medium-regular-size);line-height:var(--wcm-text-medium-regular-line-height);letter-spacing:var(--wcm-text-medium-regular-letter-spacing);text-transform:var(--wcm-text-medium-regular-text-transform)}.wcm-big-bold{font-family:var(--wcm-text-big-bold-font-family);font-weight:var(--wcm-text-big-bold-weight);font-size:var(--wcm-text-big-bold-size);line-height:var(--wcm-text-big-bold-line-height);letter-spacing:var(--wcm-text-big-bold-letter-spacing);text-transform:var(--wcm-text-big-bold-text-transform)}:host(*){color:var(--wcm-color-fg-1)}.wcm-color-primary{color:var(--wcm-color-fg-1)}.wcm-color-secondary{color:var(--wcm-color-fg-2)}.wcm-color-tertiary{color:var(--wcm-color-fg-3)}.wcm-color-inverse{color:var(--wcm-accent-fill-color)}.wcm-color-accnt{color:var(--wcm-accent-color)}.wcm-color-error{color:var(--wcm-error-color)}`;
var Kt = Object.defineProperty,
    Yt = Object.getOwnPropertyDescriptor,
    Oe = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Yt(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Kt(o, r, t), t;
    };
let re = class extends s {
    constructor() {
        super(...arguments), (this.variant = "medium-regular"), (this.color = "primary");
    }
    render() {
        const e = {
            "wcm-big-bold": this.variant === "big-bold",
            "wcm-medium-regular": this.variant === "medium-regular",
            "wcm-small-regular": this.variant === "small-regular",
            "wcm-small-thin": this.variant === "small-thin",
            "wcm-xsmall-regular": this.variant === "xsmall-regular",
            "wcm-xsmall-bold": this.variant === "xsmall-bold",
            "wcm-color-primary": this.color === "primary",
            "wcm-color-secondary": this.color === "secondary",
            "wcm-color-tertiary": this.color === "tertiary",
            "wcm-color-inverse": this.color === "inverse",
            "wcm-color-accnt": this.color === "accent",
            "wcm-color-error": this.color === "error",
        };
        return x`<span><slot class="${o(e)}"></slot></span>`;
    }
};
(re.styles = [h.globalCss, Qt]), Oe([n$1()], re.prototype, "variant", 2), Oe([n$1()], re.prototype, "color", 2), (re = Oe([e$2("wcm-text")], re));
const Gt = i$3`button{width:100%;height:100%;border-radius:var(--wcm-button-hover-highlight-border-radius);display:flex;align-items:flex-start}button:active{background-color:var(--wcm-color-overlay)}@media(hover:hover){button:hover{background-color:var(--wcm-color-overlay)}}button>div{width:80px;padding:5px 0;display:flex;flex-direction:column;align-items:center}wcm-text{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center}wcm-wallet-image{height:60px;width:60px;transition:all .2s ease;border-radius:var(--wcm-wallet-icon-border-radius);margin-bottom:5px}.wcm-sublabel{margin-top:2px}`;
var Xt = Object.defineProperty,
    Jt = Object.getOwnPropertyDescriptor,
    _ = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Jt(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Xt(o, r, t), t;
    };
let L = class extends s {
    constructor() {
        super(...arguments),
            (this.onClick = () => null),
            (this.name = ""),
            (this.walletId = ""),
            (this.label = void 0),
            (this.imageId = void 0),
            (this.installed = !1),
            (this.recent = !1);
    }
    sublabelTemplate() {
        return this.recent
            ? x`<wcm-text class="wcm-sublabel" variant="xsmall-bold" color="tertiary">RECENT</wcm-text>`
            : this.installed
            ? x`<wcm-text class="wcm-sublabel" variant="xsmall-bold" color="tertiary">INSTALLED</wcm-text>`
            : null;
    }
    handleClick() {
        R$1.click({ name: "WALLET_BUTTON", walletId: this.walletId }), this.onClick();
    }
    render() {
        var e;
        return x`<button @click="${this.handleClick.bind(this)}"><div><wcm-wallet-image walletId="${this.walletId}" imageId="${l(
            this.imageId
        )}"></wcm-wallet-image><wcm-text variant="xsmall-regular">${
            (e = this.label) != null ? e : c.getWalletName(this.name, !0)
        }</wcm-text>${this.sublabelTemplate()}</div></button>`;
    }
};
(L.styles = [h.globalCss, Gt]),
    _([n$1()], L.prototype, "onClick", 2),
    _([n$1()], L.prototype, "name", 2),
    _([n$1()], L.prototype, "walletId", 2),
    _([n$1()], L.prototype, "label", 2),
    _([n$1()], L.prototype, "imageId", 2),
    _([n$1({ type: Boolean })], L.prototype, "installed", 2),
    _([n$1({ type: Boolean })], L.prototype, "recent", 2),
    (L = _([e$2("wcm-wallet-button")], L));
const eo = i$3`:host{display:block}div{overflow:hidden;position:relative;border-radius:inherit;width:100%;height:100%;background-color:var(--wcm-color-overlay)}svg{position:relative;width:100%;height:100%}div::after{content:'';position:absolute;top:0;bottom:0;left:0;right:0;border-radius:inherit;border:1px solid var(--wcm-color-overlay)}div img{width:100%;height:100%;object-fit:cover;object-position:center}#wallet-placeholder-fill{fill:var(--wcm-color-bg-3)}#wallet-placeholder-dash{stroke:var(--wcm-color-overlay)}`;
var to = Object.defineProperty,
    oo = Object.getOwnPropertyDescriptor,
    se = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? oo(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && to(o, r, t), t;
    };
let Q = class extends s {
    constructor() {
        super(...arguments), (this.walletId = ""), (this.imageId = void 0), (this.imageUrl = void 0);
    }
    render() {
        var e;
        const o = (e = this.imageUrl) != null && e.length ? this.imageUrl : c.getWalletIcon({ id: this.walletId, image_id: this.imageId });
        return x`${o.length ? x`<div><img crossorigin="anonymous" src="${o}" alt="${this.id}"></div>` : v.WALLET_PLACEHOLDER}`;
    }
};
(Q.styles = [h.globalCss, eo]),
    se([n$1()], Q.prototype, "walletId", 2),
    se([n$1()], Q.prototype, "imageId", 2),
    se([n$1()], Q.prototype, "imageUrl", 2),
    (Q = se([e$2("wcm-wallet-image")], Q));
var ro = Object.defineProperty,
    ao = Object.getOwnPropertyDescriptor,
    qe = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? ao(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && ro(o, r, t), t;
    };
let We = class extends s {
    constructor() {
        super(), (this.preload = !0), this.preloadData();
    }
    async loadImages(e) {
        try {
            e != null && e.length && (await Promise.all(e.map(async (o) => c.preloadImage(o))));
        } catch {
            console.info("Unsuccessful attempt at preloading some images", e);
        }
    }
    async preloadListings() {
        if (y$1.state.enableExplorer) {
            await te$1.getRecomendedWallets(), p$1.setIsDataLoaded(!0);
            const { recomendedWallets: e } = te$1.state,
                o = e.map((r) => c.getWalletIcon(r));
            await this.loadImages(o);
        } else p$1.setIsDataLoaded(!0);
    }
    async preloadCustomImages() {
        const e = c.getCustomImageUrls();
        await this.loadImages(e);
    }
    async preloadData() {
        try {
            this.preload && ((this.preload = !1), await Promise.all([this.preloadListings(), this.preloadCustomImages()]));
        } catch (e) {
            console.error(e), oe$1.openToast("Failed preloading", "error");
        }
    }
};
qe([t$1()], We.prototype, "preload", 2), (We = qe([e$2("wcm-explorer-context")], We));
var no = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Qe = class extends s {
    constructor() {
        super(), (this.unsubscribeTheme = void 0), h.setTheme(), (this.unsubscribeTheme = ne$1.subscribe(h.setTheme));
    }
    disconnectedCallback() {
        var e;
        (e = this.unsubscribeTheme) == null || e.call(this);
    }
};
Qe = no([e$2("wcm-theme-context")], Qe);
const co = i$3`@keyframes scroll{0%{transform:translate3d(0,0,0)}100%{transform:translate3d(calc(-70px * 9),0,0)}}.wcm-slider{position:relative;overflow-x:hidden;padding:10px 0;margin:0 -20px;width:calc(100% + 40px)}.wcm-track{display:flex;width:calc(70px * 18);animation:scroll 20s linear infinite;opacity:.7}.wcm-track svg{margin:0 5px}wcm-wallet-image{width:60px;height:60px;margin:0 5px;border-radius:var(--wcm-wallet-icon-border-radius)}.wcm-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between}.wcm-title{display:flex;align-items:center;margin-bottom:10px}.wcm-title svg{margin-right:6px}.wcm-title path{fill:var(--wcm-accent-color)}wcm-modal-footer .wcm-title{padding:0 10px}wcm-button-big{position:absolute;top:50%;left:50%;transform:translateY(-50%) translateX(-50%);filter:drop-shadow(0 0 17px var(--wcm-color-bg-1))}wcm-info-footer{flex-direction:column;align-items:center;display:flex;width:100%;padding:5px 0}wcm-info-footer wcm-text{text-align:center;margin-bottom:15px}#wallet-placeholder-fill{fill:var(--wcm-color-bg-3)}#wallet-placeholder-dash{stroke:var(--wcm-color-overlay)}`;
var ho = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Ie = class extends s {
    onGoToQrcode() {
        T$2.push("Qrcode");
    }
    render() {
        const { recomendedWallets: e } = te$1.state,
            o = [...e, ...e],
            r = a$2.RECOMMENDED_WALLET_AMOUNT * 2;
        return x`<wcm-modal-header title="Connect your wallet" .onAction="${this.onGoToQrcode}" .actionIcon="${
            v.QRCODE_ICON
        }"></wcm-modal-header><wcm-modal-content><div class="wcm-title">${
            v.MOBILE_ICON
        }<wcm-text variant="small-regular" color="accent">WalletConnect</wcm-text></div><div class="wcm-slider"><div class="wcm-track">${[...Array(r)].map(
            (a, t) => {
                const l = o[t % o.length];
                return l ? x`<wcm-wallet-image walletId="${l.id}" imageId="${l.image_id}"></wcm-wallet-image>` : v.WALLET_PLACEHOLDER;
            }
        )}</div><wcm-button-big @click="${
            c.handleAndroidLinking
        }"><wcm-text variant="medium-regular" color="inverse">Select Wallet</wcm-text></wcm-button-big></div></wcm-modal-content><wcm-info-footer><wcm-text color="secondary" variant="small-thin">Choose WalletConnect to see supported apps on your device</wcm-text></wcm-info-footer>`;
    }
};
(Ie.styles = [h.globalCss, co]), (Ie = ho([e$2("wcm-android-wallet-selection")], Ie));
const wo = i$3`@keyframes loading{to{stroke-dashoffset:0}}@keyframes shake{10%,90%{transform:translate3d(-1px,0,0)}20%,80%{transform:translate3d(1px,0,0)}30%,50%,70%{transform:translate3d(-2px,0,0)}40%,60%{transform:translate3d(2px,0,0)}}:host{display:flex;flex-direction:column;align-items:center}div{position:relative;width:110px;height:110px;display:flex;justify-content:center;align-items:center;margin:40px 0 20px 0;transform:translate3d(0,0,0)}svg{position:absolute;width:110px;height:110px;fill:none;stroke:transparent;stroke-linecap:round;stroke-width:2px;top:0;left:0}use{stroke:var(--wcm-accent-color);animation:loading 1s linear infinite}wcm-wallet-image{border-radius:var(--wcm-wallet-icon-large-border-radius);width:90px;height:90px}wcm-text{margin-bottom:40px}.wcm-error svg{stroke:var(--wcm-error-color)}.wcm-error use{display:none}.wcm-error{animation:shake .4s cubic-bezier(.36,.07,.19,.97) both}.wcm-stale svg,.wcm-stale use{display:none}`;
var po = Object.defineProperty,
    go = Object.getOwnPropertyDescriptor,
    K = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? go(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && po(o, r, t), t;
    };
let D = class extends s {
    constructor() {
        super(...arguments), (this.walletId = void 0), (this.imageId = void 0), (this.isError = !1), (this.isStale = !1), (this.label = "");
    }
    svgLoaderTemplate() {
        var e, o;
        const r =
            (o = (e = ne$1.state.themeVariables) == null ? void 0 : e["--wcm-wallet-icon-large-border-radius"]) != null
                ? o
                : h.getPreset("--wcm-wallet-icon-large-border-radius");
        let a = 0;
        r.includes("%") ? (a = (88 / 100) * parseInt(r, 10)) : (a = parseInt(r, 10)), (a *= 1.17);
        const t = 317 - a * 1.57,
            l = 425 - a * 1.8;
        return x`<svg viewBox="0 0 110 110" width="110" height="110"><rect id="wcm-loader" x="2" y="2" width="106" height="106" rx="${a}"/><use xlink:href="#wcm-loader" stroke-dasharray="106 ${t}" stroke-dashoffset="${l}"></use></svg>`;
    }
    render() {
        const e = { "wcm-error": this.isError, "wcm-stale": this.isStale };
        return x`<div class="${o(e)}">${this.svgLoaderTemplate()}<wcm-wallet-image walletId="${l(this.walletId)}" imageId="${l(
            this.imageId
        )}"></wcm-wallet-image></div><wcm-text variant="medium-regular" color="${this.isError ? "error" : "primary"}">${
            this.isError ? "Connection declined" : this.label
        }</wcm-text>`;
    }
};
(D.styles = [h.globalCss, wo]),
    K([n$1()], D.prototype, "walletId", 2),
    K([n$1()], D.prototype, "imageId", 2),
    K([n$1({ type: Boolean })], D.prototype, "isError", 2),
    K([n$1({ type: Boolean })], D.prototype, "isStale", 2),
    K([n$1()], D.prototype, "label", 2),
    (D = K([e$2("wcm-connector-waiting")], D));
const G = {
        manualWallets() {
            var e, o;
            const { mobileWallets: r, desktopWallets: a } = y$1.state,
                t = (e = G.recentWallet()) == null ? void 0 : e.id,
                l = a$2.isMobile() ? r : a,
                i = l?.filter((s) => t !== s.id);
            return (o = a$2.isMobile()
                ? i?.map(({ id: s, name: $, links: f }) => ({ id: s, name: $, mobile: f, links: f }))
                : i?.map(({ id: s, name: $, links: f }) => ({ id: s, name: $, desktop: f, links: f }))) != null
                ? o
                : [];
        },
        recentWallet() {
            return c.getRecentWallet();
        },
        recomendedWallets(e = !1) {
            var o;
            const r = e || (o = G.recentWallet()) == null ? void 0 : o.id,
                { recomendedWallets: a } = te$1.state;
            return a.filter((t) => r !== t.id);
        },
    },
    Z = {
        onConnecting(e) {
            c.goToConnectingView(e);
        },
        manualWalletsTemplate() {
            return G.manualWallets().map(
                (e) => x`<wcm-wallet-button walletId="${e.id}" name="${e.name}" .onClick="${() => this.onConnecting(e)}"></wcm-wallet-button>`
            );
        },
        recomendedWalletsTemplate(e = !1) {
            return G.recomendedWallets(e).map(
                (o) =>
                    x`<wcm-wallet-button name="${o.name}" walletId="${o.id}" imageId="${o.image_id}" .onClick="${() =>
                        this.onConnecting(o)}"></wcm-wallet-button>`
            );
        },
        recentWalletTemplate() {
            const e = G.recentWallet();
            if (e)
                return x`<wcm-wallet-button name="${e.name}" walletId="${e.id}" imageId="${l(e.image_id)}" .recent="${!0}" .onClick="${() =>
                    this.onConnecting(e)}"></wcm-wallet-button>`;
        },
    },
    vo = i$3`.wcm-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between}.wcm-desktop-title,.wcm-mobile-title{display:flex;align-items:center}.wcm-mobile-title{justify-content:space-between;margin-bottom:20px;margin-top:-10px}.wcm-desktop-title{margin-bottom:10px;padding:0 10px}.wcm-subtitle{display:flex;align-items:center}.wcm-subtitle:last-child path{fill:var(--wcm-color-fg-3)}.wcm-desktop-title svg,.wcm-mobile-title svg{margin-right:6px}.wcm-desktop-title path,.wcm-mobile-title path{fill:var(--wcm-accent-color)}`;
var fo = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Ee = class extends s {
    render() {
        const { explorerExcludedWalletIds: e, enableExplorer: o } = y$1.state,
            r = e !== "ALL" && o,
            a = Z.manualWalletsTemplate(),
            t = Z.recomendedWalletsTemplate();
        let l = [Z.recentWalletTemplate(), ...a, ...t];
        l = l.filter(Boolean);
        const i = l.length > 4 || r;
        let s = [];
        i ? (s = l.slice(0, 3)) : (s = l);
        const $ = Boolean(s.length);
        return x`<wcm-modal-header .border="${!0}" title="Connect your wallet" .onAction="${c.handleUriCopy}" .actionIcon="${
            v.COPY_ICON
        }"></wcm-modal-header><wcm-modal-content><div class="wcm-mobile-title"><div class="wcm-subtitle">${
            v.MOBILE_ICON
        }<wcm-text variant="small-regular" color="accent">Mobile</wcm-text></div><div class="wcm-subtitle">${
            v.SCAN_ICON
        }<wcm-text variant="small-regular" color="secondary">Scan with your wallet</wcm-text></div></div><wcm-walletconnect-qr></wcm-walletconnect-qr></wcm-modal-content>${
            $
                ? x`<wcm-modal-footer><div class="wcm-desktop-title">${
                      v.DESKTOP_ICON
                  }<wcm-text variant="small-regular" color="accent">Desktop</wcm-text></div><div class="wcm-grid">${s} ${
                      i ? x`<wcm-view-all-wallets-button></wcm-view-all-wallets-button>` : null
                  }</div></wcm-modal-footer>`
                : null
        }`;
    }
};
(Ee.styles = [h.globalCss, vo]), (Ee = fo([e$2("wcm-desktop-wallet-selection")], Ee));
const xo = i$3`div{background-color:var(--wcm-color-bg-2);padding:10px 20px 15px 20px;border-top:1px solid var(--wcm-color-bg-3);text-align:center}a{color:var(--wcm-accent-color);text-decoration:none;transition:opacity .2s ease-in-out;display:inline}a:active{opacity:.8}@media(hover:hover){a:hover{opacity:.8}}`;
var Co = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Me = class extends s {
    render() {
        const { termsOfServiceUrl: e, privacyPolicyUrl: o } = y$1.state;
        return e ?? o
            ? x`<div><wcm-text variant="small-regular" color="secondary">By connecting your wallet to this app, you agree to the app's ${
                  e ? x`<a href="${e}" target="_blank" rel="noopener noreferrer">Terms of Service</a>` : null
              } ${e && o ? "and" : null} ${o ? x`<a href="${o}" target="_blank" rel="noopener noreferrer">Privacy Policy</a>` : null}</wcm-text></div>`
            : null;
    }
};
(Me.styles = [h.globalCss, xo]), (Me = Co([e$2("wcm-legal-notice")], Me));
const ko = i$3`div{display:grid;grid-template-columns:repeat(4,80px);margin:0 -10px;justify-content:space-between;row-gap:10px}`;
var Io = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Le = class extends s {
    onQrcode() {
        T$2.push("Qrcode");
    }
    render() {
        const { explorerExcludedWalletIds: e, enableExplorer: o } = y$1.state,
            r = e !== "ALL" && o,
            a = Z.manualWalletsTemplate(),
            t = Z.recomendedWalletsTemplate();
        let l = [Z.recentWalletTemplate(), ...a, ...t];
        l = l.filter(Boolean);
        const i = l.length > 8 || r;
        let s = [];
        i ? (s = l.slice(0, 7)) : (s = l);
        const $ = Boolean(s.length);
        return x`<wcm-modal-header title="Connect your wallet" .onAction="${this.onQrcode}" .actionIcon="${v.QRCODE_ICON}"></wcm-modal-header>${
            $ ? x`<wcm-modal-content><div>${s} ${i ? x`<wcm-view-all-wallets-button></wcm-view-all-wallets-button>` : null}</div></wcm-modal-content>` : null
        }`;
    }
};
(Le.styles = [h.globalCss, ko]), (Le = Io([e$2("wcm-mobile-wallet-selection")], Le));
const Eo = i$3`:host{all:initial}.wcm-overlay{top:0;bottom:0;left:0;right:0;position:fixed;z-index:var(--wcm-z-index);overflow:hidden;display:flex;justify-content:center;align-items:center;opacity:0;pointer-events:none;background-color:var(--wcm-overlay-background-color);backdrop-filter:var(--wcm-overlay-backdrop-filter)}@media(max-height:720px) and (orientation:landscape){.wcm-overlay{overflow:scroll;align-items:flex-start;padding:20px 0}}.wcm-active{pointer-events:auto}.wcm-container{position:relative;max-width:360px;width:100%;outline:0;border-radius:var(--wcm-background-border-radius) var(--wcm-background-border-radius) var(--wcm-container-border-radius) var(--wcm-container-border-radius);border:1px solid var(--wcm-color-overlay);overflow:hidden}.wcm-card{width:100%;position:relative;border-radius:var(--wcm-container-border-radius);overflow:hidden;box-shadow:0 6px 14px -6px rgba(10,16,31,.12),0 10px 32px -4px rgba(10,16,31,.1),0 0 0 1px var(--wcm-color-overlay);background-color:var(--wcm-color-bg-1);color:var(--wcm-color-fg-1)}@media(max-width:600px){.wcm-container{max-width:440px;border-radius:var(--wcm-background-border-radius) var(--wcm-background-border-radius) 0 0}.wcm-card{border-radius:var(--wcm-container-border-radius) var(--wcm-container-border-radius) 0 0}.wcm-overlay{align-items:flex-end}}@media(max-width:440px){.wcm-container{border:0}}`;
var Mo = Object.defineProperty,
    Lo = Object.getOwnPropertyDescriptor,
    Re = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Lo(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Mo(o, r, t), t;
    };
let ae = class extends s {
    constructor() {
        super(),
            (this.open = !1),
            (this.active = !1),
            (this.unsubscribeModal = void 0),
            (this.abortController = void 0),
            (this.unsubscribeModal = se$1.subscribe((e) => {
                e.open ? this.onOpenModalEvent() : this.onCloseModalEvent();
            }));
    }
    disconnectedCallback() {
        var e;
        (e = this.unsubscribeModal) == null || e.call(this);
    }
    get overlayEl() {
        return c.getShadowRootElement(this, ".wcm-overlay");
    }
    get containerEl() {
        return c.getShadowRootElement(this, ".wcm-container");
    }
    toggleBodyScroll(e) {
        if (document.querySelector("body"))
            if (e) {
                const o = document.getElementById("wcm-styles");
                o?.remove();
            } else
                document.head.insertAdjacentHTML(
                    "beforeend",
                    '<style id="wcm-styles">html,body{touch-action:none;overflow:hidden;overscroll-behavior:contain;}</style>'
                );
    }
    onCloseModal(e) {
        e.target === e.currentTarget && se$1.close();
    }
    onOpenModalEvent() {
        this.toggleBodyScroll(!1),
            this.addKeyboardEvents(),
            (this.open = !0),
            setTimeout(async () => {
                const e = c.isMobileAnimation() ? { y: ["50vh", "0vh"] } : { scale: [0.98, 1] },
                    o = 0.1,
                    r = 0.2;
                await Promise.all([
                    animate(this.overlayEl, { opacity: [0, 1] }, { delay: o, duration: r }).finished,
                    animate(this.containerEl, e, { delay: o, duration: r }).finished,
                ]),
                    (this.active = !0);
            }, 0);
    }
    async onCloseModalEvent() {
        this.toggleBodyScroll(!0), this.removeKeyboardEvents();
        const e = c.isMobileAnimation() ? { y: ["0vh", "50vh"] } : { scale: [1, 0.98] },
            o = 0.2;
        await Promise.all([animate(this.overlayEl, { opacity: [1, 0] }, { duration: o }).finished, animate(this.containerEl, e, { duration: o }).finished]),
            this.containerEl.removeAttribute("style"),
            (this.active = !1),
            (this.open = !1);
    }
    addKeyboardEvents() {
        (this.abortController = new AbortController()),
            window.addEventListener(
                "keydown",
                (e) => {
                    var o;
                    e.key === "Escape" ? se$1.close() : e.key === "Tab" && (((o = e.target) != null && o.tagName.includes("wcm-")) || this.containerEl.focus());
                },
                this.abortController
            ),
            this.containerEl.focus();
    }
    removeKeyboardEvents() {
        var e;
        (e = this.abortController) == null || e.abort(), (this.abortController = void 0);
    }
    render() {
        const e = { "wcm-overlay": !0, "wcm-active": this.active };
        return x`<wcm-explorer-context></wcm-explorer-context><wcm-theme-context></wcm-theme-context><div id="wcm-modal" class="${o(e)}" @click="${
            this.onCloseModal
        }" role="alertdialog" aria-modal="true"><div class="wcm-container" tabindex="0">${
            this.open
                ? x`<wcm-modal-backcard></wcm-modal-backcard><div class="wcm-card"><wcm-modal-router></wcm-modal-router><wcm-modal-toast></wcm-modal-toast></div>`
                : null
        }</div></div>`;
    }
};
(ae.styles = [h.globalCss, Eo]), Re([t$1()], ae.prototype, "open", 2), Re([t$1()], ae.prototype, "active", 2), (ae = Re([e$2("wcm-modal")], ae));
const Ro = i$3`div{display:flex;margin-top:15px}slot{display:inline-block;margin:0 5px}wcm-button{margin:0 5px}`;
var Ao = Object.defineProperty,
    Po = Object.getOwnPropertyDescriptor,
    le = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Po(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Ao(o, r, t), t;
    };
let B = class extends s {
    constructor() {
        super(...arguments), (this.isMobile = !1), (this.isDesktop = !1), (this.isWeb = !1), (this.isRetry = !1);
    }
    onMobile() {
        a$2.isMobile() ? T$2.replace("MobileConnecting") : T$2.replace("MobileQrcodeConnecting");
    }
    onDesktop() {
        T$2.replace("DesktopConnecting");
    }
    onWeb() {
        T$2.replace("WebConnecting");
    }
    render() {
        return x`<div>${this.isRetry ? x`<slot></slot>` : null} ${
            this.isMobile ? x`<wcm-button .onClick="${this.onMobile}" .iconLeft="${v.MOBILE_ICON}" variant="outline">Mobile</wcm-button>` : null
        } ${this.isDesktop ? x`<wcm-button .onClick="${this.onDesktop}" .iconLeft="${v.DESKTOP_ICON}" variant="outline">Desktop</wcm-button>` : null} ${
            this.isWeb ? x`<wcm-button .onClick="${this.onWeb}" .iconLeft="${v.GLOBE_ICON}" variant="outline">Web</wcm-button>` : null
        }</div>`;
    }
};
(B.styles = [h.globalCss, Ro]),
    le([n$1({ type: Boolean })], B.prototype, "isMobile", 2),
    le([n$1({ type: Boolean })], B.prototype, "isDesktop", 2),
    le([n$1({ type: Boolean })], B.prototype, "isWeb", 2),
    le([n$1({ type: Boolean })], B.prototype, "isRetry", 2),
    (B = le([e$2("wcm-platform-selection")], B));
const To = i$3`button{display:flex;flex-direction:column;padding:5px 10px;border-radius:var(--wcm-button-hover-highlight-border-radius);height:100%;justify-content:flex-start}.wcm-icons{width:60px;height:60px;display:flex;flex-wrap:wrap;padding:7px;border-radius:var(--wcm-wallet-icon-border-radius);justify-content:space-between;align-items:center;margin-bottom:5px;background-color:var(--wcm-color-bg-2);box-shadow:inset 0 0 0 1px var(--wcm-color-overlay)}button:active{background-color:var(--wcm-color-overlay)}@media(hover:hover){button:hover{background-color:var(--wcm-color-overlay)}}.wcm-icons img{width:21px;height:21px;object-fit:cover;object-position:center;border-radius:calc(var(--wcm-wallet-icon-border-radius)/ 2);border:1px solid var(--wcm-color-overlay)}.wcm-icons svg{width:21px;height:21px}.wcm-icons img:nth-child(1),.wcm-icons img:nth-child(2),.wcm-icons svg:nth-child(1),.wcm-icons svg:nth-child(2){margin-bottom:4px}wcm-text{width:100%;text-align:center}#wallet-placeholder-fill{fill:var(--wcm-color-bg-3)}#wallet-placeholder-dash{stroke:var(--wcm-color-overlay)}`;
var Do = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Ae = class extends s {
    onClick() {
        T$2.push("WalletExplorer");
    }
    render() {
        const { recomendedWallets: e } = te$1.state,
            o = G.manualWallets(),
            r = [...e, ...o].reverse().slice(0, 4);
        return x`<button @click="${this.onClick}"><div class="wcm-icons">${r.map((a) => {
            const t = c.getWalletIcon(a);
            if (t) return x`<img crossorigin="anonymous" src="${t}">`;
            const l = c.getWalletIcon({ id: a.id });
            return l ? x`<img crossorigin="anonymous" src="${l}">` : v.WALLET_PLACEHOLDER;
        })} ${[...Array(4 - r.length)].map(() => v.WALLET_PLACEHOLDER)}</div><wcm-text variant="xsmall-regular">View All</wcm-text></button>`;
    }
};
(Ae.styles = [h.globalCss, To]), (Ae = Do([e$2("wcm-view-all-wallets-button")], Ae));
const No = i$3`.wcm-qr-container{width:100%;display:flex;justify-content:center;align-items:center;aspect-ratio:1/1}`;
var Zo = Object.defineProperty,
    So = Object.getOwnPropertyDescriptor,
    de = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? So(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Zo(o, r, t), t;
    };
let Y = class extends s {
    constructor() {
        super(),
            (this.walletId = ""),
            (this.imageId = ""),
            (this.uri = ""),
            setTimeout(() => {
                const { walletConnectUri: e } = p$1.state;
                this.uri = e;
            }, 0);
    }
    get overlayEl() {
        return c.getShadowRootElement(this, ".wcm-qr-container");
    }
    render() {
        return x`<div class="wcm-qr-container">${
            this.uri
                ? x`<wcm-qrcode size="${this.overlayEl.offsetWidth}" uri="${this.uri}" walletId="${l(this.walletId)}" imageId="${l(
                      this.imageId
                  )}"></wcm-qrcode>`
                : x`<wcm-spinner></wcm-spinner>`
        }</div>`;
    }
};
(Y.styles = [h.globalCss, No]),
    de([n$1()], Y.prototype, "walletId", 2),
    de([n$1()], Y.prototype, "imageId", 2),
    de([t$1()], Y.prototype, "uri", 2),
    (Y = de([e$2("wcm-walletconnect-qr")], Y));
var Ho = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Pe = class extends s {
    viewTemplate() {
        return a$2.isAndroid()
            ? x`<wcm-android-wallet-selection></wcm-android-wallet-selection>`
            : a$2.isMobile()
            ? x`<wcm-mobile-wallet-selection></wcm-mobile-wallet-selection>`
            : x`<wcm-desktop-wallet-selection></wcm-desktop-wallet-selection>`;
    }
    render() {
        return x`${this.viewTemplate()}<wcm-legal-notice></wcm-legal-notice>`;
    }
};
(Pe.styles = [h.globalCss]), (Pe = Ho([e$2("wcm-connect-wallet-view")], Pe));
const zo = i$3`wcm-info-footer{flex-direction:column;align-items:center;display:flex;width:100%;padding:5px 0}wcm-text{text-align:center}`;
var Vo = Object.defineProperty,
    Fo = Object.getOwnPropertyDescriptor,
    Ke = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Fo(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Vo(o, r, t), t;
    };
let me = class extends s {
    constructor() {
        super(), (this.isError = !1), this.openDesktopApp();
    }
    onFormatAndRedirect(e) {
        const { desktop: o, name: r } = a$2.getWalletRouterData(),
            a = o?.native;
        if (a) {
            const t = a$2.formatNativeUrl(a, e, r);
            a$2.openHref(t, "_self");
        }
    }
    openDesktopApp() {
        const { walletConnectUri: e } = p$1.state,
            o = a$2.getWalletRouterData();
        c.setRecentWallet(o), e && this.onFormatAndRedirect(e);
    }
    render() {
        const { name: e, id: o, image_id: r } = a$2.getWalletRouterData(),
            { isMobile: a, isWeb: t } = c.getCachedRouterWalletPlatforms();
        return x`<wcm-modal-header title="${e}" .onAction="${c.handleUriCopy}" .actionIcon="${
            v.COPY_ICON
        }"></wcm-modal-header><wcm-modal-content><wcm-connector-waiting walletId="${o}" imageId="${l(r)}" label="${`Continue in ${e}...`}" .isError="${
            this.isError
        }"></wcm-connector-waiting></wcm-modal-content><wcm-info-footer><wcm-text color="secondary" variant="small-thin">${`Connection can continue loading if ${e} is not installed on your device`}</wcm-text><wcm-platform-selection .isMobile="${a}" .isWeb="${t}" .isRetry="${!0}"><wcm-button .onClick="${this.openDesktopApp.bind(
            this
        )}" .iconRight="${v.RETRY_ICON}">Retry</wcm-button></wcm-platform-selection></wcm-info-footer>`;
    }
};
(me.styles = [h.globalCss, zo]), Ke([t$1()], me.prototype, "isError", 2), (me = Ke([e$2("wcm-desktop-connecting-view")], me));
const qo = i$3`wcm-info-footer{flex-direction:column;align-items:center;display:flex;width:100%;padding:5px 0}wcm-text{text-align:center}wcm-button{margin-top:15px}`;
var Yo = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let Te = class extends s {
    onInstall(e) {
        e && a$2.openHref(e, "_blank");
    }
    render() {
        const { name: e, id: o, image_id: r, homepage: a } = a$2.getWalletRouterData();
        return x`<wcm-modal-header title="${e}"></wcm-modal-header><wcm-modal-content><wcm-connector-waiting walletId="${o}" imageId="${l(
            r
        )}" label="Not Detected" .isStale="${!0}"></wcm-connector-waiting></wcm-modal-content><wcm-info-footer><wcm-text color="secondary" variant="small-thin">${`Download ${e} to continue. If multiple browser extensions are installed, disable non ${e} ones and try again`}</wcm-text><wcm-button .onClick="${() =>
            this.onInstall(a)}" .iconLeft="${v.ARROW_DOWN_ICON}">Download</wcm-button></wcm-info-footer>`;
    }
};
(Te.styles = [h.globalCss, qo]), (Te = Yo([e$2("wcm-install-wallet-view")], Te));
const Go = i$3`wcm-wallet-image{border-radius:var(--wcm-wallet-icon-large-border-radius);width:96px;height:96px;margin-bottom:20px}wcm-info-footer{display:flex;width:100%}.wcm-app-store{justify-content:space-between}.wcm-app-store wcm-wallet-image{margin-right:10px;margin-bottom:0;width:28px;height:28px;border-radius:var(--wcm-wallet-icon-small-border-radius)}.wcm-app-store div{display:flex;align-items:center}.wcm-app-store wcm-button{margin-right:-10px}.wcm-note{flex-direction:column;align-items:center;padding:5px 0}.wcm-note wcm-text{text-align:center}wcm-platform-selection{margin-top:-15px}.wcm-note wcm-text{margin-top:15px}.wcm-note wcm-text span{color:var(--wcm-accent-color)}`;
var Xo = Object.defineProperty,
    Jo = Object.getOwnPropertyDescriptor,
    Ye = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? Jo(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && Xo(o, r, t), t;
    };
let he = class extends s {
    constructor() {
        super(), (this.isError = !1), this.openMobileApp();
    }
    onFormatAndRedirect(e, o = !1) {
        const { mobile: r, name: a } = a$2.getWalletRouterData(),
            t = r?.native,
            l = r?.universal;
        if (t && !o) {
            const i = a$2.formatNativeUrl(t, e, a);
            a$2.openHref(i, "_self");
        } else if (l) {
            const i = a$2.formatUniversalUrl(l, e, a);
            a$2.openHref(i, "_self");
        }
    }
    openMobileApp(e = !1) {
        const { walletConnectUri: o } = p$1.state,
            r = a$2.getWalletRouterData();
        c.setRecentWallet(r), o && this.onFormatAndRedirect(o, e);
    }
    onGoToAppStore(e) {
        e && a$2.openHref(e, "_blank");
    }
    render() {
        const { name: e, id: o, image_id: r, app: a, mobile: t } = a$2.getWalletRouterData(),
            { isWeb: l$1 } = c.getCachedRouterWalletPlatforms(),
            i = a?.ios,
            s = t?.universal;
        return x`<wcm-modal-header title="${e}"></wcm-modal-header><wcm-modal-content><wcm-connector-waiting walletId="${o}" imageId="${l(
            r
        )}" label="Tap 'Open' to continue…" .isError="${
            this.isError
        }"></wcm-connector-waiting></wcm-modal-content><wcm-info-footer class="wcm-note"><wcm-platform-selection .isWeb="${l$1}" .isRetry="${!0}"><wcm-button .onClick="${() =>
            this.openMobileApp(!1)}" .iconRight="${v.RETRY_ICON}">Retry</wcm-button></wcm-platform-selection>${
            s
                ? x`<wcm-text color="secondary" variant="small-thin">Still doesn't work? <span tabindex="0" @click="${() =>
                      this.openMobileApp(!0)}">Try this alternate link</span></wcm-text>`
                : null
        }</wcm-info-footer><wcm-info-footer class="wcm-app-store"><div><wcm-wallet-image walletId="${o}" imageId="${l(
            r
        )}"></wcm-wallet-image><wcm-text>${`Get ${e}`}</wcm-text></div><wcm-button .iconRight="${v.ARROW_RIGHT_ICON}" .onClick="${() =>
            this.onGoToAppStore(i)}" variant="ghost">App Store</wcm-button></wcm-info-footer>`;
    }
};
(he.styles = [h.globalCss, Go]), Ye([t$1()], he.prototype, "isError", 2), (he = Ye([e$2("wcm-mobile-connecting-view")], he));
const er = i$3`wcm-info-footer{flex-direction:column;align-items:center;display:flex;width:100%;padding:5px 0}wcm-text{text-align:center}`;
var rr = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let je = class extends s {
    render() {
        const { name: e, id: o, image_id: r } = a$2.getWalletRouterData(),
            { isDesktop: a, isWeb: t } = c.getCachedRouterWalletPlatforms();
        return x`<wcm-modal-header title="${e}" .onAction="${c.handleUriCopy}" .actionIcon="${
            v.COPY_ICON
        }"></wcm-modal-header><wcm-modal-content><wcm-walletconnect-qr walletId="${o}" imageId="${l(
            r
        )}"></wcm-walletconnect-qr></wcm-modal-content><wcm-info-footer><wcm-text color="secondary" variant="small-thin">${`Scan this QR Code with your phone's camera or inside ${e} app`}</wcm-text><wcm-platform-selection .isDesktop="${a}" .isWeb="${t}"></wcm-platform-selection></wcm-info-footer>`;
    }
};
(je.styles = [h.globalCss, er]), (je = rr([e$2("wcm-mobile-qr-connecting-view")], je));
var ir = (e, o, r, a) => {
    for (var t = o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = i(t) || t);
    return t;
};
let _e = class extends s {
    render() {
        return x`<wcm-modal-header title="Scan the code" .onAction="${c.handleUriCopy}" .actionIcon="${v.COPY_ICON}"></wcm-modal-header><wcm-modal-content><wcm-walletconnect-qr></wcm-walletconnect-qr></wcm-modal-content>`;
    }
};
(_e.styles = [h.globalCss]), (_e = ir([e$2("wcm-qrcode-view")], _e));
const nr = i$3`wcm-modal-content{height:clamp(200px,60vh,600px);display:block;overflow:scroll;scrollbar-width:none;position:relative;margin-top:1px}.wcm-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between;margin:-15px -10px;padding-top:20px}wcm-modal-content::after,wcm-modal-content::before{content:'';position:fixed;pointer-events:none;z-index:1;width:100%;height:20px;opacity:1}wcm-modal-content::before{box-shadow:0 -1px 0 0 var(--wcm-color-bg-1);background:linear-gradient(var(--wcm-color-bg-1),rgba(255,255,255,0))}wcm-modal-content::after{box-shadow:0 1px 0 0 var(--wcm-color-bg-1);background:linear-gradient(rgba(255,255,255,0),var(--wcm-color-bg-1));top:calc(100% - 20px)}wcm-modal-content::-webkit-scrollbar{display:none}.wcm-placeholder-block{display:flex;justify-content:center;align-items:center;height:100px;overflow:hidden}.wcm-empty,.wcm-loading{display:flex}.wcm-loading .wcm-placeholder-block{height:100%}.wcm-end-reached .wcm-placeholder-block{height:0;opacity:0}.wcm-empty .wcm-placeholder-block{opacity:1;height:100%}wcm-wallet-button{margin:calc((100% - 60px)/ 3) 0}`;
var cr = Object.defineProperty,
    sr = Object.getOwnPropertyDescriptor,
    ie = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? sr(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && cr(o, r, t), t;
    };
const De = 40;
let U = class extends s {
    constructor() {
        super(...arguments),
            (this.loading = !te$1.state.wallets.listings.length),
            (this.firstFetch = !te$1.state.wallets.listings.length),
            (this.search = ""),
            (this.endReached = !1),
            (this.intersectionObserver = void 0),
            (this.searchDebounce = c.debounce((e) => {
                e.length >= 1
                    ? ((this.firstFetch = !0), (this.endReached = !1), (this.search = e), te$1.resetSearch(), this.fetchWallets())
                    : this.search && ((this.search = ""), (this.endReached = this.isLastPage()), te$1.resetSearch());
            }));
    }
    firstUpdated() {
        this.createPaginationObserver();
    }
    disconnectedCallback() {
        var e;
        (e = this.intersectionObserver) == null || e.disconnect();
    }
    get placeholderEl() {
        return c.getShadowRootElement(this, ".wcm-placeholder-block");
    }
    createPaginationObserver() {
        (this.intersectionObserver = new IntersectionObserver(([e]) => {
            e.isIntersecting && !(this.search && this.firstFetch) && this.fetchWallets();
        })),
            this.intersectionObserver.observe(this.placeholderEl);
    }
    isLastPage() {
        const { wallets: e, search: o } = te$1.state,
            { listings: r, total: a } = this.search ? o : e;
        return a <= De || r.length >= a;
    }
    async fetchWallets() {
        var e;
        const { wallets: o, search: r } = te$1.state,
            { listings: a, total: t, page: l } = this.search ? r : o;
        if (!this.endReached && (this.firstFetch || (t > De && a.length < t)))
            try {
                this.loading = !0;
                const i = (e = p$1.state.chains) == null ? void 0 : e.join(","),
                    { listings: s } = await te$1.getWallets({ page: this.firstFetch ? 1 : l + 1, entries: De, search: this.search, version: 2, chains: i }),
                    $ = s.map((f) => c.getWalletIcon(f));
                await Promise.all([...$.map(async (f) => c.preloadImage(f)), a$2.wait(300)]), (this.endReached = this.isLastPage());
            } catch (i) {
                console.error(i), oe$1.openToast(c.getErrorMessage(i), "error");
            } finally {
                (this.loading = !1), (this.firstFetch = !1);
            }
    }
    onConnect(e) {
        a$2.isAndroid() ? c.handleMobileLinking(e) : c.goToConnectingView(e);
    }
    onSearchChange(e) {
        const { value: o } = e.target;
        this.searchDebounce(o);
    }
    render() {
        const { wallets: e, search: o$1 } = te$1.state,
            { listings: r } = this.search ? o$1 : e,
            a = this.loading && !r.length,
            t = this.search.length >= 3;
        let l = Z.manualWalletsTemplate(),
            i = Z.recomendedWalletsTemplate(!0);
        t &&
            ((l = l.filter(({ values: f }) => c.caseSafeIncludes(f[0], this.search))),
            (i = i.filter(({ values: f }) => c.caseSafeIncludes(f[0], this.search))));
        const s = !this.loading && !r.length && !i.length,
            $ = { "wcm-loading": a, "wcm-end-reached": this.endReached || !this.loading, "wcm-empty": s };
        return x`<wcm-modal-header><wcm-search-input .onChange="${this.onSearchChange.bind(
            this
        )}"></wcm-search-input></wcm-modal-header><wcm-modal-content class="${o($)}"><div class="wcm-grid">${a ? null : l} ${a ? null : i} ${
            a
                ? null
                : r.map(
                      (f) =>
                          x`${
                              f
                                  ? x`<wcm-wallet-button imageId="${f.image_id}" name="${f.name}" walletId="${f.id}" .onClick="${() =>
                                        this.onConnect(f)}"></wcm-wallet-button>`
                                  : null
                          }`
                  )
        }</div><div class="wcm-placeholder-block">${s ? x`<wcm-text variant="big-bold" color="secondary">No results found</wcm-text>` : null} ${
            !s && this.loading ? x`<wcm-spinner></wcm-spinner>` : null
        }</div></wcm-modal-content>`;
    }
};
(U.styles = [h.globalCss, nr]),
    ie([t$1()], U.prototype, "loading", 2),
    ie([t$1()], U.prototype, "firstFetch", 2),
    ie([t$1()], U.prototype, "search", 2),
    ie([t$1()], U.prototype, "endReached", 2),
    (U = ie([e$2("wcm-wallet-explorer-view")], U));
const dr = i$3`wcm-info-footer{flex-direction:column;align-items:center;display:flex;width:100%;padding:5px 0}wcm-text{text-align:center}`;
var mr = Object.defineProperty,
    hr = Object.getOwnPropertyDescriptor,
    Ge = (e, o, r, a) => {
        for (var t = a > 1 ? void 0 : a ? hr(o, r) : o, l = e.length - 1, i; l >= 0; l--) (i = e[l]) && (t = (a ? i(o, r, t) : i(t)) || t);
        return a && t && mr(o, r, t), t;
    };
let we = class extends s {
    constructor() {
        super(), (this.isError = !1), this.openWebWallet();
    }
    onFormatAndRedirect(e) {
        const { desktop: o, name: r } = a$2.getWalletRouterData(),
            a = o?.universal;
        if (a) {
            const t = a$2.formatUniversalUrl(a, e, r);
            a$2.openHref(t, "_blank");
        }
    }
    openWebWallet() {
        const { walletConnectUri: e } = p$1.state,
            o = a$2.getWalletRouterData();
        c.setRecentWallet(o), e && this.onFormatAndRedirect(e);
    }
    render() {
        const { name: e, id: o, image_id: r } = a$2.getWalletRouterData(),
            { isMobile: a, isDesktop: t } = c.getCachedRouterWalletPlatforms(),
            l$1 = a$2.isMobile();
        return x`<wcm-modal-header title="${e}" .onAction="${c.handleUriCopy}" .actionIcon="${
            v.COPY_ICON
        }"></wcm-modal-header><wcm-modal-content><wcm-connector-waiting walletId="${o}" imageId="${l(r)}" label="${`Continue in ${e}...`}" .isError="${
            this.isError
        }"></wcm-connector-waiting></wcm-modal-content><wcm-info-footer><wcm-text color="secondary" variant="small-thin">${`${e} web app has opened in a new tab. Go there, accept the connection, and come back`}</wcm-text><wcm-platform-selection .isMobile="${a}" .isDesktop="${
            l$1 ? !1 : t
        }" .isRetry="${!0}"><wcm-button .onClick="${this.openWebWallet.bind(this)}" .iconRight="${
            v.RETRY_ICON
        }">Retry</wcm-button></wcm-platform-selection></wcm-info-footer>`;
    }
};
(we.styles = [h.globalCss, dr]), Ge([t$1()], we.prototype, "isError", 2), (we = Ge([e$2("wcm-web-connecting-view")], we));

var index = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    get WcmModal() {
        return ae;
    },
    get WcmQrCode() {
        return j;
    },
});

export { x$1 as EthereumProvider };

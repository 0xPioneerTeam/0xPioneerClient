CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        u_maskMap: { value: white, editor: { tooltip: 'Mask Texture' } }
        u_dissolveMap: { value: white, editor: { tooltip: 'Noise Texture' } }
        dissolveThreshold: { value: 0.5, editor: { range:[0, 1, 0.01], slide: true, tooltip: 'Dissolve Threshold' } }
}%

CCProgram vs %{
  precision highp float;
  #include <cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    uv0 = a_texCoord;
    color = a_color;

    return pos;
  }
}%

CCProgram fs %{
  precision highp float;

  in vec4 color;

  uniform Dissolve{
    float dissolveThreshold;// threshold[0, 1];
  };

  in vec2 uv0;
  uniform sampler2D u_dissolveMap;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  
  #if USE_MASK
    uniform sampler2D u_maskMap; // mask map;
  #endif
  
  vec4 frag () {
    
    #if USE_MASK
      vec4 maskC = texture(u_maskMap, uv0);  
      if (maskC.r < 1.0) { 
        discard;
      }
    #endif 

    vec4 o = vec4(1, 1, 1, 1);
    float value = 1.0;

    vec4 dissolveMap = texture(u_dissolveMap, uv0); 
    value *= dissolveMap.r;

     if (value < dissolveThreshold) {
      discard; 
    }

    o *= texture(cc_spriteTexture, uv0); // blend;

    o *= color;
    if (value < dissolveThreshold + 0.05) {
      o = vec4(0.9, 0.6, 0.3, o.a); // fade to edge
    }

    return o;
  }
}%

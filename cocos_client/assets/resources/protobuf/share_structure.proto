package share;
syntax = "proto3";

// user data
message user_data {
    required string name = 1; // user name, ommited
    required string uid = 2; // user id
    required string wallet = 3; // wallet address
    required uint64 lastlogintm = 4; // last login time, unix time stamp in ms
}

// ----------------------------------------------------------------------------

// player simple info
message player_sinfo {
    required uint32 playerid = 1; // player id
    required uint32 mapid = 2;
    required string pname = 3;
    required uint32 speed = 4;
    required uint32 level = 5;
    required uint32 exp = 6;
    optional uint32 lastAPRecTms = 7;
    required pos2d pos = 8;
    required uint32 treasureProgress = 9;
    required heat_value_data heatValue = 10;
    repeated string treasureDidGetRewards = 11;
    repeated string pointTreasureDidGetRewards = 12;
    required uint32 cityRadialRange = 13;
    required bool didFinishRookie = 14;
    optional troop_info_data generateTroopInfo = 15;
    optional energy_info_data generateEnergyInfo = 16;

    optional uint32 currFetchTimes = 17;
    optional uint32 limitFetchTimes = 18;

    map<string,attacker_data> attacker = 19;
    map<string,string> defender = 20;
}

// self player data
message player_data {
    required player_info info = 1; // player info
}

// player info 
message player_info {
    required player_sinfo sinfo = 1; // player simple info
    repeated building_data buildings = 2;
    optional storehouse_data storehouse = 3;
    optional artifact_data artifact = 4;
    optional usermap_data usermap = 5;
    optional nfts_data nfts = 6;
}

message storehouse_data {
    map<string,item_data> items = 1;
}

message artifact_data {
    map<string,artifact_info_data> items = 1;
}

message usermap_data {
    map<string,pioneer_data> pioneer = 1;
}

message nfts_data {
    map<string,nfts_info_data> nfts = 1;
}

message artifact_info_data {
    optional string uniqueId = 1;
    optional string artifactConfigId = 2; // artifact config id
    optional uint32 count = 3; // count
    optional uint32 addTimeStamp = 4;
    optional uint32 effectIndex = 5;
}

message pioneer_data {
    optional string id = 1;
    optional bool show = 2;
    optional uint32 faction = 3;
    optional string type = 4;
    optional pos2d stayPos = 5;
    optional uint32 hpMax = 6;
    optional uint32 hp = 7;
    optional uint32 attack = 8;
    optional uint32 defend = 9;
    optional uint32 speed = 10;
    optional string actionType = 11;
    optional uint32 eventStatus = 12;
    optional uint32 actionBeginTimeStamp = 13;
    optional uint32 actionEndTimeStamp = 14;
    optional uint32 winProgress = 15;
    optional uint32 winExp = 16;
    optional user_map_member_status showHideStruct = 17;
    optional string actionEventId = 18;
    optional string NFTInitLinkId = 19;
    optional int32 rebirthCountTime = 20;
    optional string killerId = 21;
    optional string NFTId = 22;
    optional string talkId = 23;
    optional user_map_member_status talkCountStruct = 24;
}

message user_map_member_status {
    optional uint32 countTime = 1;
    optional bool isShow = 2;
}

message building_data {
    required string id = 1;
    required string anim = 2;
    required uint32 level = 3;
    required uint32 upgradeCountTime = 4;
    required uint32 upgradeTotalTime = 5;
    required bool upgradeIng = 6;
}

message pos2d {
    required uint32 x = 1;
    required uint32 y = 2;
}

message heat_value_data {
    required uint32 getTimestamp = 1;
    required uint32 currentHeatValue = 2;
    required uint32 lotteryTimes = 3;
    required uint32 lotteryTimesLimit = 4;
    required uint32 lotteryProcessLimit = 5;
}

message energy_info_data {
    required uint32 countTime = 1;
    required uint32 totalEnergyNum = 2;
}

message troop_info_data {
    required uint32 countTime = 1;
    required uint32 troopNum = 2;
}

message item_data {
    required string itemConfigId = 1; // item id, see in item config
    required int32 count = 2; // count
    required uint32 addTimeStamp = 3;
}

message nfts_info_data {
    required string uniqueId = 1;
    required uint32 rarity = 2;
    required string name = 3;
    optional uint32 attack = 4;
    optional uint32 defense = 5;
    optional uint32 hp = 6;
    optional uint32 speed = 7;
    optional uint32 iq = 8;
    optional uint32 level = 9;
    optional uint32 levelLimit = 10;
    optional uint32 rank = 11;
    optional uint32 rankLimit = 12;

    optional uint32 attackGrowValue = 13;
    optional uint32 defenseGrowValue = 14;
    optional uint32 hpGrowValue = 15;
    optional uint32 speedGrowValue = 16;
    optional uint32 iqGrowValue = 17;
    repeated nft_pioneer_skil skills = 18;

    optional string workingBuildingId = 19;

    optional uint32 addTimeStamp = 20;
}

message nft_pioneer_skil {
    optional string id = 1;
    optional bool isOriginal = 2;
}

message tran_data {
    required string signerlogid = 1; // signserver logid
    required string txhash = 2; // transaction hash
    required string txtype = 3; // transaction type
    required uint32 createdtm = 4; // transaction log time
    required uint32 state = 5; // transaction state, succ = 1
}

message attacker_data {
    optional string pioneerId = 1;
    optional string buildingId = 2;
}

message actiontype_change_data {
    optional string pioneerId = 1;
    optional string actiontype = 2;
}

message treasure_day_data {
    map<string, treasure_level_arr> rankData = 1;
}

message treasure_level_arr {
    repeated treasure_level levels = 1;
}

message treasure_level {
    required uint32 level = 1;
    repeated reward_data reward = 2;
}

message reward_data {
    required string itemId = 1;
    required uint32 count = 2;
    required uint32 num = 3;
}

message battle_report_data {
    required string action = 1;
    required string params = 2;
    required uint32 createdtm = 3;
}
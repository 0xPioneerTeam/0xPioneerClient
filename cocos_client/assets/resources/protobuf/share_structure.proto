package share;
syntax = "proto3";


message player_unused_tx {
    required string txHash = 1; // transaction hash
    required string usage = 2; // usage: 
}


// user data
message user_data {
    required string name = 1; // user name, ommited
    required string uid = 2; // user id
    required string wallet = 3; // wallet address
    required uint64 lastlogintm = 4; // last login time, unix time stamp in ms
}

// ----------------------------------------------------------------------------

// player simple info
message player_sinfo {
    required uint32 playerid = 1; // player id
    required uint32 mapid = 2;
    required string pname = 3;
    required uint32 speed = 4;
    required uint32 level = 5;
    required uint32 exp = 6;
    required pos2d pos = 7;

    required bool beginfin = 10;
    repeated string beginBoxes = 11;
    map<string, uint32> beginBoxesRandom = 12;
    repeated box_data boxes = 13;
    map<string, uint32> boxesRandom = 14;

    required uint32 treasureProgress = 20;
    required heat_value_data heatValue = 21;
    repeated string treasureDidGetRewards = 22;
    repeated string pointTreasureDidGetRewards = 23;
    required uint32 cityRadialRange = 24;
    required bool didFinishRookie = 25;
    required uint32 rookieStep = 26;
    optional troop_info_data generateTroopInfo = 27;
    optional energy_info_data generateEnergyInfo = 28;

    optional uint32 currFetchTimes = 30;
    optional uint32 limitFetchTimes = 31;

    map<string,string> defender = 40;
}

// self player data
message player_data {
    required player_info info = 1; // player info
}

// player info 
message player_info {
    required player_sinfo sinfo = 1; // player simple info
    repeated building_data buildings = 2;
    optional storehouse_data storehouse = 3;
    optional artifact_data artifact = 4;
    optional usermap_data usermap = 5;
    optional nfts_data nfts = 6;
    optional mapbuilding_data mapbuilding = 7;
    repeated task_data tasks = 8;
    repeated pos2d shadows = 9;
}

message storehouse_data {
    map<string,item_data> items = 1;
}

message artifact_data {
    map<string,artifact_info_data> items = 1;
}

message usermap_data {
    map<string,pioneer_data> pioneer = 1;
}

message nfts_data {
    map<string,nfts_info_data> nfts = 1;
}

message mapbuilding_data {
    map<string,mapbuilding_info_data> buildings = 1;
}

message artifact_info_data {
    optional string uniqueId = 1;
    optional string artifactConfigId = 2; // artifact config id
    optional int32 count = 3; // count
    optional uint32 addTimeStamp = 4;
    optional int32 effectIndex = 5;
    repeated string effect = 6;
}

message artifact_three_conf {
    required uint32 type = 1;
    required string propId = 2;
    required uint32 num = 3;
}
message artifact_three_confs {
    repeated artifact_three_conf confs = 1;
}

message pioneer_data {
    required string id = 1;
    required bool show = 2;
    required uint32 level = 3;
    required uint32 faction = 4;
    required string type = 5;
    required pos2d stayPos = 6;

    required float hp = 7;

    required float hpMax = 8;
    // required uint32 hpMaxbase = 9;
    // repeated int32 hpMaxadd = 10;
    // repeated int32 hpMaxmul = 11;
    
    required float attack = 12;
    // required uint32 attackbase = 13;
    // repeated int32 attackadd = 14;
    // repeated int32 attackmul = 15;

    required float defend = 16;
    // required uint32 defendbase = 17;
    // repeated int32 defendadd = 18;
    // repeated int32 defendmul = 19;

    required float speed = 20;
    // required uint32 speedbase = 21;
    // repeated int32 speedadd = 22;
    // repeated int32 speedmul = 23;

    required string actionType = 24;
    required uint32 actionBeginTimeStamp = 25;
    required uint32 actionEndTimeStamp = 26;
    optional string actionEventId = 27;
    optional string actionBuildingId = 28;

    repeated fight_res actionFightRes = 29;
    optional string actionFightId = 30;
    optional uint32 actionFightWinner = 31;
    optional uint32 actionFightHp = 32;

    required uint32 eventStatus = 33;
    
    required uint32 winProgress = 34;
    required uint32 winExp = 35;
    
    optional string NFTInitLinkId = 36;
    optional int32 rebirthStartTime = 37;
    optional int32 rebirthEndTime = 38;
    optional string killerId = 39;
    optional string NFTId = 40;
    optional string talkId = 41;
    optional user_map_member_status talkCountStruct = 42;

    optional uint32 dieTime = 43;
    optional uint32 rebornTime = 44;
}
message fight_res {
    required string attackerId = 1;
    required string defenderId = 2;
    required uint32 hp = 3;
}

message user_map_member_status {
    optional uint32 countTime = 1;
    optional bool isShow = 2;
}

message building_data {
    required string id = 1;
    required string anim = 2;
    required uint32 level = 3;
    required uint32 upgradeCountTime = 4;
    required uint32 upgradeTotalTime = 5;
    required bool upgradeIng = 6;
    required uint32 troopStartTime = 7;
    required uint32 troopEndTime = 8;
    required uint32 troopNum = 9;
    required bool troopIng = 10;
    repeated uint32 pos = 11;
}

message pos2d {
    required uint32 x = 1;
    required uint32 y = 2;
}

message heat_value_data {
    required uint32 getTimestamp = 1;
    required uint32 currentHeatValue = 2;
    required uint32 lotteryTimes = 3;
    required uint32 lotteryTimesLimit = 4;
    required uint32 lotteryProcessLimit = 5;
}

message energy_info_data {
    required uint32 countTime = 1;
    required uint32 totalEnergyNum = 2;
}

message troop_info_data {
    required uint32 countTime = 1;
    required uint32 troopNum = 2;
}

message item_data {
    required string itemConfigId = 1; // item id, see in item config
    required int32 count = 2; // count
    required uint32 addTimeStamp = 3;
}

message nfts_info_data {
    required string uniqueId = 1;
    required uint32 rarity = 2;
    required string name = 3;
    optional float attack = 4;
    optional float defense = 5;
    optional float hp = 6;
    optional float speed = 7;
    optional float iq = 8;
    optional uint32 level = 9;
    optional uint32 levelLimit = 10;
    optional uint32 rank = 11;
    optional uint32 rankLimit = 12;

    optional float attackGrowValue = 13;
    optional float defenseGrowValue = 14;
    optional float hpGrowValue = 15;
    optional float speedGrowValue = 16;
    optional float iqGrowValue = 17;
    repeated nft_pioneer_skil skills = 18;

    optional string workingBuildingId = 19;

    optional uint32 addTimeStamp = 20;
}

message mapbuilding_info_data {
    required string id = 1;
    required string name = 2;
    required uint32 type = 3;
    required uint32 level = 4;
    required bool show = 5;
    required uint32 faction = 6;

    repeated pos2d stayMapPositions = 7;
    required uint32 stayPosType = 8;
    optional string animType = 9;

    repeated string defendPioneerIds = 10;

    repeated string gatherPioneerIds = 11;
    optional building_resource resources = 12;
    optional uint32 quota = 13;

    repeated string explorePioneerIds = 14;

    optional string eventId = 15;
    repeated string eventPioneerIds = 16;
    map<string,pioneer_data> eventPioneerDatas = 17;

    optional uint32 progress = 18;
    required uint32 exp = 19;
    

    optional float hpMax = 20;
    optional float hp = 21;
    optional float attack = 22;
    optional uint32 winprogress = 23;

    
    optional uint32 wormholdCountdownTime = 24;
    map<string,string> attacker = 25;

    optional uint32 tavernCountdownTime = 26;

    optional uint32 dieTime = 27;
    optional uint32 rebornTime = 28;
}

message building_resource {
    optional string id = 1;
    optional uint32 num = 2;
    // optional uint32 numbase = 3;
    // optional uint32 nummul = 4;
}


message nft_pioneer_skil {
    optional string id = 1;
    optional bool isOriginal = 2;
}

message tran_data {
    required string signerlogid = 1; // signserver logid
    required string txhash = 2; // transaction hash
    required string txtype = 3; // transaction type
    required uint32 createdtm = 4; // transaction log time
    required uint32 state = 5; // transaction state, succ = 1
}

message attacker_data {
    optional string pioneerId = 1;
    optional string buildingId = 2;
}

message actiontype_change_data {
    optional string pioneerId = 1;
    optional string actiontype = 2;
}

message treasure_day_data {
    map<string, treasure_level_arr> rankData = 1;
}
message treasure_level_arr {
    repeated treasure_level levels = 1;
}
message treasure_level {
    required uint32 level = 1;
    repeated reward_data reward = 2;
}

message box_data {
    required string id = 1;
    required bool opened = 2;
}

message reward_data {
    required string itemId = 1;
    required uint32 count = 2;
    required uint32 num = 3;
}

message battle_report_data {
    required string action = 1;
    required string params = 2;
    required uint32 createdtm = 3;
}

message task_data {
    required string taskId = 1;
    required uint32 stepIndex = 2;
    required bool isFinished = 3;
    required bool isFailed = 4;
    required bool canGet = 5;
    required bool isGetted = 6;
    repeated task_step_data steps = 7;
}
message task_step_data {
    required string id = 1;
    required uint32 completeIndex = 2;
}

message settlement_data {
    required uint32 level = 1;
    repeated string newPioneerIds = 2;
    required uint32 killEnemies = 3;
    required uint32 gainResources = 4;
    required uint32 consumeResources = 5;
    required uint32 gainTroops = 6;
    required uint32 consumeTroops = 7;
    required uint32 gainEnergy = 8;
    required uint32 consumeEnergy = 9;
    required uint32 exploredEvents = 10;
}
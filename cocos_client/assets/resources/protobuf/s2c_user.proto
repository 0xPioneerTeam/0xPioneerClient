package s2c_user;
syntax = "proto3";

import "./share_structure.proto";

// server error
message server_error {
    required int32 res = 1; // error code see {ServerErrorCode}
}

// login res
message login_res {
    required int32 res = 1;  // error code see {ServerErrorCode}
    optional bool isNew = 2; // =ture need create_player, else enter_game
    optional share.user_data data = 3; // user data
}
// create player
message create_player_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    optional player_sinfo sinfo = 2; // simple info of player
}
// enter game
message enter_game_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    optional share.player_data data = 2;
}
// update name
message update_name_res {
    required int32 res = 1;
    required string name = 2;
}

// move
message player_goto {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required share.player_mov_info goto = 2; // goto move info
}
// stop move
message player_stop {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required share.pos2d pos = 2; // stop position
}
// stop and goto home
message player_stophome {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required share.pos2d pos = 2; // stop position
}
// change map
message changemap_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    optional uint32 tomapid = 2; // target map id
    optional uint32 selfInstid = 3; // new map instance id, bind it with player
    optional share.pos2d pos = 4; // position
}


// rookie
message player_rookie_finish_res {
    required int32 res = 1;
}
message player_rookie_update_res {
    required int32 res = 1;
    optional uint32 rookieStep = 2;
}
message player_rookie_wormhole_fight_res {
    required int32 res = 1;
    optional string pioneerId = 2;
    optional uint32 hp = 3;
    repeated share.fight_res fightRes = 4;
}
message player_get_rookie_award_res {
    required int32 res = 1;
}


// ------ chain ------
message get_pending_res {
    required int32 res = 1;
    repeated share.tran_data pending = 2; // pending transactions
}
message upload_pending_res {
    required int32 res = 1;
}
message get_pending_history_res {
    required int32 res = 1;
    optional uint32 page = 2;
    optional uint32 size = 3;
    optional uint32 total = 4;
    repeated share.tran_data history = 5;
}
message get_block_height_res {
    required int32 res = 1;
    optional uint32 height = 2;
    optional uint32 l1height = 3;
}
message check_unused_tx_status_res {
    required int32 res = 1; // error code see {ServerErrorCode}, if res==ServerErrorCode.ResPlayerUnspendTxAlreadyUsed, than stop try and remove unused tx
    optional player_unused_tx txStatus = 2; // txStatus
    optional bool isUsed = 3; // is used
}
// chain: notify
message pending_change {
    required string changetype = 1; // new mod remove
    required share.tran_data trandata = 2; // pending change tran data
}


// ------ get data ------
message get_battle_report_res {
    required int32 res = 1;
    optional share.battle_report_data data = 2;
}
message get_user_settlement_info_res {
    required int32 res = 1;
    map<string, share.settlement_data> data = 2;
}
message get_new_battle_report_res {
    required int32 res = 1;
    repeated share.new_battle_report_data data = 2;
}
message receive_new_battle_report_reward_res {
    required int32 res = 1;
    optional uint32 id = 2;
}

// ------ map ------
// get map data
message get_map_info_res {
    required int32 res = 1;
    repeated share.map_info_data info = 2;
    map<string, share.pioneer_data> user = 3;
}
// enter zone
message player_enterzone {
    repeated playerinzoneinfo infos = 1; // in zone player info
}
message playerinzoneinfo {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required uint32 playerid = 2; // player id
    required string pioneerId = 3;
    required uint32 ver = 4;  // avatar version, +1 each time avatar/showinfo is changed
    required share.pos2d pos = 5; // position
    optional share.player_mov_info goto = 6; // current moving info
}
// leave zone
message player_leavezone {
    repeated uint32 playerids = 1; // leave zone player ids
}
message pioneer_leavezone {
    repeated string pioneerIds = 1;
}

// ------ player ------
// player: talk
message player_talk_select_res {
    required int32 res = 1;
    optional string talkId = 2;
    optional int32 selectIndex = 3;
}
// player: piot2heat
message player_piot_to_heat_res {
    required int32 res = 1;
}
// player: level
message player_level_reward_res {
    required int32 res = 1;
    optional uint32 level = 2;
}
message player_level_up_res {
    required int32 res = 1;
}
// player: psyc2energy
message player_psyc_to_energy_res {
    required int32 res = 1;
    optional string pioneerId = 2;
}
// player: troop2hp
message player_troop_to_hp_res {
    required int32 res = 1;
    optional string pioneerId = 2;
}
// player: notify
message player_exp_change {
    required int32 addExp = 1; // exp change value
    required uint32 newExp = 2; // player new exp after change
    optional uint32 newLevel = 3; // player new level after change if exist
    optional uint32 newPsycLimit = 4; // player new level after change if exist
}
message player_lvlup_change {
    required uint32 hpMaxChangeValue = 1;
    required uint32 newPsycLimit = 2;
    required uint32 newLv = 3;
    repeated share.item_data items = 4;
    repeated share.artifact_info_data artifacts = 5;
}


// ------ pioneer ------
// pioneer: getinfo
message get_pioneer_info_res {
    required int32 res = 1;
    repeated share.pioneer_data info = 2;
}
// pioneer: show/hide
message player_pioneer_change_show_res {
    required int32 res = 1;
    optional string pioneerId = 2;
    optional bool show = 3;
}
// pioneer: move
message player_move_res {
    required int32 res = 1;
    optional string pioneerId = 2;
    repeated share.pos2d movePath = 3;
}
// pioneer: gather
message player_gather_start_res {
    required int32 res = 1;
    required string buildingId = 2;
    required string pioneerId = 3;
}
// pioneer: explore
message player_explore_start_res {
    required int32 res = 1;
    optional string buildingId = 2;
    optional string pioneerId = 3;
}
message player_explore_npc_start_res {
    required int32 res = 1;
    optional string pioneerId = 2;
    optional string npcId = 3;
}
message player_explore_gangster_start_res {
    required int32 res = 1;
    optional string pioneerId = 2;
    optional string gangsterId = 3;
}
message player_explore_maincity_res {
    required int32 res = 1;
    optional string buildingId = 2;
    optional uint32 battlePower = 5;
}
message player_fight_maincity_res {
    required int32 res = 1;
    required string pioneerId = 2;
    required string buildingId = 3;
}
// pioneer: fight(map)
message player_fight_start_res {
    required int32 res = 1;
    required string attackerId = 2;
    required string defenderId = 3;
}
// pioneer: event
message player_event_start_res {
    required int32 res = 1;
    required string buildingId = 2;
    required string pioneerId = 3;
}
message player_event_generate_enemy_res {
    required int32 res = 1;
}
message player_event_select_res {
    required int32 res = 1;
}
message player_event_exit_res {
    required int32 res = 1;
}
message player_maincity_back_res {
    required int32 res = 1;
    optional string pioneerId = 2;
}
message player_pos_detect_res {
    required int32 res = 1;
    optional share.pos2d detect = 2;
}

message player_get_new_pioneer {
    repeated share.pioneer_data datas = 1;
}
// pioneer: notify
message sinfo_change {
    required share.player_sinfo info = 1;
}
message pioneer_change {
    repeated share.pioneer_data pioneers = 1;
}
message player_actiontype_change {
    required int32 res = 1;
    optional share.actiontype_change_data data = 2;
}
message player_heat_change {
    required uint32 change = 1;
    required uint32 newval = 2;
    required uint32 newlotteryTimesLimit = 3;
    required uint32 newlotteryProcessLimit = 4;
}
message player_map_pioneer_show_change {
    required string pioneerId = 1;
    required uint32 isShow = 2;
}
message player_map_pioneer_faction_change {
    required string pioneerId = 1;
    required uint32 faction = 2;
}
message mappioneer_reborn_change {
    required int32 res = 1;
}
message pioneer_reborn_res {
    required int32 res = 1;
    optional string pioneerId = 2;
    optional uint32 rebirthStartTime = 3;
    optional uint32 rebirthEndTime = 4;
}
message player_fight_end {
    required string pioneerId = 1;
}


// ------ mapbuilding ------
// mapbuilding: getinfo
message get_mapbuilding_info_res {
    required int32 res = 1;
    repeated share.mapbuilding_info_data info = 2;
}
// mapbuilding: notify
message mapbuilding_change {
    repeated share.mapbuilding_info_data mapbuildings = 1;
}
message player_map_building_show_change {
    required string buildingId = 1;
    required uint32 isShow = 2;
}
message player_map_building_faction_change {
    required string buildingId = 1;
    required uint32 faction = 2;
}
message mapbuilding_reborn_change {
    required int32 res = 1;
}


// ------ task ------
message get_user_task_info_res {
    required int32 res = 1;
    repeated share.task_data tasks = 2;
}
// task: notify
message user_task_did_change {
    required share.task_info_data task = 1;
}
message user_task_action_talk {
    required string talkId= 1;
}
message user_task_talk_info_change {
    map<string, task_talk_data> canTalkData = 1;
}

message user_mission_did_change {
    repeated share.mission_data missions = 1;
}

// ------ item ------
message player_item_use_res {
    required int32 res = 1;
}
// item: notify
message storhouse_change {
    repeated share.item_data iteminfo = 1;
}


// ------ artifact ------
message player_artifact_change_res {
    required int32 res = 1;
    repeated share.artifact_info_data data = 2;
}
message player_artifact_combine_res {
    required int32 res = 1;
    repeated share.artifact_info_data data = 2;
}
// artifact: notify
message artifact_change {
    repeated share.artifact_info_data iteminfo = 1;
}


// ------ worldbox ------
message player_worldbox_open_res {
    required int32 res = 1;
    optional uint32 boxIndex = 2;
    optional string boxId = 3;
    repeated share.item_data items = 4;
    repeated share.artifact_info_data artifacts = 5;
    map<string, artifact_three_confs> threes = 6;
}
message player_worldbox_open_select_res {
    required int32 res = 1;
    optional uint32 boxIndex = 2;
    optional int32 selectIndex = 3;
}
message player_worldbox_beginner_open_res {
    required int32 res = 1;
    optional uint32 boxIndex = 2;
    optional string boxId = 3;
    optional bool finish = 4;
    repeated share.item_data items = 5;
    repeated share.artifact_info_data artifacts = 6;
    map<string, artifact_three_confs> threes = 7;
}
message player_worldbox_beginner_open_select_res {
    required int32 res = 1;
    optional uint32 boxIndex = 2;
    optional int32 selectIndex = 3;
}
// worldbox: notify
message player_worldbox_progress_change {
    required int32 addProgress = 1;
    required uint32 newProgress = 2;
}


// ------ inner-building ------
message player_building_levelup_res {
    required int32 res = 1;
    optional share.building_data data = 2;
}
message player_generate_troop_start_res {
    required int32 res = 1;
}
message player_building_delegate_nft_res {
    required int32 res = 1;
    repeated share.building_data buildings = 2;
    repeated share.nfts_info_data nfts = 3;
}
message player_building_remove_nft_res {
    required int32 res = 1;
    repeated share.building_data buildings = 2;
    repeated share.nfts_info_data nfts = 3;
}
message fetch_user_psyc_res {
    required int32 res = 1;
    optional float psycfetched = 2; // mint gold transaction hash, see in contract
    optional string txhash = 3; // mint gold transaction hash, see in contract
    optional string logid = 4; // mint gold transaction log id 
}
message player_building_pos_res {
    required int32 res = 1;
    optional string buildingId = 2;
    repeated uint32 pos = 3;
}
message player_training_start_res {
    required int32 res = 1;
    repeated share.training_data training = 2;
}
// inner-building: notify
message building_change {
    repeated share.building_data buildings = 1;
}


// ------ pioneerNFT ------
message player_nft_lvlup_res {
    required int32 res = 1;
    optional share.nfts_info_data nftData = 2;
}
message player_nft_rankup_res {
    required int32 res = 1;
    optional share.nfts_info_data nftData = 2;
}
message player_nft_skill_learn_res {
    required int32 res = 1;
    optional share.nfts_info_data nftData = 2;
}
message player_nft_skill_forget_res {
    required int32 res = 1;
    optional share.nfts_info_data nftData = 2;
}
message player_bind_nft_res {
    required int32 res = 1;
    optional share.pioneer_data pioneerData = 2;
    optional share.nfts_info_data nftData = 3;
}
// pioneerNFT: notify
message nft_change {
    repeated share.nfts_info_data nfts = 1;
}


// ------ wormhole ------
message player_wormhole_set_defender_res {
    required int32 res = 1;
    map<string,string> defender = 2;
}
message player_wormhole_set_attacker_res {
    required int32 res = 1;
    map<string,string> attacker = 2;
    optional string buildingId = 3;
}
message player_wormhole_fight_start_res {
    required int32 res = 1;
    optional string buildingId = 2;
}
// wormhole: notify
message player_wormhole_fight_attacked_res {
    required int32 res = 1;
    optional string attackerName = 2;
    optional string defenderUid = 3;
}
message player_wormhole_fight_res {
    required int32 res = 1;
    optional string buildingId = 2;
    optional string defenderUid = 3;
    optional string attackerName = 4;
    optional string defenderName = 5;
    map<string,string> defenderData = 6;
    optional bool fightResult = 7;
}

message player_wormhole_tp_random_res {
    required int32 res = 1;
    required string buildingId = 2;
    required string pioneerId = 3;
    optional pos2d tpPos = 4;
}
message player_wormhole_tp_select_res {
    required int32 res = 1;
    optional string buildingId = 2;
    required string pioneerId = 3;
    optional pos2d tpPos = 4;
}
message player_wormhole_tp_back_res {
    required int32 res = 1;
    required string buildingId = 2;
    required string pioneerId = 3;
}
message player_wormhole_tp_tag_res {
    required int32 res = 1;
    required string buildingId = 2;
    required string pioneerId = 3;
}


// ------ test ------
message reborn_all_res {
    required int32 res = 1;
}
message reset_data_res {
    required int32 res = 1;
}
message borad_cast_msg {
    required string msg = 1;
    required string type = 2;
}




